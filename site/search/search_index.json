{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","text":"C/C++\u5b66\u4e60\u8def\u7ebf \u8bed\u8a00\u672c\u8eab\u5b66\u4e60 \u6700\u91cd\u8981\uff1a\u6307\u9488\u3001\u5185\u5b58\u7ba1\u7406 \u57fa\u7840\u56db\u5927\u4ef6 \u6570\u636e\u7ed3\u6784 \u300a\u5927\u8bdd\u6570\u636e\u7ed3\u6784\u300b \u300a\u5251\u6307offer\u300b \u7b97\u6cd5 \u64cd\u4f5c\u7cfb\u7edf \u300atcp/ip\u8be6\u89e3\u300b \u300a\u6df1\u5165\u7406\u89e3\u64cd\u4f5c\u7cfb\u7edf\u300b \u8bbe\u8ba1\u6a21\u5f0f \u5927\u8bdd\u8bbe\u8ba1\u6a21\u5f0f \u5e94\u7528\u4e0e\u7f16\u7a0b\u5b9e\u8df5 Linux \u7f16\u8bd1\u3001\u8c03\u8bd5 GCC \u5b98\u65b9\u6587\u6863 cmake\uff08makefile\uff09 GDB\u8c03\u8bd5\u5de5\u5177 debugging with GDB Linux\u73af\u5883\u7f16\u7a0b \u7cfb\u7edf\u7f16\u7a0b API\u7684\u4f7f\u7528 \u591a\u7ebf\u7a0b\u7f16\u7a0b \u7f51\u7edc\u7f16\u7a0b","title":"C/C++\u5b66\u4e60\u8def\u7ebf"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#cc","text":"","title":"C/C++\u5b66\u4e60\u8def\u7ebf"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_1","text":"\u6700\u91cd\u8981\uff1a\u6307\u9488\u3001\u5185\u5b58\u7ba1\u7406","title":"\u8bed\u8a00\u672c\u8eab\u5b66\u4e60"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_2","text":"\u6570\u636e\u7ed3\u6784 \u300a\u5927\u8bdd\u6570\u636e\u7ed3\u6784\u300b \u300a\u5251\u6307offer\u300b \u7b97\u6cd5 \u64cd\u4f5c\u7cfb\u7edf \u300atcp/ip\u8be6\u89e3\u300b \u300a\u6df1\u5165\u7406\u89e3\u64cd\u4f5c\u7cfb\u7edf\u300b \u8bbe\u8ba1\u6a21\u5f0f \u5927\u8bdd\u8bbe\u8ba1\u6a21\u5f0f","title":"\u57fa\u7840\u56db\u5927\u4ef6"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#_3","text":"Linux \u7f16\u8bd1\u3001\u8c03\u8bd5 GCC \u5b98\u65b9\u6587\u6863 cmake\uff08makefile\uff09 GDB\u8c03\u8bd5\u5de5\u5177 debugging with GDB","title":"\u5e94\u7528\u4e0e\u7f16\u7a0b\u5b9e\u8df5"},{"location":"C%20or%20C%2B%2B/CC%2B%2B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/#linux","text":"\u7cfb\u7edf\u7f16\u7a0b API\u7684\u4f7f\u7528 \u591a\u7ebf\u7a0b\u7f16\u7a0b \u7f51\u7edc\u7f16\u7a0b","title":"Linux\u73af\u5883\u7f16\u7a0b"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/","text":"CSDN\u4e60\u9898 0202 \u7136\u540e\u662f\u51e0\u70b9 #include <stdio.h> int main(void) { int a, b, c, d; scanf(\"%d %d\", &a, &b); c = a / 100 * 60 + a % 100 + b ; d = c / 60 * 100 + c % 60; printf (\"%d\", d); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i, j, x = 0, y, z; scanf(\"%d%d\", &i, &j); if(i >= 1000) { x = i / 1000; y = (i % 1000) / 100; z = (i %1000) %100; } else { y = i / 100; z = i % 100; } int s = (10*x + y) * 60 + z; int n = s + j; i = n / 60 *100 + (n - ((n / 60 )* 60)); printf(\"%d\", i); return 0; } 0203 \u9006\u5e8f\u7684\u4e09\u4f4d\u6570 #include <stdio.h> int main(void) { int a, b, c, d, e; scanf (\"%d\", &a); c = a / 100, e = a % 10, d = ( a - c * 100 ) / 10; b = c + d * 10 + e * 100; printf (\"%d\", b); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); int a = i % 100 %10; int b = i / 100; int c = i %100 / 10; i = a*100 + b + c*10; printf(\"%d\", i); return 0; } 0204 BCD\u89e3\u5bc6 \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); int t = i % 16 + i / 16 * 10; printf(\"%d\", t); return 0; } 0300 \u8d85\u901f\u5224\u65ad #include <stdio.h> int main(void) { unsigned int V; scanf (\"%d\",&V); if (V>60) printf(\"Speed:%d - Speeding\",V); else printf(\"Speed:%d - OK\",V); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); if(i <= 60) printf(\"Speed: %d - OK\", i); else printf(\"Speed: %d - Speeding\", i); return 0; } 0301 \u4e09\u5929\u6253\u9c7c\u4e24\u5929\u6652\u7f51 #include <stdio.h> int main(void) { int N; scanf(\"%d\",&N); if (N % 5<=3 && N % 5 > 0) printf(\"Fishing in day %d\",N); else printf(\"Drying in day %d\",N); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); if(i%5 <= 3 && i%5 != 0) printf(\"Fishing in day %d\", i); else printf(\"Drying in day %d\", i); return 0; } 0302 \u7528\u5929\u5e73\u627e\u5c0f\u7403 #include <stdio.h> int main(void) { int A, B, C; scanf(\"%d %d %d\",&A,&B,&C); if (A == B, B != C) //\u6ce8\u610f\u903b\u8f91\u7b26\u53f7== printf(\"C\"); else if (B==C,A!=B) printf(\"A\"); else if (A == C && B != A) printf(\"B\"); return 0; } # include <stdio.h> int main() { int A, B, C; scanf(\"%d%d%d\",&A, &B, &C); if(A != B && B ==C) printf(\"A\"); else if(B != A && A == C) printf(\"B\"); else if(C != A && A == B) printf(\"C\"); return 0; } 0303 12-24\u5c0f\u65f6\u5236 #include <stdio.h> int main(void) { int h1,m,h2; scanf(\"%d:%d\",&h1,&m); if (h1 > 12) printf(\"%d:%d PM\",h2 = h1 - 12, m); if else (h1 = 12) printf(\"%d:%d PM\",h1, m); if else (h1 < 12) printf(\"%d:%d AM\",h1, m); } #include <stdio.h> int main() { int i, j; scanf(\"%d:%d\", &i, &j); if(i >= 0 && i < 12) printf(\"%d:%d AM\", i, j); else if(i == 12) printf(\"%d:%d PM\", i, j); else if(i == 24) printf(\"%d:%d AM\", i-24, j); else printf(\"%d:%d PM\", i-12, j); return 0; } 0304\u6210\u7ee9\u8f6c\u6362 \u2460 #include <stdio.h> int main(void) { int score; scanf(\"%d\",&score); if (score >= 90) printf(\"A\"); else if (score>=80 && score < 90) printf (\"B\"); else if (score >=70 && score <80) printf(\"C\"); else if (score >= 60 && score <70) printf(\"D\"); else printf(\"E\"); return 0; } \u2461 #include <stdio.h> int main() { int score, a; scanf(\"%d\",&score); a = score / 10; switch (a){ case 9: printf(\"A\"); break; case 8: printf(\"B\"); break; case 7: printf(\"C\"); break; case 6: printf(\"D\"); break; default: printf(\"E\"); break; } return 0; } 0400 \u6c42\u7b26\u5408\u7ed9\u5b9a\u6761\u4ef6\u7684\u6574\u6570\u96c6 #include <stdio.h> int main() { int A,B,C,i=0,m; scanf(\"%d\",&A); m = A; for(;A < m + 4;A++) for(B = m;B < m + 4;B++) for(C = m;C < m + 4;C++){ if( A != B && A != C && B != C){ printf(\"%d%d%d\",A,B,C); i++; if (i % 6 == 0){ printf(\"\\n\"); }else { printf(\" \");} } } return 0; } #include <stdio.h> int main() { int A, i, j, k, p = 0; scanf(\"%d\", &A); for(i=A; i<A+4; ++i) for(j=A; j<A+4; ++j) for(k=A; k<A+4; ++k) { if(i != j && i != k && j != k) { printf(\"%d\", i*100+10*j+k); p++; if(p%6 == 0) printf(\"\\n\"); else printf(\" \"); } } return 0; } 0401 \u6c34\u4ed9\u82b1\u6570 #include <stdio.h> #include <math.h> //pow(float x,float y) \u8ba1\u7b97x\u7684y\u6b21\u65b9 int main() { int n, num, a, sum = 0, digit; scanf(\"%d\",&n); num = pow(10,n-1); for(;num < pow(10,n)-1;num++){ a = num; for(;num > 0;num /= 10){ digit = pow(num % 10,n); sum = sum + digit; } if (a == sum) printf(\"%d\\n\",a); num = a; sum = 0; } return 0; } #include <stdio.h> int main() { int n = 0, m = 0, l = 0, k = 0, roll = 0; int min = 1, t = 0, sum = 0, sum1 = 0; scanf(\"%d\", &n); m=n; while(m > 1) //built the minimum for n digit { min*=10; m--; } t=min; while(t < 10*min) //all the number for n digit { roll = t; m = n; sum = 1; while(m > 0) { sum = sum*(roll%10); m--; } l = n; while(l > 0) { roll = roll / 10; k = roll % 10; m = n; sum1 = 1; while(m > 0) { sum1 = sum1 * k; m--; } sum = sum + sum1; l--; } if(t == sum) { printf(\"%d\\n\", t); } t++; } return 0; } 0402 \u6253\u5370\u4e5d\u4e5d\u53e3\u8bc0\u8868 #include <stdio.h> int main() { int N, a=1, b=1; scanf(\"%d\",&N); for(;a<=9N;a++){ for(;b<=a;b++){ printf(\"%d*%d=%d\\t\",a,b,a*b); } printf(\"\\n\"); b = 1; } return 0; }","title":"CSDN\u4e60\u9898"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#csdn","text":"","title":"CSDN\u4e60\u9898"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0202","text":"#include <stdio.h> int main(void) { int a, b, c, d; scanf(\"%d %d\", &a, &b); c = a / 100 * 60 + a % 100 + b ; d = c / 60 * 100 + c % 60; printf (\"%d\", d); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i, j, x = 0, y, z; scanf(\"%d%d\", &i, &j); if(i >= 1000) { x = i / 1000; y = (i % 1000) / 100; z = (i %1000) %100; } else { y = i / 100; z = i % 100; } int s = (10*x + y) * 60 + z; int n = s + j; i = n / 60 *100 + (n - ((n / 60 )* 60)); printf(\"%d\", i); return 0; }","title":"0202 \u7136\u540e\u662f\u51e0\u70b9"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0203","text":"#include <stdio.h> int main(void) { int a, b, c, d, e; scanf (\"%d\", &a); c = a / 100, e = a % 10, d = ( a - c * 100 ) / 10; b = c + d * 10 + e * 100; printf (\"%d\", b); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); int a = i % 100 %10; int b = i / 100; int c = i %100 / 10; i = a*100 + b + c*10; printf(\"%d\", i); return 0; }","title":"0203 \u9006\u5e8f\u7684\u4e09\u4f4d\u6570"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0204-bcd","text":"\u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); int t = i % 16 + i / 16 * 10; printf(\"%d\", t); return 0; }","title":"0204 BCD\u89e3\u5bc6"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0300","text":"#include <stdio.h> int main(void) { unsigned int V; scanf (\"%d\",&V); if (V>60) printf(\"Speed:%d - Speeding\",V); else printf(\"Speed:%d - OK\",V); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); if(i <= 60) printf(\"Speed: %d - OK\", i); else printf(\"Speed: %d - Speeding\", i); return 0; }","title":"0300 \u8d85\u901f\u5224\u65ad"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0301","text":"#include <stdio.h> int main(void) { int N; scanf(\"%d\",&N); if (N % 5<=3 && N % 5 > 0) printf(\"Fishing in day %d\",N); else printf(\"Drying in day %d\",N); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int i; scanf(\"%d\", &i); if(i%5 <= 3 && i%5 != 0) printf(\"Fishing in day %d\", i); else printf(\"Drying in day %d\", i); return 0; }","title":"0301 \u4e09\u5929\u6253\u9c7c\u4e24\u5929\u6652\u7f51"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0302","text":"#include <stdio.h> int main(void) { int A, B, C; scanf(\"%d %d %d\",&A,&B,&C); if (A == B, B != C) //\u6ce8\u610f\u903b\u8f91\u7b26\u53f7== printf(\"C\"); else if (B==C,A!=B) printf(\"A\"); else if (A == C && B != A) printf(\"B\"); return 0; } # include <stdio.h> int main() { int A, B, C; scanf(\"%d%d%d\",&A, &B, &C); if(A != B && B ==C) printf(\"A\"); else if(B != A && A == C) printf(\"B\"); else if(C != A && A == B) printf(\"C\"); return 0; }","title":"0302 \u7528\u5929\u5e73\u627e\u5c0f\u7403"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0303-12-24","text":"#include <stdio.h> int main(void) { int h1,m,h2; scanf(\"%d:%d\",&h1,&m); if (h1 > 12) printf(\"%d:%d PM\",h2 = h1 - 12, m); if else (h1 = 12) printf(\"%d:%d PM\",h1, m); if else (h1 < 12) printf(\"%d:%d AM\",h1, m); } #include <stdio.h> int main() { int i, j; scanf(\"%d:%d\", &i, &j); if(i >= 0 && i < 12) printf(\"%d:%d AM\", i, j); else if(i == 12) printf(\"%d:%d PM\", i, j); else if(i == 24) printf(\"%d:%d AM\", i-24, j); else printf(\"%d:%d PM\", i-12, j); return 0; }","title":"0303 12-24\u5c0f\u65f6\u5236"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0304","text":"\u2460 #include <stdio.h> int main(void) { int score; scanf(\"%d\",&score); if (score >= 90) printf(\"A\"); else if (score>=80 && score < 90) printf (\"B\"); else if (score >=70 && score <80) printf(\"C\"); else if (score >= 60 && score <70) printf(\"D\"); else printf(\"E\"); return 0; } \u2461 #include <stdio.h> int main() { int score, a; scanf(\"%d\",&score); a = score / 10; switch (a){ case 9: printf(\"A\"); break; case 8: printf(\"B\"); break; case 7: printf(\"C\"); break; case 6: printf(\"D\"); break; default: printf(\"E\"); break; } return 0; }","title":"0304\u6210\u7ee9\u8f6c\u6362"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0400","text":"#include <stdio.h> int main() { int A,B,C,i=0,m; scanf(\"%d\",&A); m = A; for(;A < m + 4;A++) for(B = m;B < m + 4;B++) for(C = m;C < m + 4;C++){ if( A != B && A != C && B != C){ printf(\"%d%d%d\",A,B,C); i++; if (i % 6 == 0){ printf(\"\\n\"); }else { printf(\" \");} } } return 0; } #include <stdio.h> int main() { int A, i, j, k, p = 0; scanf(\"%d\", &A); for(i=A; i<A+4; ++i) for(j=A; j<A+4; ++j) for(k=A; k<A+4; ++k) { if(i != j && i != k && j != k) { printf(\"%d\", i*100+10*j+k); p++; if(p%6 == 0) printf(\"\\n\"); else printf(\" \"); } } return 0; }","title":"0400 \u6c42\u7b26\u5408\u7ed9\u5b9a\u6761\u4ef6\u7684\u6574\u6570\u96c6"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0401","text":"#include <stdio.h> #include <math.h> //pow(float x,float y) \u8ba1\u7b97x\u7684y\u6b21\u65b9 int main() { int n, num, a, sum = 0, digit; scanf(\"%d\",&n); num = pow(10,n-1); for(;num < pow(10,n)-1;num++){ a = num; for(;num > 0;num /= 10){ digit = pow(num % 10,n); sum = sum + digit; } if (a == sum) printf(\"%d\\n\",a); num = a; sum = 0; } return 0; } #include <stdio.h> int main() { int n = 0, m = 0, l = 0, k = 0, roll = 0; int min = 1, t = 0, sum = 0, sum1 = 0; scanf(\"%d\", &n); m=n; while(m > 1) //built the minimum for n digit { min*=10; m--; } t=min; while(t < 10*min) //all the number for n digit { roll = t; m = n; sum = 1; while(m > 0) { sum = sum*(roll%10); m--; } l = n; while(l > 0) { roll = roll / 10; k = roll % 10; m = n; sum1 = 1; while(m > 0) { sum1 = sum1 * k; m--; } sum = sum + sum1; l--; } if(t == sum) { printf(\"%d\\n\", t); } t++; } return 0; }","title":"0401 \u6c34\u4ed9\u82b1\u6570"},{"location":"C%20or%20C%2B%2B/CSDN%E4%B9%A0%E9%A2%98/#0402","text":"#include <stdio.h> int main() { int N, a=1, b=1; scanf(\"%d\",&N); for(;a<=9N;a++){ for(;b<=a;b++){ printf(\"%d*%d=%d\\t\",a,b,a*b); } printf(\"\\n\"); b = 1; } return 0; }","title":"0402 \u6253\u5370\u4e5d\u4e5d\u53e3\u8bc0\u8868"},{"location":"C%20or%20C%2B%2B/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97 \u4e00\u3001\u6309\u4f4d\u8fd0\u7b97 \u4f4d\u4e0e & \u4f4d\u6216 | \u4f4d\u53cd ~ \u4f4d\u5f02\u6216 ^ \uff08\u4e0d\u76f8\u7b49\u4e3a1\uff09 \u5de6\u79fb << \u53f3\u79fb >>","title":"\u4f4d\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","text":"\u4f4d\u4e0e & \u4f4d\u6216 | \u4f4d\u53cd ~ \u4f4d\u5f02\u6216 ^ \uff08\u4e0d\u76f8\u7b49\u4e3a1\uff09 \u5de6\u79fb << \u53f3\u79fb >>","title":"\u4e00\u3001\u6309\u4f4d\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/","text":"\u51fd\u6570 \u4e00\u3001\u521d\u89c1\u51fd\u6570 //\u7d20\u6570 int isPrime(int i) { int ret = 1; int k; for ( k = 2 ; k < i - 1 ; k++){ if (i % k == 0){ ret = 0; break; } } return ret; } \u4ee3\u7801\u590d\u5236\u662f\u7a0b\u5e8f\u8d28\u91cf\u4e0d\u826f\u7684\u8868\u73b0 //\u6c42\u548c void sum(int begin, int end) { int i; int sum = 0; for ( i = begin ; i <= end ; i++){ sum += i; } printf(\"%d\u5230%d\u7684\u548c\u662f%d\\n\",begin, end, sum); } int main(){ sum(1,10); sum(20,30); sum(35,45); return 0; } \u51fd\u6570\u7684\u5b9a\u4e49\u548c\u8c03\u7528 \u5b9a\u4e49\uff1a\u51fd\u6570\u662f\u4e00\u5757\u4ee3\u7801\uff0c\u63a5\u53d7\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5e76\u8fd4\u56de \u96f6\u4e2a\u6216\u4e00\u4e2a\u503c \u8c03\u7528\u51fd\u6570\uff1a \u8bed\u53e5\u5f62\u5f0f\uff1a max(a,b) \u8868\u8fbe\u5f0f\u5f62\u5f0f\uff1a c = max(a,b)*2 \u51fd\u6570\u53c2\u6570\uff1a c = max(a,max(b,d)) \u51fd\u6570\u4e2d\u7684\u8fd4\u56de\u503c \u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf \u53ef\u4ee5\u518d\u6b21\u4f20\u9012\u7ed9\u51fd\u6570 \u5982\u679c\u6ca1\u6709return\u8bed\u53e5\uff0c\u7531\u6700\u540e\u4e00\u4e2a\u201c}\u201d\u8fd4\u56de\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u503c \u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e0e\u51fd\u6570\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5982\u4e0d\u4e00\u81f4\uff0c\u4ee5\u51fd\u6570\u7c7b\u578b\u4e3a\u51c6 \u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff08\u5982\u4e0b\u7684\u4ee3\u7801\uff09 void \u4e0d\u80fd\u4f7f\u7528\u5e26\u503c\u7684return \u53ef\u4ee5\u6ca1\u6709return \u8c03\u7528\u65f6\u4e0d\u80fd\u505a\u8fd4\u56de\u503c\u7684\u8d4b\u503c //\u6c42\u548c void/*\u8fd4\u56de\u7c7b\u578b*/ sum(int begin, int end)/*\u51fd\u6570\u540d*/ //\u51fd\u6570\u5934 { int i; int sum = 0; for ( i = begin ; i <= end ; i++){ sum += i; } printf(\"%d\u5230%d\u7684\u548c\u662f%d\\n\",begin, end, sum); } //\u51fd\u6570\u4f53 int main(){ sum(1,10); sum(20,30); sum(35,45); return 0; } \u200b \u4e8c\u3001\u51fd\u6570 \u51fd\u6570\u539f\u578b \u51fd\u6570\u7684\u5148\u540e\u5173\u7cfb C\u7684\u7f16\u8bd1\u5668 \u9010\u884c\u5206\u6790 \u4ee3\u7801 \u53ef\u4ee5\u5148 \u58f0\u660e \uff08\u4ee5;\u7ed3\u5c3e\uff09\u540e \u5b9a\u4e49 \uff08\u65e0;\uff09 \u53c2\u6570\u4f20\u9012 C\u8bed\u8a00\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6c38\u8fdc\u53ea\u80fd\u4f20 \u503c \u7ed9\u51fd\u6570 \u6bcf\u4e2a\u51fd\u6570\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u7a7a\u95f4\uff0c \u4e0e\u5176\u4ed6\u51fd\u6570\u65e0\u5173 \u6bcf\u4e00\u6b21\u7684\u8fd0\u884c\u90fd\u65e0\u5173 \u5185\u8054\u51fd\u6570 c inline int iMax(int iVal1,int iVal2){ return iVal1>iVal2?iVal1:iVal2; } \u9002\u7528\u4e8e 1-5\u53e5 \u7684\u5c0f\u51fd\u6570\uff1b \u4e0d\u80fd\u4f7f\u7528\u5faa\u73af\u53caswitch \uff0c\u5426\u5219\u88ab\u8bd1\u4e3a\u4e00\u822c\u51fd\u6570 \u51fd\u6570\u7684\u91cd\u8f7d \u540c\u540d\u51fd\u6570\u901a\u8fc7\u4e0d\u540c\u53c2\u6570\u3001\u7c7b\u578b\u3001\u987a\u5e8f\u3001\u4e2a\u6570\uff0c\u5b9e\u73b0\u540c\u540d\u4e0d\u540c\u529f\u80fd\u51fd\u6570\u7684\u8c03\u7528 \u5982\u5404\u79cd\u591a\u8fb9\u5f62\u9762\u79ef\u7684\u8fd0\u7b97 \u672c\u5730\u53d8\u91cf\u7684\u89c4\u5219 \u672c\u5730\u53d8\u91cf\u662f\u5b9a\u4e49\u5728\u5757\u5185\u7684 \u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u51fd\u6570\u5757\u91cc \u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u8bed\u53e5\u5757\u91cc \u751a\u81f3\u662f\u4efb\u610f\u7684\u5927\u62ec\u53f7 \u5728\u5757\u5916\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u5b58\u5728 \u79bb\u5f00\u5757\u540e\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u5b58\u5728 \u5feb\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\u5728\u5757\u5185\u6709\u6548 \u5757\u5185\u7684\u53d8\u91cf\u63a9\u76d6\u5757\u5916\u7684\u540c\u540d\u53d8\u91cf \u540c\u4e00\u4e2a\u5757\u4e2d\u4e0d\u80fd\u51fa\u73b0\u540c\u540d\u53d8\u91cf \u672c\u5730\u53d8\u91cf\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 void \u53c2\u6570\u672a\u77e5\uff0c\u4f46\u4e0d\u662f\u6ca1\u6709 \u51fd\u6570\u5185\u6ca1\u6709\u53c2\u6570\u65f6\u53ef\u7528 \u9017\u53f7\u8fd0\u7b97\u7b26 \u8c03\u7528\u51fd\u6570\u65f6\u9996\u4e2a\u5706\u62ec\u53f7\u5185\u7684\u9017\u53f7\u662f\u6807\u70b9\u7b26\u53f7 \u82e5\u8981\u7528\u90fd\u597d\u8fd0\u7b97\u7b26\uff0c\u5219\u518d\u52a0\u4e00\u4e2a\u62ec\u53f7 main \u51fd\u6570 \u4e09\u3001\u53d8\u91cf\u7684\u56db\u79cd\u5b58\u50a8\u7c7b\u578b \u5c40\u90e8\u53d8\u91cf \u5b9a\u4e49\u5728\u590d\u5408\u8bed\u53e5\u5f00\u59cb\u5904 \u5757\u5185\u751f\u5b58\uff0c\u5757\u5185\u6709\u6548 \u4e0e\u5168\u5c40\u53d8\u91cf\u51b2\u7a81\u65f6\uff0c\u5c40\u90e8\u53d8\u91cf\u4f18\u5148 \u5bc4\u5b58\u5668\u7c7b\u578b\uff08register\uff09 \u4f5c\u7528\u57df\u4e0e\u524d\u8005\u76f8\u540c\uff0c\u4f46\u82e5CPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7a7a\u95f2\uff0c\u5219\u4f7f\u7528\u5bc4\u5b58\u5668\u4f5c\u4e3a\u53d8\u91cf\u7684\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6 \u9759\u6001\u7c7b\u578b \u4f5c\u7528\u57df\uff1a\u5728\u8bf4\u660e\u7684\u590d\u5408\u8bed\u53e5\u5185\u5f15\u7528\uff0c\u51fa\u4e86\u590d\u5408\u8bed\u53e5\u4e0d\u53ef\u7528 \u751f\u5b58\u671f\uff1a\u4ece\u7a0b\u5e8f\u5f00\u59cb\u5230\u7a0b\u5e8f\u7ed3\u675f ```c #include #include using namespace std; void row(void); int main(void){ int b; for(b = 1;b <= 9;b++){ row(); } return 0; } void row(void){ static int a = 1; //static\u4f7fa\u5728\u51fd\u6570\u5185\u4e00\u76f4\u6709\u6548 int b; for(b = 1;b <= 9;b++){ cout << setw(4)<< a * b; } cout << endl; a++; } ``` \u5916\u90e8\u7c7b\u578b \u5b9a\u4e49\u5728\u4efb\u4f55\u6a21\u5757\u4e4b\u5916\u7684\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf \u4f5c\u7528\u57df\uff1a\u4ece\u8bf4\u660e\u53d8\u91cf\u5f00\u59cb\u5230\u7a0b\u5e8f\u7ed3\u675f \u751f\u5b58\u671f\uff1a\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u51fd\u6570\u5bf9\u5916\u90e8\u53d8\u91cf\u7684\u4fee\u6539\u90fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u7684\u503c \u6ce8\uff1a\u4e0d\u80fd\u7528\u4f5c\u51fd\u6570\u53c2\u6570 \u53ef\u4ee5\u901a\u8fc7 extern \u6765\u6539\u53d8\u5176\u4f5c\u7528\u57df \u56db\u3001\u51fd\u6570\u95f4\u7684\u6570\u636e\u4f20\u9012 \u51fd\u6570\u89c1\u6570\u636e\u4f20\u9012\u65b9\u5f0f \u901a\u8fc7\u51fd\u6570\u53c2\u6570 \u4f20\u503c\u6216\u4f20\u5730\u5740 \u4f20\u503c\uff1a\u5f62\u53c2\u4e0e\u5b9e\u53c2 \u4f20\u5730\u5740\uff1a\u5f62\u53c2\u5b9a\u4e49\u4e3a\u6307\u9488\uff0c\u5b9e\u53c2\u4e3a\u53d8\u91cf\u7684\u5730\u5740 \u901a\u8fc7\u8fd4\u56de\u503c \u4f20\u9012\u7ed3\u679c \u51fd\u6570\u53c2\u6570\u4e3a\u5f15\u7528 \u901a\u8fc7 \u5168\u5c40\u53d8\u91cf \u4f20\u9012\u53c2\u6570\u6216\u7ed3\u679c \u4e94\u3001\u6570\u7ec4\u4e0e\u51fd\u6570\u53c2\u6570 \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u5b9a\u4e49\u7684\u4e09\u79cd\u65b9\u5f0f \u5f62\u53c2\u4f5c\u4e3a\u6307\u9488\uff1a int ave(int *p); \u5f62\u53c2\u4e3a\u65e0\u4e0b\u8868\u6570\u7ec4\uff1a int ave(int p[]) ; \u5f62\u53c2\u4e3a\u6709\u4e0b\u6807\u6570\u7ec4\uff1a int ave(int p[10]); \u516d\u3001\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570 \u6982\u5ff5\uff1a\u51fd\u6570\u7ed3\u675f\u65f6\u5019\u8fd4\u56de\u4e00\u4e2a\u5730\u5740 \u6ce8\u610f\uff1a\u5b9a\u4e49\u51fd\u6570\u65f6\u5019\u8981\u52a0\u4e0a\u201c * \u201d(\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e0e\u51fd\u6570\u7c7b\u578b\u4e00\u81f4) \u4e03\u3001\u6307\u5411\u51fd\u6570\u7684\u6307\u9488 \u51fd\u6570\u5728\u5185\u5b58\u4e2d\u7684\u9996\u5730\u5740\u4e3a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740 \u4f7f\u7528\u8fc7\u7a0b \u5b9a\u4e49\u51fd\u6570\u548c\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\uff1a int (*p)(int, int); \u6307\u9488\u6307\u5411\u51fd\u6570\uff1a p = Max; //max\u662f\u51fd\u6570\u540d \u901a\u8fc7\u6307\u9488\u5f15\u7528\u51fd\u6570\uff1a maxval = (*p)(x,y); \u793a\u4f8b\uff1a ```c++ #include using namespace std; int Imax(int, int); int main(){ int a,b,c; int( funp)(int, int); funp = Imax; cin >> a >> b; c = ( funp)(a,b); cout << \"The max is :\" << c; return 0; } int Imax(int x, int y){ return (x>y?x:y); } ``` ```c++ #include using namespace std; int Add(int,int); int Sub(int,int); int funa(int, int, int(*)(int,int)); int main(){ int a,b,c; cin >> a >> b; c = funa(a, b, Add); cout << c; c = funa(a, b, Sub); cout << c; return 0; } int funa(int a, int b, int( fun)(int,int)){ return ( fun)(a,b); } int Add(int a,int b){ return (a + b); } int Sub(int a, int b){ return (a - b); } ``` \u516b\u3001\u9012\u5f52\u51fd\u6570 \u6982\u5ff5\uff1a\u51fd\u6570\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u81ea\u6211\u8c03\u7528\u79f0\u4e3a\u9012\u5f52\u51fd\u6570 \u901a\u8fc7\u63a7\u5236\u6761\u4ef6\uff0c\u4f7f\u9012\u5f52\u7ec8\u6b62 #include <iostream> using namespace std; long ifac(long); int main(void){ long i, x; cin >> i; x = ifac(i); cout << x << endl; return 0; } long ifac(long n){ if(n == 0 || n == 1){ return 1; } else{ return n * ifac(n - 1); } } \u4e5d\u3001\u547d\u4ee4\u884c\u53c2\u6570 \u5341\u3001\u7f16\u8bd1\u9884\u5904\u7406 \u5b8f # \u5173\u952e\u8bcd \u53c2\u6570\u8868 \u7981\u6b62' ; ' \u5b8f\u5b9a\u4e49\u9884\u5904\u7406 \u4e0d\u5c5e\u4e8eC\u8bed\u8a00 \u4e0d\u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 \u63d0\u9ad8\u7a0b\u5e8f\u53ef\u8bfb\u6027\uff0c\u4fbf\u4e8e\u4fee\u6539 #define PI 3.1415926 \u5b8f\u540d\u4e00\u822c\u4f7f\u7528\u5927\u5199 \u53ef\u4ee5\u901a\u8fc7 #undef \u9650\u5236\u5b8f\u7684\u4f7f\u7528\u8303\u56f4 \u4e0d\u5f71\u54cd\u5b57\u7b26\u4e32\u7684\u4f7f\u7528 \u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 #define \u5b8f\u540d\uff08\u53c2\u6570\u8868\uff09 \u542b\u53c2\u6570\u7684\u5b57\u7b26\u4e32 #define s(a,b) a*b #define cube(x) ((x)*(x)*(x)) \u4e25\u683c\u6309\u7167\u683c\u5f0f\u4e66\u5199 \u529f\u80fd\u7c7b\u4f3c\u51fd\u6570 \u53c2\u6570\u6709\u53ef\u80fd\u7528\u4e0a\u8868\u8fbe\u5f0f\u65f6\u52a0\u4e0a\u62ec\u53f7\uff08\u786e\u4fdd \u6b63\u786e\u7684\u8fd0\u7b97\u987a\u5e8f \uff09 \u901a\u8fc7 \\ \u5b9e\u73b0\u9694\u884c\u9884\u5904\u7406 \u9884\u5148\u5b9a\u4e49\u7684\u5b8f __LINE__ \u6e90\u4ee3\u7801\u7684\u884c\u53f7 __FILE__ \u6e90\u4ee3\u7801\u7684\u6587\u4ef6\u540d __DATE__ \u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__ \u6587\u4ef6\u5305\u542b #include <\u88ab\u5305\u542b\u7684\u6587\u4ef6\u540d> //<>\u8868\u793a\u7f16\u8bd1\u7cfb\u7edf\u5b9a\u4e49\u8def\u5f84 #include \"\u88ab\u5305\u542b\u7684\u6587\u4ef6\u540d\" //\"\"\u8868\u793a\u7528\u6237\u6307\u660e\u8def\u5f84 \u4f5c\u7528\uff1a\u5c06\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9\u4e0e\u5f53\u524d\u6587\u4ef6\u4e00\u8d77\u7f16\u8bd1 \u8bf4\u660e \u4e00\u4e2a#include\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u6587\u4ef6 \u88ab\u5305\u542b\u7684\u6587\u4ef6\u53ef\u4ee5 \u5d4c\u5957\u6587\u4ef6 \u4e00\u822c\u6765\u8bf4\uff0c\u539f\u578b\u58f0\u660e\u53ca\u5b8f\u5b9a\u4e49\u653e\u5728\u5305\u542b\u6587\u4ef6\u4e2d \u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e00\u822c\u62d3\u5c55\u540d\u4e3a.h\uff0c\u79f0\u4e3a\u5934\u6587\u4ef6 \u6761\u4ef6\u7f16\u8bd1 \u901a\u8fc7\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f7f\u7a0b\u5e8f\u7f16\u8bd1\u4e0d\u540c\u7684\u7a0b\u5e8f\u6bb5 \u4e09\u79cd\u5f62\u5f0f //1 #ifdef \u6807\u8bc6\u7b26 program #else program #endif //2 #ifndef \u6807\u8bc6\u7b26 program #else program #endif //3 #if \u8868\u8fbe\u5f0f program #else program #endif \u5b9e\u4f8b #define DEBUG ..... ..... ..... #ifdef DEBUG \u7528\u4e8e\u8c03\u8bd5\u8bed\u53e5\u7684\u7a0b\u5e8f #endif","title":"\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_1","text":"","title":"\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_2","text":"//\u7d20\u6570 int isPrime(int i) { int ret = 1; int k; for ( k = 2 ; k < i - 1 ; k++){ if (i % k == 0){ ret = 0; break; } } return ret; } \u4ee3\u7801\u590d\u5236\u662f\u7a0b\u5e8f\u8d28\u91cf\u4e0d\u826f\u7684\u8868\u73b0 //\u6c42\u548c void sum(int begin, int end) { int i; int sum = 0; for ( i = begin ; i <= end ; i++){ sum += i; } printf(\"%d\u5230%d\u7684\u548c\u662f%d\\n\",begin, end, sum); } int main(){ sum(1,10); sum(20,30); sum(35,45); return 0; } \u51fd\u6570\u7684\u5b9a\u4e49\u548c\u8c03\u7528 \u5b9a\u4e49\uff1a\u51fd\u6570\u662f\u4e00\u5757\u4ee3\u7801\uff0c\u63a5\u53d7\u96f6\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0c\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u5e76\u8fd4\u56de \u96f6\u4e2a\u6216\u4e00\u4e2a\u503c \u8c03\u7528\u51fd\u6570\uff1a \u8bed\u53e5\u5f62\u5f0f\uff1a max(a,b) \u8868\u8fbe\u5f0f\u5f62\u5f0f\uff1a c = max(a,b)*2 \u51fd\u6570\u53c2\u6570\uff1a c = max(a,max(b,d)) \u51fd\u6570\u4e2d\u7684\u8fd4\u56de\u503c \u53ef\u4ee5\u8d4b\u503c\u7ed9\u53d8\u91cf \u53ef\u4ee5\u518d\u6b21\u4f20\u9012\u7ed9\u51fd\u6570 \u5982\u679c\u6ca1\u6709return\u8bed\u53e5\uff0c\u7531\u6700\u540e\u4e00\u4e2a\u201c}\u201d\u8fd4\u56de\u4e00\u4e2a\u4e0d\u786e\u5b9a\u7684\u503c \u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e0e\u51fd\u6570\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5982\u4e0d\u4e00\u81f4\uff0c\u4ee5\u51fd\u6570\u7c7b\u578b\u4e3a\u51c6 \u6ca1\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff08\u5982\u4e0b\u7684\u4ee3\u7801\uff09 void \u4e0d\u80fd\u4f7f\u7528\u5e26\u503c\u7684return \u53ef\u4ee5\u6ca1\u6709return \u8c03\u7528\u65f6\u4e0d\u80fd\u505a\u8fd4\u56de\u503c\u7684\u8d4b\u503c //\u6c42\u548c void/*\u8fd4\u56de\u7c7b\u578b*/ sum(int begin, int end)/*\u51fd\u6570\u540d*/ //\u51fd\u6570\u5934 { int i; int sum = 0; for ( i = begin ; i <= end ; i++){ sum += i; } printf(\"%d\u5230%d\u7684\u548c\u662f%d\\n\",begin, end, sum); } //\u51fd\u6570\u4f53 int main(){ sum(1,10); sum(20,30); sum(35,45); return 0; } \u200b","title":"\u4e00\u3001\u521d\u89c1\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_3","text":"\u51fd\u6570\u539f\u578b \u51fd\u6570\u7684\u5148\u540e\u5173\u7cfb C\u7684\u7f16\u8bd1\u5668 \u9010\u884c\u5206\u6790 \u4ee3\u7801 \u53ef\u4ee5\u5148 \u58f0\u660e \uff08\u4ee5;\u7ed3\u5c3e\uff09\u540e \u5b9a\u4e49 \uff08\u65e0;\uff09 \u53c2\u6570\u4f20\u9012 C\u8bed\u8a00\u5728\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u6c38\u8fdc\u53ea\u80fd\u4f20 \u503c \u7ed9\u51fd\u6570 \u6bcf\u4e2a\u51fd\u6570\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u7a7a\u95f4\uff0c \u4e0e\u5176\u4ed6\u51fd\u6570\u65e0\u5173 \u6bcf\u4e00\u6b21\u7684\u8fd0\u884c\u90fd\u65e0\u5173 \u5185\u8054\u51fd\u6570 c inline int iMax(int iVal1,int iVal2){ return iVal1>iVal2?iVal1:iVal2; } \u9002\u7528\u4e8e 1-5\u53e5 \u7684\u5c0f\u51fd\u6570\uff1b \u4e0d\u80fd\u4f7f\u7528\u5faa\u73af\u53caswitch \uff0c\u5426\u5219\u88ab\u8bd1\u4e3a\u4e00\u822c\u51fd\u6570 \u51fd\u6570\u7684\u91cd\u8f7d \u540c\u540d\u51fd\u6570\u901a\u8fc7\u4e0d\u540c\u53c2\u6570\u3001\u7c7b\u578b\u3001\u987a\u5e8f\u3001\u4e2a\u6570\uff0c\u5b9e\u73b0\u540c\u540d\u4e0d\u540c\u529f\u80fd\u51fd\u6570\u7684\u8c03\u7528 \u5982\u5404\u79cd\u591a\u8fb9\u5f62\u9762\u79ef\u7684\u8fd0\u7b97 \u672c\u5730\u53d8\u91cf\u7684\u89c4\u5219 \u672c\u5730\u53d8\u91cf\u662f\u5b9a\u4e49\u5728\u5757\u5185\u7684 \u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u51fd\u6570\u5757\u91cc \u53ef\u4ee5\u662f\u5b9a\u4e49\u5728\u8bed\u53e5\u5757\u91cc \u751a\u81f3\u662f\u4efb\u610f\u7684\u5927\u62ec\u53f7 \u5728\u5757\u5916\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u5b58\u5728 \u79bb\u5f00\u5757\u540e\uff0c\u8fd9\u4e2a\u53d8\u91cf\u4e0d\u5b58\u5728 \u5feb\u5916\u5b9a\u4e49\u7684\u53d8\u91cf\u5728\u5757\u5185\u6709\u6548 \u5757\u5185\u7684\u53d8\u91cf\u63a9\u76d6\u5757\u5916\u7684\u540c\u540d\u53d8\u91cf \u540c\u4e00\u4e2a\u5757\u4e2d\u4e0d\u80fd\u51fa\u73b0\u540c\u540d\u53d8\u91cf \u672c\u5730\u53d8\u91cf\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316 void \u53c2\u6570\u672a\u77e5\uff0c\u4f46\u4e0d\u662f\u6ca1\u6709 \u51fd\u6570\u5185\u6ca1\u6709\u53c2\u6570\u65f6\u53ef\u7528 \u9017\u53f7\u8fd0\u7b97\u7b26 \u8c03\u7528\u51fd\u6570\u65f6\u9996\u4e2a\u5706\u62ec\u53f7\u5185\u7684\u9017\u53f7\u662f\u6807\u70b9\u7b26\u53f7 \u82e5\u8981\u7528\u90fd\u597d\u8fd0\u7b97\u7b26\uff0c\u5219\u518d\u52a0\u4e00\u4e2a\u62ec\u53f7 main \u51fd\u6570","title":"\u4e8c\u3001\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_4","text":"\u5c40\u90e8\u53d8\u91cf \u5b9a\u4e49\u5728\u590d\u5408\u8bed\u53e5\u5f00\u59cb\u5904 \u5757\u5185\u751f\u5b58\uff0c\u5757\u5185\u6709\u6548 \u4e0e\u5168\u5c40\u53d8\u91cf\u51b2\u7a81\u65f6\uff0c\u5c40\u90e8\u53d8\u91cf\u4f18\u5148 \u5bc4\u5b58\u5668\u7c7b\u578b\uff08register\uff09 \u4f5c\u7528\u57df\u4e0e\u524d\u8005\u76f8\u540c\uff0c\u4f46\u82e5CPU\u5185\u90e8\u7684\u5bc4\u5b58\u5668\u7a7a\u95f2\uff0c\u5219\u4f7f\u7528\u5bc4\u5b58\u5668\u4f5c\u4e3a\u53d8\u91cf\u7684\u5b58\u50a8\u5355\u5143\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6 \u9759\u6001\u7c7b\u578b \u4f5c\u7528\u57df\uff1a\u5728\u8bf4\u660e\u7684\u590d\u5408\u8bed\u53e5\u5185\u5f15\u7528\uff0c\u51fa\u4e86\u590d\u5408\u8bed\u53e5\u4e0d\u53ef\u7528 \u751f\u5b58\u671f\uff1a\u4ece\u7a0b\u5e8f\u5f00\u59cb\u5230\u7a0b\u5e8f\u7ed3\u675f ```c #include #include using namespace std; void row(void); int main(void){ int b; for(b = 1;b <= 9;b++){ row(); } return 0; } void row(void){ static int a = 1; //static\u4f7fa\u5728\u51fd\u6570\u5185\u4e00\u76f4\u6709\u6548 int b; for(b = 1;b <= 9;b++){ cout << setw(4)<< a * b; } cout << endl; a++; } ``` \u5916\u90e8\u7c7b\u578b \u5b9a\u4e49\u5728\u4efb\u4f55\u6a21\u5757\u4e4b\u5916\u7684\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf \u4f5c\u7528\u57df\uff1a\u4ece\u8bf4\u660e\u53d8\u91cf\u5f00\u59cb\u5230\u7a0b\u5e8f\u7ed3\u675f \u751f\u5b58\u671f\uff1a\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u4f55\u51fd\u6570\u5bf9\u5916\u90e8\u53d8\u91cf\u7684\u4fee\u6539\u90fd\u4f1a\u5f71\u54cd\u5168\u5c40\u53d8\u91cf\u7684\u503c \u6ce8\uff1a\u4e0d\u80fd\u7528\u4f5c\u51fd\u6570\u53c2\u6570 \u53ef\u4ee5\u901a\u8fc7 extern \u6765\u6539\u53d8\u5176\u4f5c\u7528\u57df","title":"\u4e09\u3001\u53d8\u91cf\u7684\u56db\u79cd\u5b58\u50a8\u7c7b\u578b"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_5","text":"\u51fd\u6570\u89c1\u6570\u636e\u4f20\u9012\u65b9\u5f0f \u901a\u8fc7\u51fd\u6570\u53c2\u6570 \u4f20\u503c\u6216\u4f20\u5730\u5740 \u4f20\u503c\uff1a\u5f62\u53c2\u4e0e\u5b9e\u53c2 \u4f20\u5730\u5740\uff1a\u5f62\u53c2\u5b9a\u4e49\u4e3a\u6307\u9488\uff0c\u5b9e\u53c2\u4e3a\u53d8\u91cf\u7684\u5730\u5740 \u901a\u8fc7\u8fd4\u56de\u503c \u4f20\u9012\u7ed3\u679c \u51fd\u6570\u53c2\u6570\u4e3a\u5f15\u7528 \u901a\u8fc7 \u5168\u5c40\u53d8\u91cf \u4f20\u9012\u53c2\u6570\u6216\u7ed3\u679c","title":"\u56db\u3001\u51fd\u6570\u95f4\u7684\u6570\u636e\u4f20\u9012"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_6","text":"\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u5b9a\u4e49\u7684\u4e09\u79cd\u65b9\u5f0f \u5f62\u53c2\u4f5c\u4e3a\u6307\u9488\uff1a int ave(int *p); \u5f62\u53c2\u4e3a\u65e0\u4e0b\u8868\u6570\u7ec4\uff1a int ave(int p[]) ; \u5f62\u53c2\u4e3a\u6709\u4e0b\u6807\u6570\u7ec4\uff1a int ave(int p[10]);","title":"\u4e94\u3001\u6570\u7ec4\u4e0e\u51fd\u6570\u53c2\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_7","text":"\u6982\u5ff5\uff1a\u51fd\u6570\u7ed3\u675f\u65f6\u5019\u8fd4\u56de\u4e00\u4e2a\u5730\u5740 \u6ce8\u610f\uff1a\u5b9a\u4e49\u51fd\u6570\u65f6\u5019\u8981\u52a0\u4e0a\u201c * \u201d(\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e0e\u51fd\u6570\u7c7b\u578b\u4e00\u81f4)","title":"\u516d\u3001\u8fd4\u56de\u6307\u9488\u7684\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_8","text":"\u51fd\u6570\u5728\u5185\u5b58\u4e2d\u7684\u9996\u5730\u5740\u4e3a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740 \u4f7f\u7528\u8fc7\u7a0b \u5b9a\u4e49\u51fd\u6570\u548c\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\uff1a int (*p)(int, int); \u6307\u9488\u6307\u5411\u51fd\u6570\uff1a p = Max; //max\u662f\u51fd\u6570\u540d \u901a\u8fc7\u6307\u9488\u5f15\u7528\u51fd\u6570\uff1a maxval = (*p)(x,y); \u793a\u4f8b\uff1a ```c++ #include using namespace std; int Imax(int, int); int main(){ int a,b,c; int( funp)(int, int); funp = Imax; cin >> a >> b; c = ( funp)(a,b); cout << \"The max is :\" << c; return 0; } int Imax(int x, int y){ return (x>y?x:y); } ``` ```c++ #include using namespace std; int Add(int,int); int Sub(int,int); int funa(int, int, int(*)(int,int)); int main(){ int a,b,c; cin >> a >> b; c = funa(a, b, Add); cout << c; c = funa(a, b, Sub); cout << c; return 0; } int funa(int a, int b, int( fun)(int,int)){ return ( fun)(a,b); } int Add(int a,int b){ return (a + b); } int Sub(int a, int b){ return (a - b); } ```","title":"\u4e03\u3001\u6307\u5411\u51fd\u6570\u7684\u6307\u9488"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_9","text":"\u6982\u5ff5\uff1a\u51fd\u6570\u76f4\u63a5\u6216\u95f4\u63a5\u5730\u81ea\u6211\u8c03\u7528\u79f0\u4e3a\u9012\u5f52\u51fd\u6570 \u901a\u8fc7\u63a7\u5236\u6761\u4ef6\uff0c\u4f7f\u9012\u5f52\u7ec8\u6b62 #include <iostream> using namespace std; long ifac(long); int main(void){ long i, x; cin >> i; x = ifac(i); cout << x << endl; return 0; } long ifac(long n){ if(n == 0 || n == 1){ return 1; } else{ return n * ifac(n - 1); } }","title":"\u516b\u3001\u9012\u5f52\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_10","text":"","title":"\u4e5d\u3001\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_11","text":"","title":"\u5341\u3001\u7f16\u8bd1\u9884\u5904\u7406"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_12","text":"# \u5173\u952e\u8bcd \u53c2\u6570\u8868 \u7981\u6b62' ; ' \u5b8f\u5b9a\u4e49\u9884\u5904\u7406 \u4e0d\u5c5e\u4e8eC\u8bed\u8a00 \u4e0d\u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 \u63d0\u9ad8\u7a0b\u5e8f\u53ef\u8bfb\u6027\uff0c\u4fbf\u4e8e\u4fee\u6539 #define PI 3.1415926 \u5b8f\u540d\u4e00\u822c\u4f7f\u7528\u5927\u5199 \u53ef\u4ee5\u901a\u8fc7 #undef \u9650\u5236\u5b8f\u7684\u4f7f\u7528\u8303\u56f4 \u4e0d\u5f71\u54cd\u5b57\u7b26\u4e32\u7684\u4f7f\u7528 \u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 #define \u5b8f\u540d\uff08\u53c2\u6570\u8868\uff09 \u542b\u53c2\u6570\u7684\u5b57\u7b26\u4e32 #define s(a,b) a*b #define cube(x) ((x)*(x)*(x)) \u4e25\u683c\u6309\u7167\u683c\u5f0f\u4e66\u5199 \u529f\u80fd\u7c7b\u4f3c\u51fd\u6570 \u53c2\u6570\u6709\u53ef\u80fd\u7528\u4e0a\u8868\u8fbe\u5f0f\u65f6\u52a0\u4e0a\u62ec\u53f7\uff08\u786e\u4fdd \u6b63\u786e\u7684\u8fd0\u7b97\u987a\u5e8f \uff09 \u901a\u8fc7 \\ \u5b9e\u73b0\u9694\u884c\u9884\u5904\u7406 \u9884\u5148\u5b9a\u4e49\u7684\u5b8f __LINE__ \u6e90\u4ee3\u7801\u7684\u884c\u53f7 __FILE__ \u6e90\u4ee3\u7801\u7684\u6587\u4ef6\u540d __DATE__ \u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__","title":"\u5b8f"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_13","text":"#include <\u88ab\u5305\u542b\u7684\u6587\u4ef6\u540d> //<>\u8868\u793a\u7f16\u8bd1\u7cfb\u7edf\u5b9a\u4e49\u8def\u5f84 #include \"\u88ab\u5305\u542b\u7684\u6587\u4ef6\u540d\" //\"\"\u8868\u793a\u7528\u6237\u6307\u660e\u8def\u5f84 \u4f5c\u7528\uff1a\u5c06\u6307\u5b9a\u6587\u4ef6\u7684\u5185\u5bb9\u4e0e\u5f53\u524d\u6587\u4ef6\u4e00\u8d77\u7f16\u8bd1 \u8bf4\u660e \u4e00\u4e2a#include\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u6587\u4ef6 \u88ab\u5305\u542b\u7684\u6587\u4ef6\u53ef\u4ee5 \u5d4c\u5957\u6587\u4ef6 \u4e00\u822c\u6765\u8bf4\uff0c\u539f\u578b\u58f0\u660e\u53ca\u5b8f\u5b9a\u4e49\u653e\u5728\u5305\u542b\u6587\u4ef6\u4e2d \u88ab\u5305\u542b\u7684\u6587\u4ef6\u4e00\u822c\u62d3\u5c55\u540d\u4e3a.h\uff0c\u79f0\u4e3a\u5934\u6587\u4ef6","title":"\u6587\u4ef6\u5305\u542b"},{"location":"C%20or%20C%2B%2B/%E5%87%BD%E6%95%B0/#_14","text":"\u901a\u8fc7\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f7f\u7a0b\u5e8f\u7f16\u8bd1\u4e0d\u540c\u7684\u7a0b\u5e8f\u6bb5 \u4e09\u79cd\u5f62\u5f0f //1 #ifdef \u6807\u8bc6\u7b26 program #else program #endif //2 #ifndef \u6807\u8bc6\u7b26 program #else program #endif //3 #if \u8868\u8fbe\u5f0f program #else program #endif \u5b9e\u4f8b #define DEBUG ..... ..... ..... #ifdef DEBUG \u7528\u4e8e\u8c03\u8bd5\u8bed\u53e5\u7684\u7a0b\u5e8f #endif","title":"\u6761\u4ef6\u7f16\u8bd1"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/","text":"\u5b57\u7b26\u6570\u7ec4 \u4e00\u3001\u5b57\u7b26\u6570\u7ec4\u7684\u8bf4\u660e \u7c7b\u4f3c\u6570\u7ec4 char str[number]; char str[number][number]; \u521d\u59cb\u5316 char str[number] = {\"hello\"}; char str[number] = {'h','e','l','l','o'}; char str[number][number] = {\"hello\",\"world\"}; \u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u540e\u4f1a\u9ed8\u8ba4\u52a0\u4e00\u4e2a'\\0',\u56e0\u6b64\u8981\u4e3a\u6b64\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e \u4e8c\u3001\u5b57\u7b26\u6570\u7ec4\u7684\u8f93\u5165\u8f93\u51fa cin\u5bf9\u8c61\u8f93\u5165\u65b9\u6cd5 \u4f7f\u7528cin\u65f6\uff0c\u9047\u89c1\u7a7a\u683c\u81ea\u7136\u7ed3\u675f c char a[20]; cin >> a; \u8f93\u5165pingtan fujian \u8f93\u51fa\u7ed3\u679c pingtan \\0 cin.getline\u9047\u89c1\u56de\u8f66\u5f62\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 c char a[20]; cin.getline(a,20); \u8f93\u5165pingtan fujian \u8f93\u51fa\u7ed3\u679c pingtan fujian \\0 \u4e09\u3001\u5e38\u89c1\u7684\u5b57\u7b26\u6570\u7ec4\u5904\u7406\u51fd\u6570 \u62f7\u8d1d strcpy(str1,str2) \u4f5c\u7528\uff1a\u5c06\u540e\u8005\u8986\u76d6\u524d\u8005 c char str1[10],str2[]={\"computer\"}; strcpy(str1,str2); //str1\u7684\u5185\u5bb9\u53d8\u4e3a\"computer\" strcpy(str2,\"program\"); //str2\u7684\u5185\u5bb9\u53d8\u4e3a\"program\" \u6ce8\u610f\uff1a \u88ab\u7c98\u8d34\u7684\u5b57\u7b26\u957f\u5ea6\u8981\u8db3\u591f\u957f \u524d\u8005\u53ea\u80fd\u662f\u5b57\u7b26\u578b\u6570\u7ec4\uff0c\u540e\u8005\u53ef\u4ee5\u662f\u5b57\u7b26\u578b\u6570\u7ec4\u6216\u5b57\u7b26\u4e32 \u8fde\u63a5 strcat(str1,str2) \u4f5c\u7528\uff1a\u8fde\u63a5 c char str1[10]={\"pingtan\"},str2[10]={\"fujian\"}; strcat(str1,str2); //\u8fde\u63a5\u540e\u7684\u5185\u5bb9\u8d4b\u7ed9\u524d\u8005 puts(str1); \u6ce8\u610f str1\u8981\u8db3\u591f\u957f \u524d\u8005\u53ea\u80fd\u662f\u5b57\u7b26\u578b\u6570\u7ec4\uff0c\u540e\u8005\u53ef\u4ee5\u662f\u5b57\u7b26\u578b\u6570\u7ec4\u6216\u5b57\u7b26\u4e32 \u6d4b\u8bd5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 strlen(str1) \u4f5c\u7528\uff1a\u5b57\u7b26\u4e32\u957f\u5ea6 c int lenth; char str1[]={\"China\"}; lenth = strlen(str1); cout << lenth; \u6ce8\u610f\uff1a\u8f93\u51fa\u7684\u957f\u5ea6\u91cc\u4e0d\u5305\u62ec\\0 \u5b57\u7b26\u4e32\u7684\u6bd4\u8f83 strcmp(str1,str2) \u4f5c\u7528\uff1a\u9010\u4f4d\u6bd4\u8f83\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7801 \u6bd4\u8f83\u7ed3\u679c strcmp\u7684\u503c str1<str2 <0 str1==str2 ==0 srt1>str2 >= \u67e5\u627e strchr(str1,ch)/strstr(str1,str2) strchr(str1,ch) \u4f5c\u7528\u8fd4\u56de\u4e00\u4e2a \u6307\u9488 \uff0c\u6307\u5411str1\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u5b57\u7b26ch\u7684\u4f4d\u7f6e strstr(str1,str2) \u4f5c\u7528\u8fd4\u56de\u4e00\u4e2a \u6307\u9488 \uff0c\u6307\u5411str1\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u5b57\u7b26\u4e32str2\u7684\u4f4d\u7f6e \u56db\u3001string\u7c7b \u5305\u542b\u4e86\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\uff08\u4e14\u66f4\u52a0\u65b9\u4fbf\u3001\u6613\u4e8e\u7406\u89e3\uff09\uff0c\u5e76\u589e\u52a0\u4e86\u66f4\u591a #include <iostream> #include <string> using namespace std; int main () { string str1 = \"runoob\"; //\u5b9a\u4e49\u5bf9\u8c61\uff0c\u8d4b\u503c string str2 = \"google\"; string str3(10,'a'); //'a'\u5b57\u7b26\u91cd\u590d\u5341\u6b21 string str3; int len ; // \u590d\u5236 str1 \u5230 str3 str3 = str1; cout << \"str3 : \" << str3 << endl; // \u8fde\u63a5 str1 \u548c str2 str3 = str1 + str2; cout << \"str1 + str2 : \" << str3 << endl; // \u8fde\u63a5\u540e\uff0cstr3 \u7684\u603b\u957f\u5ea6 len = str3.size(); cout << \"str3.size() : \" << len << endl; //\u5b57\u7b26\u4ea4\u6362 str1.swap(str2); cout << s1 << s2; //\u5b57\u7b26\u4e32\u7684\u4fee\u6539 s1.erase(index,len); //\u4eceindex\u5f00\u59cb\u64e6\u9664len\u957f s1.insert(index,s2); //\u5728index\u63d2\u5165s2 s1,replace(index,len,s2); //\u4eceindex\u5f00\u59cb\u957f\u5ea6len\u66ff\u6362\u4e3as2 //\u5b57\u7b26\u63d0\u53d6\u5b50\u4e32 s2 = s1.substr(6,5); //\u5b57\u7b26\u4e32\u5206\u89e3 char *token = strtok(str1,' '); return 0; }","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/#_1","text":"","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/#_2","text":"\u7c7b\u4f3c\u6570\u7ec4 char str[number]; char str[number][number]; \u521d\u59cb\u5316 char str[number] = {\"hello\"}; char str[number] = {'h','e','l','l','o'}; char str[number][number] = {\"hello\",\"world\"}; \u6ce8\u610f\uff1a\u5b57\u7b26\u4e32\u540e\u4f1a\u9ed8\u8ba4\u52a0\u4e00\u4e2a'\\0',\u56e0\u6b64\u8981\u4e3a\u6b64\u9884\u7559\u4e00\u4e2a\u4f4d\u7f6e","title":"\u4e00\u3001\u5b57\u7b26\u6570\u7ec4\u7684\u8bf4\u660e"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/#_3","text":"cin\u5bf9\u8c61\u8f93\u5165\u65b9\u6cd5 \u4f7f\u7528cin\u65f6\uff0c\u9047\u89c1\u7a7a\u683c\u81ea\u7136\u7ed3\u675f c char a[20]; cin >> a; \u8f93\u5165pingtan fujian \u8f93\u51fa\u7ed3\u679c pingtan \\0 cin.getline\u9047\u89c1\u56de\u8f66\u5f62\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 c char a[20]; cin.getline(a,20); \u8f93\u5165pingtan fujian \u8f93\u51fa\u7ed3\u679c pingtan fujian \\0","title":"\u4e8c\u3001\u5b57\u7b26\u6570\u7ec4\u7684\u8f93\u5165\u8f93\u51fa"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/#_4","text":"\u62f7\u8d1d strcpy(str1,str2) \u4f5c\u7528\uff1a\u5c06\u540e\u8005\u8986\u76d6\u524d\u8005 c char str1[10],str2[]={\"computer\"}; strcpy(str1,str2); //str1\u7684\u5185\u5bb9\u53d8\u4e3a\"computer\" strcpy(str2,\"program\"); //str2\u7684\u5185\u5bb9\u53d8\u4e3a\"program\" \u6ce8\u610f\uff1a \u88ab\u7c98\u8d34\u7684\u5b57\u7b26\u957f\u5ea6\u8981\u8db3\u591f\u957f \u524d\u8005\u53ea\u80fd\u662f\u5b57\u7b26\u578b\u6570\u7ec4\uff0c\u540e\u8005\u53ef\u4ee5\u662f\u5b57\u7b26\u578b\u6570\u7ec4\u6216\u5b57\u7b26\u4e32 \u8fde\u63a5 strcat(str1,str2) \u4f5c\u7528\uff1a\u8fde\u63a5 c char str1[10]={\"pingtan\"},str2[10]={\"fujian\"}; strcat(str1,str2); //\u8fde\u63a5\u540e\u7684\u5185\u5bb9\u8d4b\u7ed9\u524d\u8005 puts(str1); \u6ce8\u610f str1\u8981\u8db3\u591f\u957f \u524d\u8005\u53ea\u80fd\u662f\u5b57\u7b26\u578b\u6570\u7ec4\uff0c\u540e\u8005\u53ef\u4ee5\u662f\u5b57\u7b26\u578b\u6570\u7ec4\u6216\u5b57\u7b26\u4e32 \u6d4b\u8bd5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 strlen(str1) \u4f5c\u7528\uff1a\u5b57\u7b26\u4e32\u957f\u5ea6 c int lenth; char str1[]={\"China\"}; lenth = strlen(str1); cout << lenth; \u6ce8\u610f\uff1a\u8f93\u51fa\u7684\u957f\u5ea6\u91cc\u4e0d\u5305\u62ec\\0 \u5b57\u7b26\u4e32\u7684\u6bd4\u8f83 strcmp(str1,str2) \u4f5c\u7528\uff1a\u9010\u4f4d\u6bd4\u8f83\u6bcf\u4e2a\u5b57\u7b26\u7684ASCII\u7801 \u6bd4\u8f83\u7ed3\u679c strcmp\u7684\u503c str1<str2 <0 str1==str2 ==0 srt1>str2 >= \u67e5\u627e strchr(str1,ch)/strstr(str1,str2) strchr(str1,ch) \u4f5c\u7528\u8fd4\u56de\u4e00\u4e2a \u6307\u9488 \uff0c\u6307\u5411str1\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u5b57\u7b26ch\u7684\u4f4d\u7f6e strstr(str1,str2) \u4f5c\u7528\u8fd4\u56de\u4e00\u4e2a \u6307\u9488 \uff0c\u6307\u5411str1\u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u5b57\u7b26\u4e32str2\u7684\u4f4d\u7f6e","title":"\u4e09\u3001\u5e38\u89c1\u7684\u5b57\u7b26\u6570\u7ec4\u5904\u7406\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/#string","text":"\u5305\u542b\u4e86\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\uff08\u4e14\u66f4\u52a0\u65b9\u4fbf\u3001\u6613\u4e8e\u7406\u89e3\uff09\uff0c\u5e76\u589e\u52a0\u4e86\u66f4\u591a #include <iostream> #include <string> using namespace std; int main () { string str1 = \"runoob\"; //\u5b9a\u4e49\u5bf9\u8c61\uff0c\u8d4b\u503c string str2 = \"google\"; string str3(10,'a'); //'a'\u5b57\u7b26\u91cd\u590d\u5341\u6b21 string str3; int len ; // \u590d\u5236 str1 \u5230 str3 str3 = str1; cout << \"str3 : \" << str3 << endl; // \u8fde\u63a5 str1 \u548c str2 str3 = str1 + str2; cout << \"str1 + str2 : \" << str3 << endl; // \u8fde\u63a5\u540e\uff0cstr3 \u7684\u603b\u957f\u5ea6 len = str3.size(); cout << \"str3.size() : \" << len << endl; //\u5b57\u7b26\u4ea4\u6362 str1.swap(str2); cout << s1 << s2; //\u5b57\u7b26\u4e32\u7684\u4fee\u6539 s1.erase(index,len); //\u4eceindex\u5f00\u59cb\u64e6\u9664len\u957f s1.insert(index,s2); //\u5728index\u63d2\u5165s2 s1,replace(index,len,s2); //\u4eceindex\u5f00\u59cb\u957f\u5ea6len\u66ff\u6362\u4e3as2 //\u5b57\u7b26\u63d0\u53d6\u5b50\u4e32 s2 = s1.substr(6,5); //\u5b57\u7b26\u4e32\u5206\u89e3 char *token = strtok(str1,' '); return 0; }","title":"\u56db\u3001string\u7c7b"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/","text":"\u5ba3\u8001\u7b2c\u4e09\u7ae0\u7a0b\u5e8f \u7231\u56e0\u65af\u5766\u9636\u68af #include <iostream> using namespace std; int main(void) { int k = 7; while( !((k % 3 == 2) && (k % 5 == 4) && (k % 6 == 5))) { k+=14; } cout << \"k = \" << k << endl; return 0; } \u7d20\u6570 #include <iostream> #include <cmath> using namespace std; int main(void) { int n, j, s; for(n = 101; n < 200; n += 2) { s = (int) sqrt((double)n); for(j = 2; j <= s; ++j) { if(n % j == 0) { break; } } if(j > s) { cout << n << endl; } } return 0; } \u500d\u7ea7\u6570 #include <iostream> using namespace std; int main(void) { float s, t; int i, a, n; do{ cin >> a >> n; if (a < 1 || a > 9) { cout << \"Data Input Error !\\nInput again.\"; } }while( a < 1 || a > 9); s = 0.0f; t = a; for(i = 1; i <= n; i++) { s += t; t = t * 10 + a; } cout << \"s = \" << s << endl; return 0; } \u4e8c\u5206\u6cd5\u6c42\u6839 #include <iostream> #include <cmath> using namespace std; int main(void) { float x1, x2, x, f1, f2, f; cin >> x1 >> x2; f1 = x1 * x1 * x1 - 6.0f * x1 - 1.f; //\u89e3\u6790\u5f0f f2 = x2 * x2 * x2 - 6.0f * x2 - 1.f; cout << x1 << \" \" << x2 << \" \" << f1 << \" \" << f2 << endl; do { x = (x1 + x2) / 2.f; //\u4e2d\u70b9 f = x * x * x - 6.0f * x - 1.f; if(f * f1 >= 0.f) { f1 = f; x1 = x; } else { f2 = f; x2 = x; } }while(fabs(x1 - x2) >= 1e-6f); cout << \"Root is :\" << (x1 + x2) / 2.f << endl; return 0; } \u6c34\u4ed9\u82b1\u6570 #include <iostream> using namespace std; int main(void) { int n, a, b, c; for(n = 100 ; n <= 999 ; n++) { a = n / 100; b = n % 100 / 10; c = n % 10; if(a * a * a + b * b * b + c * c * c == n) { cout << n << \"\u951b\u6c2d\u69f8\u59d8\u7fe0\u7cb0\u947a\u8fa8\u669f\u9286? << endl; } } return 0; } \u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6c42\u6839 #include <iostream> #include <iomanip> #include <cmath> #include <cstdlib> using namespace std; int main(void){ float a,b,c,d; cout << \"\u7487\u8702\u4e92\u7ecc\u70d8\u7278\u9352\u55db\u6ba7\u93b8\u5910\u300e\u6434\u5fda\u7ded\u934f\u30e4\u7af4\u934f\u51a7\u7c29\u5a06\u2103\u67df\u7ecb\u5b2c\u6b91\u7eef\u7ed8\u669f\u951b?; cin >> a >> b >> c; d = b * b - 4.0f * a * c; if((float)fabs(d) < 1.0e-6f) { cout << \"x1 = x2 = \" << -b/(2.0f*a) << endl; } else { if(d > 0) { cout << fixed << setprecision(4); cout << \" x1=\" << (-b + (float)sqrt(d) ) / (2.0f * a) << endl; cout << \" x2=\" << (-b - (float)sqrt(d) ) / (2.0f * a) << endl; } else { cout << fixed << setprecision(4); cout << \"x1=\" << -b/(2.0f*a) << \" + i\" << (float)sqrt(-d)/(2.0f*a) << endl; cout << \"x1=\" << -b/(2.0f*a) << \" - i\" << (float)sqrt(-d)/(2.0f*a) << endl; } } system(\"pause\"); return 0; } \u6c42pi /******************************************************************** created: 2021/09/22 created: 22:3:2019 9:46 filename: PI.CPP file path: D:\\CAIWorkSpace\\2018~2019\u7b2c\u4e8c\u5b66\u671f\u6559\u5b66\u6587\u6863\\CCAI14FIN file base: PI file ext: CPP author: Xuan purpose: \u672c\u7a0b\u5e8f\u7528\u4e8e\u8f93\u5165\u7cbe\u5ea6\u5e76\u8ba1\u7b97\u5706\u5468\u7387\u7edf\u8ba1\u8ba1\u7b97\u65f6\u95f4\u6b21\u6570\u3002 *********************************************************************/ #include <iostream> #include <iomanip> #include <ctime> #include <cstdlib> using namespace std; int main(void) { clock_t start, end; double dItem, dPi, dPrecision, dSign; long long llCount = 0ll; cout << \"Input precision: \"; cin >> dPrecision; dItem = 1.0; dPi = 0.0; dSign = 1.0; start = clock(); do{ dPi += 1.0 / dItem * dSign; dItem += 2.; dSign = -dSign; llCount++; }while(1. / dItem > dPrecision / 4.); end = clock(); cout << fixed << setprecision(16); cout << \"PI = \" << setw(20) << 4.0 * dPi << endl; cout << \"Number = \" << llCount << endl; cout << \"Time consuming = \" << setprecision(3) <<((float)(end - start) / CLK_TCK) << 's' << endl; system(\"pause\"); return 0; } \u79ef\u5206 #include <iostream> using namespace std; int main(void){ float a, b, f0, f1, h, x, s = 0.0f; int n, i; cin >> a >> b >> n; h = (b - a) / n; x = a; f0 = x * x + 12.0f * x + 4.0f; for(i = 0; i < n; i++) { x = x + h; f1 = x * x + 12.0f * x + 4.0f; s += (f0 + f1) * h / 2.0f; f0 = f1; } cout << \"s = \" << s << endl; return 0; }","title":"\u5ba3\u8001\u7b2c\u4e09\u7ae0\u7a0b\u5e8f"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_1","text":"","title":"\u5ba3\u8001\u7b2c\u4e09\u7ae0\u7a0b\u5e8f"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_2","text":"#include <iostream> using namespace std; int main(void) { int k = 7; while( !((k % 3 == 2) && (k % 5 == 4) && (k % 6 == 5))) { k+=14; } cout << \"k = \" << k << endl; return 0; }","title":"\u7231\u56e0\u65af\u5766\u9636\u68af"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_3","text":"#include <iostream> #include <cmath> using namespace std; int main(void) { int n, j, s; for(n = 101; n < 200; n += 2) { s = (int) sqrt((double)n); for(j = 2; j <= s; ++j) { if(n % j == 0) { break; } } if(j > s) { cout << n << endl; } } return 0; }","title":"\u7d20\u6570"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_4","text":"#include <iostream> using namespace std; int main(void) { float s, t; int i, a, n; do{ cin >> a >> n; if (a < 1 || a > 9) { cout << \"Data Input Error !\\nInput again.\"; } }while( a < 1 || a > 9); s = 0.0f; t = a; for(i = 1; i <= n; i++) { s += t; t = t * 10 + a; } cout << \"s = \" << s << endl; return 0; }","title":"\u500d\u7ea7\u6570"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_5","text":"#include <iostream> #include <cmath> using namespace std; int main(void) { float x1, x2, x, f1, f2, f; cin >> x1 >> x2; f1 = x1 * x1 * x1 - 6.0f * x1 - 1.f; //\u89e3\u6790\u5f0f f2 = x2 * x2 * x2 - 6.0f * x2 - 1.f; cout << x1 << \" \" << x2 << \" \" << f1 << \" \" << f2 << endl; do { x = (x1 + x2) / 2.f; //\u4e2d\u70b9 f = x * x * x - 6.0f * x - 1.f; if(f * f1 >= 0.f) { f1 = f; x1 = x; } else { f2 = f; x2 = x; } }while(fabs(x1 - x2) >= 1e-6f); cout << \"Root is :\" << (x1 + x2) / 2.f << endl; return 0; }","title":"\u4e8c\u5206\u6cd5\u6c42\u6839"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_6","text":"#include <iostream> using namespace std; int main(void) { int n, a, b, c; for(n = 100 ; n <= 999 ; n++) { a = n / 100; b = n % 100 / 10; c = n % 10; if(a * a * a + b * b * b + c * c * c == n) { cout << n << \"\u951b\u6c2d\u69f8\u59d8\u7fe0\u7cb0\u947a\u8fa8\u669f\u9286? << endl; } } return 0; }","title":"\u6c34\u4ed9\u82b1\u6570"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_7","text":"#include <iostream> #include <iomanip> #include <cmath> #include <cstdlib> using namespace std; int main(void){ float a,b,c,d; cout << \"\u7487\u8702\u4e92\u7ecc\u70d8\u7278\u9352\u55db\u6ba7\u93b8\u5910\u300e\u6434\u5fda\u7ded\u934f\u30e4\u7af4\u934f\u51a7\u7c29\u5a06\u2103\u67df\u7ecb\u5b2c\u6b91\u7eef\u7ed8\u669f\u951b?; cin >> a >> b >> c; d = b * b - 4.0f * a * c; if((float)fabs(d) < 1.0e-6f) { cout << \"x1 = x2 = \" << -b/(2.0f*a) << endl; } else { if(d > 0) { cout << fixed << setprecision(4); cout << \" x1=\" << (-b + (float)sqrt(d) ) / (2.0f * a) << endl; cout << \" x2=\" << (-b - (float)sqrt(d) ) / (2.0f * a) << endl; } else { cout << fixed << setprecision(4); cout << \"x1=\" << -b/(2.0f*a) << \" + i\" << (float)sqrt(-d)/(2.0f*a) << endl; cout << \"x1=\" << -b/(2.0f*a) << \" - i\" << (float)sqrt(-d)/(2.0f*a) << endl; } } system(\"pause\"); return 0; }","title":"\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u6c42\u6839"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#pi","text":"/******************************************************************** created: 2021/09/22 created: 22:3:2019 9:46 filename: PI.CPP file path: D:\\CAIWorkSpace\\2018~2019\u7b2c\u4e8c\u5b66\u671f\u6559\u5b66\u6587\u6863\\CCAI14FIN file base: PI file ext: CPP author: Xuan purpose: \u672c\u7a0b\u5e8f\u7528\u4e8e\u8f93\u5165\u7cbe\u5ea6\u5e76\u8ba1\u7b97\u5706\u5468\u7387\u7edf\u8ba1\u8ba1\u7b97\u65f6\u95f4\u6b21\u6570\u3002 *********************************************************************/ #include <iostream> #include <iomanip> #include <ctime> #include <cstdlib> using namespace std; int main(void) { clock_t start, end; double dItem, dPi, dPrecision, dSign; long long llCount = 0ll; cout << \"Input precision: \"; cin >> dPrecision; dItem = 1.0; dPi = 0.0; dSign = 1.0; start = clock(); do{ dPi += 1.0 / dItem * dSign; dItem += 2.; dSign = -dSign; llCount++; }while(1. / dItem > dPrecision / 4.); end = clock(); cout << fixed << setprecision(16); cout << \"PI = \" << setw(20) << 4.0 * dPi << endl; cout << \"Number = \" << llCount << endl; cout << \"Time consuming = \" << setprecision(3) <<((float)(end - start) / CLK_TCK) << 's' << endl; system(\"pause\"); return 0; }","title":"\u6c42pi"},{"location":"C%20or%20C%2B%2B/%E5%AE%A3%E8%80%81%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%A8%8B%E5%BA%8F/#_8","text":"#include <iostream> using namespace std; int main(void){ float a, b, f0, f1, h, x, s = 0.0f; int n, i; cin >> a >> b >> n; h = (b - a) / n; x = a; f0 = x * x + 12.0f * x + 4.0f; for(i = 0; i < n; i++) { x = x + h; f1 = x * x + 12.0f * x + 4.0f; s += (f0 + f1) * h / 2.0f; f0 = f1; } cout << \"s = \" << s << endl; return 0; }","title":"\u79ef\u5206"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF/","text":"\u7b2c\u4e09\u5468\uff1a\u5faa\u73af while \u5faa\u73af //\u4f4d\u6570\u5224\u65ad #include <stdio.h> int main(void) { int x, n = 0; scanf(\"%d\",&x); n++; x /= 10; while (x != 0){ n++; x /= 10; } printf(\"%d\",n); return 0; } \u6761\u4ef6\u6210\u7acb\u662f\u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6 while \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u8fdb\u884c\u5faa\u73af\u4f53\u5185\u7684\u8bed\u53e5 \u5faa\u73af\u4f53\u5185\u8981\u6709\u6539\u53d8\u6761\u4ef6\u7684\u8bed\u53e5\uff0c\u5426\u5219\u53d8\u4e3a\u6b7b\u5faa\u73af \u5c1d\u8bd5\u5728\u7eb8\u4e0a\u6a21\u62df\u8fd0\u7b97 do-while \u5faa\u73af do { <\u5faa\u73af\u4f53\u8bed\u53e5> }while(<\u5faa\u73af\u6761\u4ef6>)\uff1b \u5148\u7ecf\u8fc7\u5faa\u73af\u4f53\uff0c\u5728\u8fdb\u884c\u5224\u65ad \u533a\u522b\u4ec5\u4e0a\uff0c\u5176\u4ed6\u4e00\u81f4 //\u4f4d\u6570\u5224\u65ad #include <stdio.h> int main (void) { int x; scanf(\"%d\", &x); int n = 0; do { x /= 10; n++; } while ( x > 0); //\u6ce8\u610f\u8fd9\u91cc\u6709\u5206\u53f7 printf(\"%d\",n); return 0; } for\u5faa\u73af //while\u7248\u9636\u4e58 #include <stdio.h> int main(void) { int n, r = 1, i=1; printf(\"\u8bf7\u8f93\u5165n:\"); scanf(\"%d\", &n); while (i <= n) { r *= i; i++; } printf(\"%d\u7684\u9636\u4e58\u4e3a\uff1a%d\", n, r); return 0; } //for\u7248\u672c\u9636\u4e58 #include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); int fact = 1; int i = 1; for( i = 1; i <= n; i++ ){ fact *= i; } /* for (i = n; i >1 ;i--){ fact *= i; } */ printf(\"%d!=%d\\n\", n, fact); return 0; } for( \u521d\u59cb\u6761\u4ef6(\u5df2\u6709\u53ef\u7701) ; \u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6 ; \u5faa\u73af\u6bcf\u4e00\u8f6e\u8981\u505a\u7684\u52a8\u4f5c ) \u5faa\u73af\u7684\u9009\u62e9 for\u5faa\u73af=while \u5faa\u73af Tips: \u5982\u679c\u6709\u56fa\u5b9a\u6b21\u6570\uff0c\u7528for \u5982\u679c\u5fc5\u987b\u6267\u884c\u4e00\u6b21\uff0c\u7528do_while \u5176\u4ed6\u60c5\u51b5\u7528while","title":"\u7b2c\u4e09\u5468\uff1a\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF/#_1","text":"while \u5faa\u73af //\u4f4d\u6570\u5224\u65ad #include <stdio.h> int main(void) { int x, n = 0; scanf(\"%d\",&x); n++; x /= 10; while (x != 0){ n++; x /= 10; } printf(\"%d\",n); return 0; } \u6761\u4ef6\u6210\u7acb\u662f\u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6 while \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u8fdb\u884c\u5faa\u73af\u4f53\u5185\u7684\u8bed\u53e5 \u5faa\u73af\u4f53\u5185\u8981\u6709\u6539\u53d8\u6761\u4ef6\u7684\u8bed\u53e5\uff0c\u5426\u5219\u53d8\u4e3a\u6b7b\u5faa\u73af \u5c1d\u8bd5\u5728\u7eb8\u4e0a\u6a21\u62df\u8fd0\u7b97 do-while \u5faa\u73af do { <\u5faa\u73af\u4f53\u8bed\u53e5> }while(<\u5faa\u73af\u6761\u4ef6>)\uff1b \u5148\u7ecf\u8fc7\u5faa\u73af\u4f53\uff0c\u5728\u8fdb\u884c\u5224\u65ad \u533a\u522b\u4ec5\u4e0a\uff0c\u5176\u4ed6\u4e00\u81f4 //\u4f4d\u6570\u5224\u65ad #include <stdio.h> int main (void) { int x; scanf(\"%d\", &x); int n = 0; do { x /= 10; n++; } while ( x > 0); //\u6ce8\u610f\u8fd9\u91cc\u6709\u5206\u53f7 printf(\"%d\",n); return 0; } for\u5faa\u73af //while\u7248\u9636\u4e58 #include <stdio.h> int main(void) { int n, r = 1, i=1; printf(\"\u8bf7\u8f93\u5165n:\"); scanf(\"%d\", &n); while (i <= n) { r *= i; i++; } printf(\"%d\u7684\u9636\u4e58\u4e3a\uff1a%d\", n, r); return 0; } //for\u7248\u672c\u9636\u4e58 #include <stdio.h> int main(void) { int n; scanf(\"%d\", &n); int fact = 1; int i = 1; for( i = 1; i <= n; i++ ){ fact *= i; } /* for (i = n; i >1 ;i--){ fact *= i; } */ printf(\"%d!=%d\\n\", n, fact); return 0; } for( \u521d\u59cb\u6761\u4ef6(\u5df2\u6709\u53ef\u7701) ; \u5faa\u73af\u7ee7\u7eed\u7684\u6761\u4ef6 ; \u5faa\u73af\u6bcf\u4e00\u8f6e\u8981\u505a\u7684\u52a8\u4f5c ) \u5faa\u73af\u7684\u9009\u62e9 for\u5faa\u73af=while \u5faa\u73af Tips: \u5982\u679c\u6709\u56fa\u5b9a\u6b21\u6570\uff0c\u7528for \u5982\u679c\u5fc5\u987b\u6267\u884c\u4e00\u6b21\uff0c\u7528do_while \u5176\u4ed6\u60c5\u51b5\u7528while","title":"\u7b2c\u4e09\u5468\uff1a\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/","text":"\u7b2c\u4e94\u5468 \u5faa\u73af\u63a7\u5236 \u4e00\u3001for\u5faa\u73af \u9636\u4e58 #include <stdio.h> int main() { int n, result = 1; int i = 1; //\u8bbe\u5b9ai\u4e0eresult\u7684\u521d\u59cb\u503c\u4e3a1\uff0c\u5426\u5219\u76f8\u4e58\u7b49\u4e8e0 scanf(\"%d\",&n); for (;i<=n;i++){ result = result * i; } printf(\"%d\u7684\u9636\u4e58\u4e3a%d\", n, result); return 0; } \u4e8c\u3001\u5faa\u73af\u63a7\u5236 break: \u8df3\u51fa\u5faa\u73af continue\uff1a\u8df3\u8fc7\u5faa\u73af\u8fd9\u4e00\u8f6e\u5269\u4e0b\u7684\u8bed\u53e5\u8fdb\u5165\u4e0b\u4e00\u8f6e \u7d20\u6570 #include <stdio.h> int main() { int x, rest, time = 0; scanf(\"%d\",&x); int i = 2; for (;i<x;i++){ rest = x % i; if (rest != 0) time ++; if (rest == 0){ printf(\"\u662f\u548c\u6570\"); break; } } if (time == x - 2) printf(\"\u662f\u7d20\u6570\"); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int x; scanf(\"%d\",&x); int i; int isprime = 1; for(i = 2; i < x ; i++){ if (x % i==0){ isprime = 0; break; } } if (isprime == 0){ printf(\"\u548c\u6570\"); } else { printf(\"\u7d20\u6570\")\uff1b } return 0; } \u4e09\u3001\u5d4c\u5957\u7684\u5faa\u73af #include <stdio.h> int main(){ int a = 100, i = 1, b = 2; int c = 1; for(i = 1;i <= a;i++){ for(b = 2, c = 1;b < i;b++){ if (i % b == 0){ c = 0; break; } } if (c == 1){ printf(\"%d\\t\",i); } } return 0; }","title":"\u7b2c\u4e94\u5468 \u5faa\u73af\u63a7\u5236"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/#_1","text":"","title":"\u7b2c\u4e94\u5468 \u5faa\u73af\u63a7\u5236"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/#for","text":"\u9636\u4e58 #include <stdio.h> int main() { int n, result = 1; int i = 1; //\u8bbe\u5b9ai\u4e0eresult\u7684\u521d\u59cb\u503c\u4e3a1\uff0c\u5426\u5219\u76f8\u4e58\u7b49\u4e8e0 scanf(\"%d\",&n); for (;i<=n;i++){ result = result * i; } printf(\"%d\u7684\u9636\u4e58\u4e3a%d\", n, result); return 0; }","title":"\u4e00\u3001for\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/#_2","text":"break: \u8df3\u51fa\u5faa\u73af continue\uff1a\u8df3\u8fc7\u5faa\u73af\u8fd9\u4e00\u8f6e\u5269\u4e0b\u7684\u8bed\u53e5\u8fdb\u5165\u4e0b\u4e00\u8f6e \u7d20\u6570 #include <stdio.h> int main() { int x, rest, time = 0; scanf(\"%d\",&x); int i = 2; for (;i<x;i++){ rest = x % i; if (rest != 0) time ++; if (rest == 0){ printf(\"\u662f\u548c\u6570\"); break; } } if (time == x - 2) printf(\"\u662f\u7d20\u6570\"); return 0; } \u6807\u7b54 #include <stdio.h> int main() { int x; scanf(\"%d\",&x); int i; int isprime = 1; for(i = 2; i < x ; i++){ if (x % i==0){ isprime = 0; break; } } if (isprime == 0){ printf(\"\u548c\u6570\"); } else { printf(\"\u7d20\u6570\")\uff1b } return 0; }","title":"\u4e8c\u3001\u5faa\u73af\u63a7\u5236"},{"location":"C%20or%20C%2B%2B/%E5%BE%AA%E7%8E%AF%E6%8E%A7%E5%88%B6/#_3","text":"#include <stdio.h> int main(){ int a = 100, i = 1, b = 2; int c = 1; for(i = 1;i <= a;i++){ for(b = 2, c = 1;b < i;b++){ if (i % b == 0){ c = 0; break; } } if (c == 1){ printf(\"%d\\t\",i); } } return 0; }","title":"\u4e09\u3001\u5d4c\u5957\u7684\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/","text":"\u7b2c\u4e5d\u5468 \u6307\u9488 \u4e00\u3001& \u83b7\u5f97 \u53d8\u91cf \u7684\u5730\u5740\uff0c\u5176\u64cd\u4f5c\u6570\u5fc5\u987b\u662f \u53d8\u91cf %p\uff0c\u8f93\u51fa\u53d8\u91cf\u7684\u5730\u5740 printf(\"%p\",&i); //or p=(int)&i; printf(\"0x%x\",p); & \u4e0d\u80fd\u5bf9\u6ca1\u6709\u5730\u5740\u7684\u4e1c\u897f \u53d6\u5730\u5740\uff08\u5982\u8868\u8fbe\u5f0f\uff09 \u5730\u5740\u4ece\u4e0a\u5f80\u4e0b\u5206\u914d \u4e8c\u3001\u6307\u9488 \u4fdd\u5b58\u5730\u5740\u7684\u53d8\u91cf\uff08int *p) \u53d8\u91cf\u7684\u503c\u662f\u5185\u5b58\u7684\u5730\u5740 \u4f5c\u4e3a\u53c2\u6570\u7684\u6307\u9488 ```c void f(int *p); int i = 0; f(&i); ``` \u501f\u6b64\u8bbf\u95ee \u5916\u90e8\u7684i \u6539\u53d8\u5730\u5740\u7684\u53d8\u91cf *\uff08\u95f4\u63a5\u8fd0\u7b97\uff09 (p\u6307\u7684\u662f\u5730\u5740\uff0c*\u8868\u793a\u53d6\u5730\u5740\u5bf9\u5e94\u7684\u53d8\u91cf) *(\u6307\u9488)=\u503c *p \u6574\u4f53\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570 \u51fd\u6570\u95f4\u4f9d\u65e7\u662f\u503c\u7684\u4f20\u9012\uff0c\u4f46\u662f\u6240\u4f20\u9012\u7684\u662f\u5730\u5740\uff0c\u56e0\u6b64\u80fd\u591f\u5bf9\u5730\u5740\u4e0a\u7684\u503c\u8bbf\u95ee \u4e09\u3001\u4f7f\u7528 \u4e09\u90e8\u66f2 \u8bf4\u660e\u6307\u9488 short a=0,*p; \u6307\u9488\u5fc5\u987b\u6307\u5411\u5bf9\u8c61\u540e\u624d\u80fd\u4f7f\u7528 *\u4e0e&\u4e3a\u4e92\u8865\u8fd0\u7b97 \u6307\u9488\u6307\u5411\u5bf9\u8c61 p=&a; \u901a\u8fc7\u6307\u9488\u5f15\u7528\u5bf9\u8c61 *p=*p+2; \u4ea4\u6362 #include <stdio.h> void swap(int *a,int *b){ int temp; temp = *a; *a = *b; *b = temp; } int main(){ int a,b; scanf(\"%d%d\",&a,&b); swap(&a,&b); printf(\"%d %d\",a,b); return 0; } \u6700\u5927\u6700\u5c0f\u503c #include <stdio.h> void maxmin(int a[],int length,int *max,int *min); int main() { int a[10],i; int max,min; for (i=0;i<10;i++){ scanf(\"%d\",&a[i]); } maxmin(a,sizeof(a)/sizeof(a[0]),&max,&min); printf(\"%d %d\",max,min); return 0; } void maxmin(int a[],int len,int *max,int *min) { int i; *max=*min=a[0]; for(i=0;i<len;i++){ if (a[i]>*max) *max = a[i]; else if (a[i]<*min) *min = a[i]; } } \u5730\u5740\u53d8\u91cf\u6ca1\u6709\u88ab\u8d4b\u503c\u4e4b\u524d\uff0c\u4e0d\u80fd\u901a\u8fc7\u201c*\u201d\u8bbf\u95ee\u4efb\u4f55\u6570\u636e \u56db\u3001\u6307\u9488\u4e0e\u6570\u7ec4 \u6570\u7ec4\u53d8\u91cf\u672c\u8eab\u8868\u8fbe\u5730\u5740 \u4e0d\u9700\u8981\u7528&\u53d6\u5730\u5740 warning\uff1a\u6570\u7ec4\u7684\u5355\u5143\u662f\u53d8\u91cf\uff0c\u9700\u8981&\u53d6\u5730\u5740 *\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5bf9\u6307\u9488\u505a\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u6570\u7ec4\u505a \u6570\u7ec4\u53d8\u91cf\u662fconst\u7684\u6307\u9488\uff0c\u56e0\u6b64 \u4e0d\u80fd\u88ab\u8d4b\u503c \uff08\u4e0d\u80fd\u6539\u53d8\u6570\u7ec4\u7684\u5730\u5740\uff0c\u56e0\u6b64\u4e0d\u80fd\u4f7f \u6570\u7ec4\u540d++ \u7684\u65b9\u5f0f\u904d\u5386\u6570\u7ec4\uff09\uff08int *const \u6570\u7ec4\uff09 \u5f15\u7528\u6570\u7ec4\u5143\u7d20\u7684\u6b65\u9aa4 \u8bf4\u660e\u6307\u9488\u548c\u6570\u7ec4 int *p,a[10]; \u6307\u9488\u6307\u5411\u6570\u7ec4 p=a; (\u6307\u5411\u9996\u5730\u5740\uff0c\u4e5f\u53ef\u5199\u4f5c p=a[0]; ) \u901a\u8fc7\u6307\u9488\u5f15\u7528\u6570\u7ec4\u5143\u7d20 \u4e0b\u6807\u6cd5\uff1a a[i] \u6307\u9488\u6cd5\uff1a *(p+i) \u6570\u7ec4\u540d\u6cd5\uff1a *(a+i) \u4e8c\u7ef4\u6570\u7ec4\u7684\u5730\u5740 int a[3][4] a+1\u4e00\u6b21\u52a0\u4e00\u884c\uff08\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff09 a[0]+1,\u4e00\u6b21\u52a0\u4e00\u4e2a\uff08\u4e00\u4e2a\u5143\u7d20\uff09 i\u884cj\u5217\u7684\u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u7531\u4ee5\u4e0b\u65b9\u5f0f\u5f97\u5230 *(a[i] + j) p[i][j] *(*(a + i) + j) \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4e0b\u4e09\u79cd\u5730\u5740\u7b49\u4ef7 a+i (a+i) &a[i] \u4ee5\u4e0b\u6570\u7ec4\u5143\u7d20\u7b49\u4ef7 a[i] *(a+i) //\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u8f93\u51fa\u6570\u7ec4 int a[N],*p = a; for(i = 0;i < N;i++){ //\u6570\u7ec4\u540d\u6307\u9488\u6cd5 printf(\"%d\",*(a+i)); } for(i = 0;i < N;i++){ //\u6307\u9488\u53d8\u91cf\u4e0b\u6807 printf(\"%d\",p[i]); } for(i = 0;i < N;i++){ //\u6307\u9488\u53d8\u91cf\u6307\u9488\u6cd5 printf(\"%d\",*(p+i)); } for(;p < a + N;p++){ //\u901a\u8fc7\u6307\u9488\u53d8\u91cf\u8bbf\u95ee\u6570\u7ec4 printf(\"%d\",*p); } \u4e94\u3001\u4f20\u5165\u51fd\u6570\u7684\u6570\u7ec4 \u51fd\u6570\u4e2d\u7684\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u6307\u9488(\u7279\u6b8a\u7684\u6307\u9488) c //\u4ee5\u4e0b\u7684\u51fd\u6570\u539f\u578b\u662f\u7b49\u4ef7\u7684 int sum(int *ar, int n); int sum(int *, int); int sum(int ar[],int n); int sum(int [],int); \u56db\u79cd\u5199\u6cd5 c //\u5b9e\u53c2\u7528\u6570\u7ec4\u540d\uff0c\u5f62\u53c2\u7528\u6570\u7ec4 void reverse(int a[]); reverse(a); //\u5b9e\u53c2\u7528\u6570\u7ec4\u540d\uff0c\u5f62\u53c2\u7528\u6307\u9488 void reverse(int *a); reverse(a); //\u5b9e\u53c2\u4e0e\u5f62\u53c2\u90fd\u7528\u6307\u9488\u53d8\u91cf void reverse(int *a); int *p=a; reverse(p); //\u5b9e\u53c2\u7528\u6307\u9488\u53d8\u91cf\uff0c\u5f62\u53c2\u7528\u6570\u7ec4 void reverse(int a[]); int *p=a; reverse(p); \u516d\u3001\u6307\u9488\u4e0econst \u6307\u9488\u662fconst \u8868\u793a\u4e00\u65e6\u5f97\u5230\u4e86\u67d0\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u53d8\u91cf c int *const q=&i; //q\u7684\u503c\u4e0d\u80fd\u88ab\u6539\u53d8 *q = 26; //ok,\u6307\u5411\u7684\u662fi\uff08*q\u6240\u6307\uff09 q++; //error\uff0c\u6307\u5411\u7684\u662fq \u6240\u6307\u662fconst \u8868\u793a\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u53bb\u4fee\u6539\u53d8\u91cf c const int *p=&i; *p = 26; //\u9519\u8bef\uff0c*p\uff08\u5730\u5740\uff09\u662fconst(p\u6240\u6307\u5411\u7684\u5730\u5740\u662f\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539) i = 26; //ok p = &j; //ok\uff08\u7ed9p\u6240\u6307\u5411\u7684\u5730\u5740\u8d4b\u503c\uff0c\u800c\u4e0d\u662f\u6539\u53d8\u5730\u5740\uff09 \u4ec0\u4e48\u610f\u601d\uff1f \uff08\u5b58\u7591\uff0c\u5f85\u89e3\u51b3\uff09 c int i; const int* p1 = &i; int const* p2 = &i; int *const p3 = &i; const\u5728*\u53f7\u524d\uff1a\u8868\u793aconst\u6240\u6307\u7684\u4e1c\u897f\u4e0d\u80fd\u88ab\u4fee\u6539 const\u5728*\u53f7\u540e\uff1a\u8868\u793a\u6307\u9488\u4e0d\u80fd\u88ab\u4fee\u6539 \u8f6c\u6362 \u603b\u662f\u53ef\u4ee5\u628a\u4e00\u4e2a\u975econst\u7684\u503c\u8f6c\u5316\u6210const\u7684(\u901a\u8fc7\u51fd\u6570) ```c void f(const int* x); int a = 15; f(&a); const int b = a; f(&b); //const b=a+1; //error ``` \u4f5c\u7528\uff1a\u5f53\u8981\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u6bd4\u5730\u5740\u5927\u7684\u65f6\u5019\uff0c\u80fd\u4ee5\u8f83\u5c11\u7684\u5b57\u8282\u6570\u4f20\u9012\u503c\u7ed9\u53c2\u6570\uff0c\u53c8\u80fd\u907f\u514d\u51fd\u6570\u5916\u9762\u5bf9\u53d8\u91cf\u7684\u4fee\u6539\uff1b const\u6570\u7ec4 c const int a[]={1,2,3,4,5,6,}; \u6570\u7ec4\u53d8\u91cf\u5df2\u7ecf\u662fconst\u7684\u6307\u9488 \u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u8d4b\u503c \u4e03\u3001\u884c\u6307\u9488\u53d8\u91cf \u884c\u6307\u9488 \u884c\u6307\u9488\u662f\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5373 int (*p)[N] \u5f53\u4e8c\u7ef4\u6570\u7ec4\u8981\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u65f6\uff0c\u58f0\u660e\u5982\u4e0b void fun(int (*p)[N]); void fun(int p[][N]); \u5b9e\u4f8b\uff1a\u77e9\u9635\u52a0\u6cd5 ```c++ // * * * * * * * * //File name : 0608.cpp //Author :\u9648\u5065\u8fbe //Date : 2021.11.18 //Student ID :2021218250 // * * * * * * * * #include using namespace std; #define N 4 #define M 5 void input(int ( p)[M]); void plusMat(int ( p)[M],int ( q)[M]); void output(int ( p)[M]); int main(){ int iMat1[N][M],iMat2[N][M],iMatsum[N][M]; int ( p)[M] = iMat1,( q)[M] = iMat2,(*r)[M] = iMatsum; cout << \"\u8bf7\u8f93\u5165\u77e9\u96351\" << endl; input(p); cout << \"\u8bf7\u8f93\u5165\u77e9\u96352\" << endl; input(q); plusMat(p,q); output(p); return 0; } void input(int ( p)[M]){ //\u8f93\u5165 int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ cin >> (*(p + i) + j); } } } void plusMat(int ( p)[M],int ( q)[M]){ //\u77e9\u9635\u76f8\u52a0 int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ ( (p + i) + j) = ( (p + i) + j) + ( (q + i) + j); } } } void output(int ( p)[M]){ //\u8f93\u51fa int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ cout << (*(p + i) + j) << \"\\t\"; } cout << endl; } } ``` \u516b\u3001\u6307\u9488\u8fd0\u7b97 \u53ef\u7528\u7684\u6709 \u4e94\u79cd\u7b97\u6570\u8fd0\u7b97 p++; p--; p+=n; p-=n; p1-p2; \u516d\u79cd\u5173\u7cfb\u8fd0\u7b97 +1\u5b9e\u9645\u4e0a\u662f+sizeof\uff08\u6570\u636e\u7c7b\u578b\uff09\uff0c\u5176\u4ed6\u540c\u7406 \u5982\u679c\u4e0d\u662f\u6307\u5411\u4e00\u7247\u8fde\u7eed\u7684\u6570\u636e\uff0c\u5219\u65e0\u610f\u4e49 \u6307\u9488\u53ef\u4ee5\u505a\u6bd4\u8f83 \u6bd4\u8f83\u5730\u5740 0\u5730\u5740 \u6307\u9488\u4e0d\u5e94\u6709 \u53ef\u505a \u8fd4\u56de\u7684\u6307\u9488\u65e0\u6548 \u6307\u9488\u6ca1\u6709\u88ab\u771f\u6b63\u7684\u521d\u59cb\u5316 \uff08\u4f7f\u75280\uff08NULL\uff09\u7ed9\u6307\u9488\u521d\u59cb\u5316\uff09 NULL \u662f\u4e00\u4e2a\u9884\u5b9a\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u8868\u793a0\u5730\u5740 \u6307\u9488\u7684\u7c7b\u578b \u65e0\u8bba\u6307\u5411\u4ec0\u4e48\u7c7b\u578b\uff0c \u6307\u9488\u7684\u5927\u5c0f \u90fd\u4e00\u6837 \u4f46\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c \u53ef\u4ee5\u8fdb\u884c\u7c7b\u578b\u8f6c\u5316 void*\u8868\u793a\u4e0d\u77e5\u9053\u6307\u5411\u4ec0\u4e48\u4e1c\u897f\u7684\u6307\u9488 c void* q=(void*)p; \u6307\u9488\u53ef\u4ee5\u505a\u4ec0\u4e48\uff1f \u9700\u8981\u4f20\u5165\u8f83\u5927\u7684\u6570\u636e\u65f6\u7528\u4f5c\u53c2\u6570 \u4f20\u5165\u6570\u7ec4\u540e\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c \u51fd\u6570\u8fd4\u56de\u4e0d\u6b62\u4e00\u4e2a\u7ed3\u679c \u901a\u8fc7\u51fd\u6570\u4fee\u6539\u53d8\u91cf \u52a8\u6001\u7533\u8bf7\u5185\u5b58 \u4e5d\u3001\u52a8\u6001\u5185\u5b58\u5206\u914d \u5206\u914d\u5185\u5b58\u7a7a\u95f4\u51fd\u6570malloc (\u9700\u8981\u6709stdlib.h\u6216maloc.h\u5934\u6587\u4ef6) \u51fd\u6570\u539f\u578b void *malloc(unsigned int size) \u51fd\u6570\u8c03\u7528\u5f62\u5f0f (\u7c7b\u578b\u6807\u8bc6\u7b26*) malloc(size) \u5176\u4e2d\uff1a \u7c7b\u578b\u6807\u8bc6\u7b26\uff1a\u8868\u793a\u628a\u8be5\u533a\u57df\u7528\u4e8e\u4f55\u79cd\u6570\u636e\u7c7b\u578b (\u7c7b\u578b\u6807\u8bc6\u7b26*)\uff1a\u8868\u793a\u628a\u8fd4\u56de\u503c\u5f3a\u5236\u8f6c\u5316\u4e3a\u8be5\u7c7b\u578b\u6307\u9488 size\uff1a\u65e0\u7b26\u53f7\u6574\u6570 \u51fd\u6570\u529f\u80fd \u5728\u5185\u5b58\u7684\u52a8\u6001\u5b58\u50a8\u533a\u5206\u914d\u4e00\u5757\u957fsize\u5b57\u8282\u7684\u8fde\u7eed\u533a\u57df \u8fd4\u56de\u503c\u4e3a\u8be5\u533a\u57df\u7684\u9996\u5730\u5740 c char *pc; pc = (char *)malloc(100); //\u8868\u793a\u5206\u914d100\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u82e5\u7533\u8bf7\u5931\u8d25\u5219\u8fd4\u56deNULL \u5206\u914d\u5185\u5b58\u7a7a\u95f4\u51fd\u6570calloc \u793a\u8303\u5185\u5b58\u7a7a\u95f4\u51fd\u6570free \u51fd\u6570\u539f\u578b void free (void * ptr); \u51fd\u6570\u8c03\u7528\u5f62\u5f0f free (ptr); \u51fd\u6570\u529f\u80fd \u91ca\u653eptr\u6240\u6307\u5411\u7684\u4e00\u5757\u5185\u5b58\u7a7a\u95f4 \u88ab\u91ca\u653e\u7684\u533a\u57df\u5fc5\u987b\u662f\u7531malloc\u6216calloc\u51fd\u6570\u6240\u5206\u914d\u7684\u533a\u57df \u793a\u4f8b \u5185\u5b58\u7684\u52a8\u6001\u5206\u914d\u548c\u91ca\u653e c #include <stdio.h> #include <stdlib.h> void main(){ int *p = NULL; p = (int *)malloc(sizeof(int)); *p = 100; printf(\"%d\\n\",*p); free(p); } \u8f93\u5165\u67d0\u73ed\u5b66\u751f\u7684\u67d0\u95e8\u8bfe\u7a0b\u7684\u6210\u7ee9\uff0c\u8ba1\u7b97\u5668\u5e73\u5747\u5206\u5e76\u8f93\u51fa\uff0c\u73ed\u7ea7\u4eba\u6570\u7531\u952e\u76d8\u8f93\u5165 c #include <stdio.h> #include <stdlib.h> void main(){ int n, t, *p = NULL; float sum, ave; scanf(\"%d\",&n); //\u8f93\u5165\u5b66\u751f\u4e2a\u6570 p = (int*)malloc(n * sizeof(int)); //x if(p = NULL){ printf(\"No enough memory\\n\"); exit(1); } for(t = 0,sum = 0; t < n;t++){ scanf(\"%d\",p + t); sum = sum + *(p + t); } ave = sum/n; printf(\"average = %5.2f\\n\",ave); free(p); } \u5341\u3001\u5f15\u7528 \u5f15\u7528\u5373\u7ed9\u5bf9\u8c61\u8d77\u4e86\u53e6\u4e00\u4e2a\u540d\u5b57 int iVal = 1024; int &refval = iVal; \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f15\u7528\u4e4b\u540e\uff0c\u5bf9\u5176\u8fdb\u884c\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u4e0e\u4e4b\u7ed1\u5b9a\u7684\u5bf9\u8c61\u4e0a\u8fdb\u884c\u7684 \u4e0d\u80fd\u5b9a\u4e49\u5f15\u7528\u7684\u5f15\u7528 \u4e0d\u80fd\u4e0e\u5b57\u9762\u503c\u6216\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u7ed1\u5b9a\u5728\u4e00\u8d77 \u4e5f\u5e38\u7528\u4e8e\u51fd\u6570\u4f20\u53c2 \u6307\u5411\u6307\u9488\u7684\u5f15\u7528 \u6307\u9488\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u5f15\u7528 C++ int i = 2; int *p = &i; int *& = p; //int *\u662f\u6570\u636e\u7c7b\u578b","title":"\u7b2c\u4e5d\u5468 \u6307\u9488"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_1","text":"","title":"\u7b2c\u4e5d\u5468 \u6307\u9488"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_2","text":"\u83b7\u5f97 \u53d8\u91cf \u7684\u5730\u5740\uff0c\u5176\u64cd\u4f5c\u6570\u5fc5\u987b\u662f \u53d8\u91cf %p\uff0c\u8f93\u51fa\u53d8\u91cf\u7684\u5730\u5740 printf(\"%p\",&i); //or p=(int)&i; printf(\"0x%x\",p); & \u4e0d\u80fd\u5bf9\u6ca1\u6709\u5730\u5740\u7684\u4e1c\u897f \u53d6\u5730\u5740\uff08\u5982\u8868\u8fbe\u5f0f\uff09 \u5730\u5740\u4ece\u4e0a\u5f80\u4e0b\u5206\u914d","title":"\u4e00\u3001&amp;"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_3","text":"\u4fdd\u5b58\u5730\u5740\u7684\u53d8\u91cf\uff08int *p) \u53d8\u91cf\u7684\u503c\u662f\u5185\u5b58\u7684\u5730\u5740 \u4f5c\u4e3a\u53c2\u6570\u7684\u6307\u9488 ```c void f(int *p); int i = 0; f(&i); ``` \u501f\u6b64\u8bbf\u95ee \u5916\u90e8\u7684i \u6539\u53d8\u5730\u5740\u7684\u53d8\u91cf *\uff08\u95f4\u63a5\u8fd0\u7b97\uff09 (p\u6307\u7684\u662f\u5730\u5740\uff0c*\u8868\u793a\u53d6\u5730\u5740\u5bf9\u5e94\u7684\u53d8\u91cf) *(\u6307\u9488)=\u503c *p \u6574\u4f53\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570 \u51fd\u6570\u95f4\u4f9d\u65e7\u662f\u503c\u7684\u4f20\u9012\uff0c\u4f46\u662f\u6240\u4f20\u9012\u7684\u662f\u5730\u5740\uff0c\u56e0\u6b64\u80fd\u591f\u5bf9\u5730\u5740\u4e0a\u7684\u503c\u8bbf\u95ee","title":"\u4e8c\u3001\u6307\u9488"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_4","text":"\u4e09\u90e8\u66f2 \u8bf4\u660e\u6307\u9488 short a=0,*p; \u6307\u9488\u5fc5\u987b\u6307\u5411\u5bf9\u8c61\u540e\u624d\u80fd\u4f7f\u7528 *\u4e0e&\u4e3a\u4e92\u8865\u8fd0\u7b97 \u6307\u9488\u6307\u5411\u5bf9\u8c61 p=&a; \u901a\u8fc7\u6307\u9488\u5f15\u7528\u5bf9\u8c61 *p=*p+2; \u4ea4\u6362 #include <stdio.h> void swap(int *a,int *b){ int temp; temp = *a; *a = *b; *b = temp; } int main(){ int a,b; scanf(\"%d%d\",&a,&b); swap(&a,&b); printf(\"%d %d\",a,b); return 0; } \u6700\u5927\u6700\u5c0f\u503c #include <stdio.h> void maxmin(int a[],int length,int *max,int *min); int main() { int a[10],i; int max,min; for (i=0;i<10;i++){ scanf(\"%d\",&a[i]); } maxmin(a,sizeof(a)/sizeof(a[0]),&max,&min); printf(\"%d %d\",max,min); return 0; } void maxmin(int a[],int len,int *max,int *min) { int i; *max=*min=a[0]; for(i=0;i<len;i++){ if (a[i]>*max) *max = a[i]; else if (a[i]<*min) *min = a[i]; } } \u5730\u5740\u53d8\u91cf\u6ca1\u6709\u88ab\u8d4b\u503c\u4e4b\u524d\uff0c\u4e0d\u80fd\u901a\u8fc7\u201c*\u201d\u8bbf\u95ee\u4efb\u4f55\u6570\u636e","title":"\u4e09\u3001\u4f7f\u7528"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_5","text":"\u6570\u7ec4\u53d8\u91cf\u672c\u8eab\u8868\u8fbe\u5730\u5740 \u4e0d\u9700\u8981\u7528&\u53d6\u5730\u5740 warning\uff1a\u6570\u7ec4\u7684\u5355\u5143\u662f\u53d8\u91cf\uff0c\u9700\u8981&\u53d6\u5730\u5740 *\u8fd0\u7b97\u7b26\u53ef\u4ee5\u5bf9\u6307\u9488\u505a\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u6570\u7ec4\u505a \u6570\u7ec4\u53d8\u91cf\u662fconst\u7684\u6307\u9488\uff0c\u56e0\u6b64 \u4e0d\u80fd\u88ab\u8d4b\u503c \uff08\u4e0d\u80fd\u6539\u53d8\u6570\u7ec4\u7684\u5730\u5740\uff0c\u56e0\u6b64\u4e0d\u80fd\u4f7f \u6570\u7ec4\u540d++ \u7684\u65b9\u5f0f\u904d\u5386\u6570\u7ec4\uff09\uff08int *const \u6570\u7ec4\uff09 \u5f15\u7528\u6570\u7ec4\u5143\u7d20\u7684\u6b65\u9aa4 \u8bf4\u660e\u6307\u9488\u548c\u6570\u7ec4 int *p,a[10]; \u6307\u9488\u6307\u5411\u6570\u7ec4 p=a; (\u6307\u5411\u9996\u5730\u5740\uff0c\u4e5f\u53ef\u5199\u4f5c p=a[0]; ) \u901a\u8fc7\u6307\u9488\u5f15\u7528\u6570\u7ec4\u5143\u7d20 \u4e0b\u6807\u6cd5\uff1a a[i] \u6307\u9488\u6cd5\uff1a *(p+i) \u6570\u7ec4\u540d\u6cd5\uff1a *(a+i) \u4e8c\u7ef4\u6570\u7ec4\u7684\u5730\u5740 int a[3][4] a+1\u4e00\u6b21\u52a0\u4e00\u884c\uff08\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff09 a[0]+1,\u4e00\u6b21\u52a0\u4e00\u4e2a\uff08\u4e00\u4e2a\u5143\u7d20\uff09 i\u884cj\u5217\u7684\u6570\u7ec4\u5143\u7d20\u53ef\u4ee5\u7531\u4ee5\u4e0b\u65b9\u5f0f\u5f97\u5230 *(a[i] + j) p[i][j] *(*(a + i) + j) \u6570\u7ec4\u4e2d\uff0c\u4ee5\u4e0b\u4e09\u79cd\u5730\u5740\u7b49\u4ef7 a+i (a+i) &a[i] \u4ee5\u4e0b\u6570\u7ec4\u5143\u7d20\u7b49\u4ef7 a[i] *(a+i) //\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u8f93\u51fa\u6570\u7ec4 int a[N],*p = a; for(i = 0;i < N;i++){ //\u6570\u7ec4\u540d\u6307\u9488\u6cd5 printf(\"%d\",*(a+i)); } for(i = 0;i < N;i++){ //\u6307\u9488\u53d8\u91cf\u4e0b\u6807 printf(\"%d\",p[i]); } for(i = 0;i < N;i++){ //\u6307\u9488\u53d8\u91cf\u6307\u9488\u6cd5 printf(\"%d\",*(p+i)); } for(;p < a + N;p++){ //\u901a\u8fc7\u6307\u9488\u53d8\u91cf\u8bbf\u95ee\u6570\u7ec4 printf(\"%d\",*p); }","title":"\u56db\u3001\u6307\u9488\u4e0e\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_6","text":"\u51fd\u6570\u4e2d\u7684\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u6307\u9488(\u7279\u6b8a\u7684\u6307\u9488) c //\u4ee5\u4e0b\u7684\u51fd\u6570\u539f\u578b\u662f\u7b49\u4ef7\u7684 int sum(int *ar, int n); int sum(int *, int); int sum(int ar[],int n); int sum(int [],int); \u56db\u79cd\u5199\u6cd5 c //\u5b9e\u53c2\u7528\u6570\u7ec4\u540d\uff0c\u5f62\u53c2\u7528\u6570\u7ec4 void reverse(int a[]); reverse(a); //\u5b9e\u53c2\u7528\u6570\u7ec4\u540d\uff0c\u5f62\u53c2\u7528\u6307\u9488 void reverse(int *a); reverse(a); //\u5b9e\u53c2\u4e0e\u5f62\u53c2\u90fd\u7528\u6307\u9488\u53d8\u91cf void reverse(int *a); int *p=a; reverse(p); //\u5b9e\u53c2\u7528\u6307\u9488\u53d8\u91cf\uff0c\u5f62\u53c2\u7528\u6570\u7ec4 void reverse(int a[]); int *p=a; reverse(p);","title":"\u4e94\u3001\u4f20\u5165\u51fd\u6570\u7684\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#const","text":"\u6307\u9488\u662fconst \u8868\u793a\u4e00\u65e6\u5f97\u5230\u4e86\u67d0\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u53d8\u91cf c int *const q=&i; //q\u7684\u503c\u4e0d\u80fd\u88ab\u6539\u53d8 *q = 26; //ok,\u6307\u5411\u7684\u662fi\uff08*q\u6240\u6307\uff09 q++; //error\uff0c\u6307\u5411\u7684\u662fq \u6240\u6307\u662fconst \u8868\u793a\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u53bb\u4fee\u6539\u53d8\u91cf c const int *p=&i; *p = 26; //\u9519\u8bef\uff0c*p\uff08\u5730\u5740\uff09\u662fconst(p\u6240\u6307\u5411\u7684\u5730\u5740\u662f\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539) i = 26; //ok p = &j; //ok\uff08\u7ed9p\u6240\u6307\u5411\u7684\u5730\u5740\u8d4b\u503c\uff0c\u800c\u4e0d\u662f\u6539\u53d8\u5730\u5740\uff09 \u4ec0\u4e48\u610f\u601d\uff1f \uff08\u5b58\u7591\uff0c\u5f85\u89e3\u51b3\uff09 c int i; const int* p1 = &i; int const* p2 = &i; int *const p3 = &i; const\u5728*\u53f7\u524d\uff1a\u8868\u793aconst\u6240\u6307\u7684\u4e1c\u897f\u4e0d\u80fd\u88ab\u4fee\u6539 const\u5728*\u53f7\u540e\uff1a\u8868\u793a\u6307\u9488\u4e0d\u80fd\u88ab\u4fee\u6539 \u8f6c\u6362 \u603b\u662f\u53ef\u4ee5\u628a\u4e00\u4e2a\u975econst\u7684\u503c\u8f6c\u5316\u6210const\u7684(\u901a\u8fc7\u51fd\u6570) ```c void f(const int* x); int a = 15; f(&a); const int b = a; f(&b); //const b=a+1; //error ``` \u4f5c\u7528\uff1a\u5f53\u8981\u4f20\u9012\u7684\u53c2\u6570\u7c7b\u578b\u6bd4\u5730\u5740\u5927\u7684\u65f6\u5019\uff0c\u80fd\u4ee5\u8f83\u5c11\u7684\u5b57\u8282\u6570\u4f20\u9012\u503c\u7ed9\u53c2\u6570\uff0c\u53c8\u80fd\u907f\u514d\u51fd\u6570\u5916\u9762\u5bf9\u53d8\u91cf\u7684\u4fee\u6539\uff1b const\u6570\u7ec4 c const int a[]={1,2,3,4,5,6,}; \u6570\u7ec4\u53d8\u91cf\u5df2\u7ecf\u662fconst\u7684\u6307\u9488 \u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u8d4b\u503c","title":"\u516d\u3001\u6307\u9488\u4e0econst"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_7","text":"\u884c\u6307\u9488 \u884c\u6307\u9488\u662f\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5373 int (*p)[N] \u5f53\u4e8c\u7ef4\u6570\u7ec4\u8981\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u65f6\uff0c\u58f0\u660e\u5982\u4e0b void fun(int (*p)[N]); void fun(int p[][N]); \u5b9e\u4f8b\uff1a\u77e9\u9635\u52a0\u6cd5 ```c++ // * * * * * * * * //File name : 0608.cpp //Author :\u9648\u5065\u8fbe //Date : 2021.11.18 //Student ID :2021218250 // * * * * * * * * #include using namespace std; #define N 4 #define M 5 void input(int ( p)[M]); void plusMat(int ( p)[M],int ( q)[M]); void output(int ( p)[M]); int main(){ int iMat1[N][M],iMat2[N][M],iMatsum[N][M]; int ( p)[M] = iMat1,( q)[M] = iMat2,(*r)[M] = iMatsum; cout << \"\u8bf7\u8f93\u5165\u77e9\u96351\" << endl; input(p); cout << \"\u8bf7\u8f93\u5165\u77e9\u96352\" << endl; input(q); plusMat(p,q); output(p); return 0; } void input(int ( p)[M]){ //\u8f93\u5165 int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ cin >> (*(p + i) + j); } } } void plusMat(int ( p)[M],int ( q)[M]){ //\u77e9\u9635\u76f8\u52a0 int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ ( (p + i) + j) = ( (p + i) + j) + ( (q + i) + j); } } } void output(int ( p)[M]){ //\u8f93\u51fa int i, j; for(i = 0;i < N;i++){ for(j = 0;j < M;j++){ cout << (*(p + i) + j) << \"\\t\"; } cout << endl; } } ```","title":"\u4e03\u3001\u884c\u6307\u9488\u53d8\u91cf"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_8","text":"\u53ef\u7528\u7684\u6709 \u4e94\u79cd\u7b97\u6570\u8fd0\u7b97 p++; p--; p+=n; p-=n; p1-p2; \u516d\u79cd\u5173\u7cfb\u8fd0\u7b97 +1\u5b9e\u9645\u4e0a\u662f+sizeof\uff08\u6570\u636e\u7c7b\u578b\uff09\uff0c\u5176\u4ed6\u540c\u7406 \u5982\u679c\u4e0d\u662f\u6307\u5411\u4e00\u7247\u8fde\u7eed\u7684\u6570\u636e\uff0c\u5219\u65e0\u610f\u4e49 \u6307\u9488\u53ef\u4ee5\u505a\u6bd4\u8f83 \u6bd4\u8f83\u5730\u5740 0\u5730\u5740 \u6307\u9488\u4e0d\u5e94\u6709 \u53ef\u505a \u8fd4\u56de\u7684\u6307\u9488\u65e0\u6548 \u6307\u9488\u6ca1\u6709\u88ab\u771f\u6b63\u7684\u521d\u59cb\u5316 \uff08\u4f7f\u75280\uff08NULL\uff09\u7ed9\u6307\u9488\u521d\u59cb\u5316\uff09 NULL \u662f\u4e00\u4e2a\u9884\u5b9a\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u8868\u793a0\u5730\u5740 \u6307\u9488\u7684\u7c7b\u578b \u65e0\u8bba\u6307\u5411\u4ec0\u4e48\u7c7b\u578b\uff0c \u6307\u9488\u7684\u5927\u5c0f \u90fd\u4e00\u6837 \u4f46\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u8d4b\u503c \u53ef\u4ee5\u8fdb\u884c\u7c7b\u578b\u8f6c\u5316 void*\u8868\u793a\u4e0d\u77e5\u9053\u6307\u5411\u4ec0\u4e48\u4e1c\u897f\u7684\u6307\u9488 c void* q=(void*)p; \u6307\u9488\u53ef\u4ee5\u505a\u4ec0\u4e48\uff1f \u9700\u8981\u4f20\u5165\u8f83\u5927\u7684\u6570\u636e\u65f6\u7528\u4f5c\u53c2\u6570 \u4f20\u5165\u6570\u7ec4\u540e\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c \u51fd\u6570\u8fd4\u56de\u4e0d\u6b62\u4e00\u4e2a\u7ed3\u679c \u901a\u8fc7\u51fd\u6570\u4fee\u6539\u53d8\u91cf \u52a8\u6001\u7533\u8bf7\u5185\u5b58","title":"\u516b\u3001\u6307\u9488\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_9","text":"\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u51fd\u6570malloc (\u9700\u8981\u6709stdlib.h\u6216maloc.h\u5934\u6587\u4ef6) \u51fd\u6570\u539f\u578b void *malloc(unsigned int size) \u51fd\u6570\u8c03\u7528\u5f62\u5f0f (\u7c7b\u578b\u6807\u8bc6\u7b26*) malloc(size) \u5176\u4e2d\uff1a \u7c7b\u578b\u6807\u8bc6\u7b26\uff1a\u8868\u793a\u628a\u8be5\u533a\u57df\u7528\u4e8e\u4f55\u79cd\u6570\u636e\u7c7b\u578b (\u7c7b\u578b\u6807\u8bc6\u7b26*)\uff1a\u8868\u793a\u628a\u8fd4\u56de\u503c\u5f3a\u5236\u8f6c\u5316\u4e3a\u8be5\u7c7b\u578b\u6307\u9488 size\uff1a\u65e0\u7b26\u53f7\u6574\u6570 \u51fd\u6570\u529f\u80fd \u5728\u5185\u5b58\u7684\u52a8\u6001\u5b58\u50a8\u533a\u5206\u914d\u4e00\u5757\u957fsize\u5b57\u8282\u7684\u8fde\u7eed\u533a\u57df \u8fd4\u56de\u503c\u4e3a\u8be5\u533a\u57df\u7684\u9996\u5730\u5740 c char *pc; pc = (char *)malloc(100); //\u8868\u793a\u5206\u914d100\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u82e5\u7533\u8bf7\u5931\u8d25\u5219\u8fd4\u56deNULL \u5206\u914d\u5185\u5b58\u7a7a\u95f4\u51fd\u6570calloc \u793a\u8303\u5185\u5b58\u7a7a\u95f4\u51fd\u6570free \u51fd\u6570\u539f\u578b void free (void * ptr); \u51fd\u6570\u8c03\u7528\u5f62\u5f0f free (ptr); \u51fd\u6570\u529f\u80fd \u91ca\u653eptr\u6240\u6307\u5411\u7684\u4e00\u5757\u5185\u5b58\u7a7a\u95f4 \u88ab\u91ca\u653e\u7684\u533a\u57df\u5fc5\u987b\u662f\u7531malloc\u6216calloc\u51fd\u6570\u6240\u5206\u914d\u7684\u533a\u57df \u793a\u4f8b \u5185\u5b58\u7684\u52a8\u6001\u5206\u914d\u548c\u91ca\u653e c #include <stdio.h> #include <stdlib.h> void main(){ int *p = NULL; p = (int *)malloc(sizeof(int)); *p = 100; printf(\"%d\\n\",*p); free(p); } \u8f93\u5165\u67d0\u73ed\u5b66\u751f\u7684\u67d0\u95e8\u8bfe\u7a0b\u7684\u6210\u7ee9\uff0c\u8ba1\u7b97\u5668\u5e73\u5747\u5206\u5e76\u8f93\u51fa\uff0c\u73ed\u7ea7\u4eba\u6570\u7531\u952e\u76d8\u8f93\u5165 c #include <stdio.h> #include <stdlib.h> void main(){ int n, t, *p = NULL; float sum, ave; scanf(\"%d\",&n); //\u8f93\u5165\u5b66\u751f\u4e2a\u6570 p = (int*)malloc(n * sizeof(int)); //x if(p = NULL){ printf(\"No enough memory\\n\"); exit(1); } for(t = 0,sum = 0; t < n;t++){ scanf(\"%d\",p + t); sum = sum + *(p + t); } ave = sum/n; printf(\"average = %5.2f\\n\",ave); free(p); }","title":"\u4e5d\u3001\u52a8\u6001\u5185\u5b58\u5206\u914d"},{"location":"C%20or%20C%2B%2B/%E6%8C%87%E9%92%88/#_10","text":"\u5f15\u7528\u5373\u7ed9\u5bf9\u8c61\u8d77\u4e86\u53e6\u4e00\u4e2a\u540d\u5b57 int iVal = 1024; int &refval = iVal; \u5b9a\u4e49\u4e86\u4e00\u4e2a\u5f15\u7528\u4e4b\u540e\uff0c\u5bf9\u5176\u8fdb\u884c\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u4e0e\u4e4b\u7ed1\u5b9a\u7684\u5bf9\u8c61\u4e0a\u8fdb\u884c\u7684 \u4e0d\u80fd\u5b9a\u4e49\u5f15\u7528\u7684\u5f15\u7528 \u4e0d\u80fd\u4e0e\u5b57\u9762\u503c\u6216\u67d0\u4e2a\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u7ed1\u5b9a\u5728\u4e00\u8d77 \u4e5f\u5e38\u7528\u4e8e\u51fd\u6570\u4f20\u53c2 \u6307\u5411\u6307\u9488\u7684\u5f15\u7528 \u6307\u9488\u4e5f\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u5f15\u7528 C++ int i = 2; int *p = &i; int *& = p; //int *\u662f\u6570\u636e\u7c7b\u578b","title":"\u5341\u3001\u5f15\u7528"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","text":"\u7b2c\u516d\u5468\u6570\u636e\u7c7b\u578b \u4e00\u3001const\u5bf9\u8c61 \u5e38\u91cf \u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316 \u9ed8\u8ba4\u72b6\u6001\u4e0bconst\u5bf9\u8c61\u4ec5\u5728\u5f53\u524d\u6587\u4ef6\u5185\u6709\u6548 \u60f3\u8981\u5728\u5916\u90e8\u4f7f\u7528\u53ef\u4ee5\u6dfb\u52a0 extern : extern const int bufSize = 512 \u540c\u6837\u53ef\u4ee5\u88ab\u5f15\u7528\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u884c\u4fee\u6539 const\u5bf9\u8c61\u662f\u5e38\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5e38\u91cf\uff08\u56e0\u6b64\u4e0d\u80fd\u7528\u4f5c\u6570\u7ec4\u5927\u5c0f\uff09","title":"\u7b2c\u516d\u5468\u6570\u636e\u7c7b\u578b"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#_1","text":"","title":"\u7b2c\u516d\u5468\u6570\u636e\u7c7b\u578b"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#const","text":"\u5e38\u91cf \u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316 \u9ed8\u8ba4\u72b6\u6001\u4e0bconst\u5bf9\u8c61\u4ec5\u5728\u5f53\u524d\u6587\u4ef6\u5185\u6709\u6548 \u60f3\u8981\u5728\u5916\u90e8\u4f7f\u7528\u53ef\u4ee5\u6dfb\u52a0 extern : extern const int bufSize = 512 \u540c\u6837\u53ef\u4ee5\u88ab\u5f15\u7528\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u884c\u4fee\u6539 const\u5bf9\u8c61\u662f\u5e38\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5e38\u91cf\uff08\u56e0\u6b64\u4e0d\u80fd\u7528\u4f5c\u6570\u7ec4\u5927\u5c0f\uff09","title":"\u4e00\u3001const\u5bf9\u8c61"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4 \u4e00\u3001\u521d\u8bd5\u6570\u7ec4 #include <stdio.h> int main(){ int x; double sum = 0; int cnt = 0; int number[100]; scanf(\"%d\",&x); while(x!=-1){ number[cnt] = x; sum += x; cnt++; scanf(\"%d\",&x); } if ( cnt > 0 ){ printf(\"%d\\n\",sum/cnt); int i; for(i = 0;i<cnt;i++){ if(number[i]>sum/cnt){ printf(\"%d\",number[i]); } } } return 0; } \u5b9a\u4e49\u6570\u7ec4\uff1a \u683c\u5f0f\uff1a\u7c7b\u578b \u53d8\u91cf\u540d\u79f0 [\u5143\u7d20\u6570\u91cf]; \u5143\u7d20\u6570\u91cf\u5fc5\u987b\u662f\u6574\u6570 \u521b\u5efa\u540e\u4e0d\u80fd\u6539\u53d8\u5927\u5c0f []\u4e2d\u7684\u6570\u5b57\u53eb\u505a\u4e0b\u6807\u6216\u7d22\u5f15\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 \u6700\u5927\u7684\u4e0b\u6807\u4e3a\u6570\u7ec4\u7684\u4e2a\u6570-1 \u4fdd\u8bc1\u4e0d\u8d8a\u754c #include <stdio.h> int main(){ int x,i; int count[100]; for (i=0;i<100;i++){ count[i]=0; } scanf(\"%d\",&x); while(x!=-1){ count[x]++; scanf(\"%d\",&x); } for(i=0;i<100;i++){ printf(\"%d:%d\",i,count[i]); } return 0; } \u4e8c\u3001\u6570\u7ec4\u8fd0\u7b97 \u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0 \u6570\u7ec4\u5927\u5c0f sizeof ( arr ) / sizeof ( arr[i] ) \u6570\u7ec4\u53d8\u91cf\u672c\u8eab\u4e0d\u80fd\u88ab\u8d4b\u503c \u8d4b\u503c\u5fc5\u987b\u7528\u904d\u5386 \u8d4b\u503c \u8f93\u51fa \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u6570\u6765\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f","title":"\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E7%BB%84/#_1","text":"","title":"\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E7%BB%84/#_2","text":"#include <stdio.h> int main(){ int x; double sum = 0; int cnt = 0; int number[100]; scanf(\"%d\",&x); while(x!=-1){ number[cnt] = x; sum += x; cnt++; scanf(\"%d\",&x); } if ( cnt > 0 ){ printf(\"%d\\n\",sum/cnt); int i; for(i = 0;i<cnt;i++){ if(number[i]>sum/cnt){ printf(\"%d\",number[i]); } } } return 0; } \u5b9a\u4e49\u6570\u7ec4\uff1a \u683c\u5f0f\uff1a\u7c7b\u578b \u53d8\u91cf\u540d\u79f0 [\u5143\u7d20\u6570\u91cf]; \u5143\u7d20\u6570\u91cf\u5fc5\u987b\u662f\u6574\u6570 \u521b\u5efa\u540e\u4e0d\u80fd\u6539\u53d8\u5927\u5c0f []\u4e2d\u7684\u6570\u5b57\u53eb\u505a\u4e0b\u6807\u6216\u7d22\u5f15\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 \u6700\u5927\u7684\u4e0b\u6807\u4e3a\u6570\u7ec4\u7684\u4e2a\u6570-1 \u4fdd\u8bc1\u4e0d\u8d8a\u754c #include <stdio.h> int main(){ int x,i; int count[100]; for (i=0;i<100;i++){ count[i]=0; } scanf(\"%d\",&x); while(x!=-1){ count[x]++; scanf(\"%d\",&x); } for(i=0;i<100;i++){ printf(\"%d:%d\",i,count[i]); } return 0; }","title":"\u4e00\u3001\u521d\u8bd5\u6570\u7ec4"},{"location":"C%20or%20C%2B%2B/%E6%95%B0%E7%BB%84/#_3","text":"\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a0 \u6570\u7ec4\u5927\u5c0f sizeof ( arr ) / sizeof ( arr[i] ) \u6570\u7ec4\u53d8\u91cf\u672c\u8eab\u4e0d\u80fd\u88ab\u8d4b\u503c \u8d4b\u503c\u5fc5\u987b\u7528\u904d\u5386 \u8d4b\u503c \u8f93\u51fa \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5f80\u5f80\u9700\u8981\u53e6\u5916\u4e00\u4e2a\u6570\u6765\u4f20\u5165\u6570\u7ec4\u7684\u5927\u5c0f","title":"\u4e8c\u3001\u6570\u7ec4\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/","text":"\u6587\u4ef6 \u4e00\u3001\u64cd\u4f5c \u64cd\u4f5c\u8fc7\u7a0b \u6253\u5f00\u6587\u4ef6\uff1a\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u548c\u6d41\u7684\u5bf9\u5e94\u5173\u7cfb \u8bfb\u5199\u6587\u4ef6 \u5173\u95ed\u6587\u4ef6\uff1a\u91ca\u653e\u6587\u4ef6\u6240\u5360\u7528\u7684\u8d44\u6e90 C++\u7684\u6587\u4ef6\u7c7b \u4e8c\u3001\u6587\u4ef6\u7684\u6253\u5f00\u4e0e\u5173\u95ed \u26a0\ufe0fupload failed, check dev console \u6253\u5f00 \u6253\u5f00\u65b9\u5f0f open\u51fd\u6570(\u51fd\u6570\u539f\u578b\uff1a void open(const char *szFilename, int mode) ) c++ fstream outFile; outFile.open(\"text.txt\", ios::out); argu1 \u6307\u9488\u6307\u5411\u542b\u8def\u5f84\u7684\u6587\u4ef6\u540d argu2 \u6587\u4ef6\u6253\u5f00\u7684\u6a21\u5f0f \u63a7\u5236\u7b26 \u9002\u7528\u5bf9\u8c61 \u4f5c\u7528 ios::in ifstream, fstream \u53ea\u8bfb\u5b58\u5728\u6587\u4ef6 ios::out ofstream, fstream \u53ea\u5199\uff0c\u65b0\u5efa\u6587\u4ef6 ios::app ofstream, fstream \u5728\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0\uff0c\u4e0d\u5b58\u5728\u5219\u65b0\u5efa ios::ate ifstream \u4ece\u5c3e\u90e8\u53ea\u8bfb ios::trunc ofstream \u5355\u72ec\u4f7f\u7528\uff0c\u540cout ios::binary \u4e09\u4e2a\u7686\u53ef \u5728\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0 ios::in|ios::out fstream \u8bfb\u5199\u5b58\u5728\u6587\u4ef6 ios::in|ios::out|ios::trunc \u8bfb\u5199\u6587\u4ef6\uff0c\u5b58\u5728\u6e05\u695a\u5185\u5bb9\uff0c\u4e0d\u5b58\u5728\u65b0\u5efa \u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u901a\u8fc7 | \u6765\u7ec4\u5408 \u5b9a\u4e49\u6d41\u5bf9\u8c61\u65f6\uff0c\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6253\u5f00 c++ fstream outFile(\"test.txt\", ios::out); \u6ce8\u610f\uff1a\u8981\u5224\u65ad\u6587\u4ef6\u662f\u5426\u6253\u5f00 \u5173\u95ed file.close(); \u4e09\u3001\u5199\u5165\u6587\u4ef6 \u5199\u5165\u4e0e\u5728\u5c4f\u5e55\u4e0a\u8f93\u51fa\u7c7b\u4f3c\uff0c\u4f7f\u7528\u6d41 #include <fstream> using namespace std; int main(){ fstream outFile(\"text.txt\",ios::out); if(!outFile){ cout << \"open failed\"; exit(0); } outFile << 5 << \"string\" << 1.2; outFile.close(); //\u5173\u95ed\u6587\u4ef6 return 0; } \u56db\u3001\u8bfb\u6587\u4ef6 \u540c\u4e0a #include <fstream> using namespace std; int main(){ fstream outFile(\"text.txt\",ios::out); if(!outFile){ cout << \"open failed\"; exit(0); } int data; outFile >> data; outFile.close(); //\u5173\u95ed\u6587\u4ef6 return 0; } \u4e94\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8bfb\u5199 \u4e8c\u8fdb\u5236\u6587\u4ef6\u4f7f\u4e00\u6807\u51c6\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u65b9\u5f0f\u5b58\u50a8\uff0c\u8bfb\u53d6\u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d \u4f18\u70b9\uff1a \u8282\u7701\u7a7a\u95f4 \u6570\u636e\u89c4\u6574 \u4fbf\u4e8e\u7d22\u5f15 \u6253\u5f00\u65f6\uff0c\u9700\u8981 |ios::binary \u8bfb\u5199\u6587\u4ef6\uff1a \u8bfb\uff1a istream &read(char *buff, int count); \u4f5c\u7528\uff1a\u4ece\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u8bfbcount\u5b57\u8282\uff0c\u5b58\u653e\u5230buff\u4e2d int gcount() \u4f5c\u7528\uff1a\u5f53\u524d\u8bfb\u7684\u5b57\u8282\u6570 \u5199\uff1a ostream &write(char *buff, int count); \u4f5c\u7528\uff1a\u5c06\u4ecebuff\u5f00\u59cb\u7684count\u5b57\u8282\u5199\u5230\u6587\u4ef6\u7684\u5f53\u524d\u4f4d\u7f6e \u7a0b\u5e8f\u793a\u4f8b ```c++ #include #include #include using namespace std; int main(){ fstream file; char msg[] = \"This is a test message\", buf[20]; file.open(\"text.txt\",ios::out|ios::in|ios::trunc|ios::binary); if(!file){ exit(2); } file.write(msg, sizeof(msg)); file.seekp(0,ios::beg); file.read(buf,20); cout << file.gcount() << endl; cout << buf << endl; return 0; } ``` ## \u516d\u3001\u6587\u4ef6\u7684\u5b9a\u4f4d\u64cd\u4f5c \u53d6\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u7684\u65b9\u6cd5 int tellg() //g\u4ee3\u8868get int tellp() //p\u4ee3\u8868put \u6539\u53d8\u6587\u4ef6\u6307\u9488\u7684\u5f53\u524d\u4f4d\u7f6e seekg(int offset, int mode) seekp(int offset, int mode) mode: ios::beg :\u6587\u4ef6\u5f00\u5934 ios::cur :\u5f53\u524d\u4f4d\u7f6e ios::end :\u6587\u4ef6\u7ed3\u5c3e \u5355\u4f4d:\u5b57\u8282","title":"\u6587\u4ef6"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_1","text":"","title":"\u6587\u4ef6"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_2","text":"\u64cd\u4f5c\u8fc7\u7a0b \u6253\u5f00\u6587\u4ef6\uff1a\u5efa\u7acb\u4e00\u4e2a\u6587\u4ef6\u548c\u6d41\u7684\u5bf9\u5e94\u5173\u7cfb \u8bfb\u5199\u6587\u4ef6 \u5173\u95ed\u6587\u4ef6\uff1a\u91ca\u653e\u6587\u4ef6\u6240\u5360\u7528\u7684\u8d44\u6e90 C++\u7684\u6587\u4ef6\u7c7b","title":"\u4e00\u3001\u64cd\u4f5c"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_3","text":"\u26a0\ufe0fupload failed, check dev console \u6253\u5f00 \u6253\u5f00\u65b9\u5f0f open\u51fd\u6570(\u51fd\u6570\u539f\u578b\uff1a void open(const char *szFilename, int mode) ) c++ fstream outFile; outFile.open(\"text.txt\", ios::out); argu1 \u6307\u9488\u6307\u5411\u542b\u8def\u5f84\u7684\u6587\u4ef6\u540d argu2 \u6587\u4ef6\u6253\u5f00\u7684\u6a21\u5f0f \u63a7\u5236\u7b26 \u9002\u7528\u5bf9\u8c61 \u4f5c\u7528 ios::in ifstream, fstream \u53ea\u8bfb\u5b58\u5728\u6587\u4ef6 ios::out ofstream, fstream \u53ea\u5199\uff0c\u65b0\u5efa\u6587\u4ef6 ios::app ofstream, fstream \u5728\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0\uff0c\u4e0d\u5b58\u5728\u5219\u65b0\u5efa ios::ate ifstream \u4ece\u5c3e\u90e8\u53ea\u8bfb ios::trunc ofstream \u5355\u72ec\u4f7f\u7528\uff0c\u540cout ios::binary \u4e09\u4e2a\u7686\u53ef \u5728\u6587\u4ef6\u5c3e\u90e8\u8ffd\u52a0 ios::in|ios::out fstream \u8bfb\u5199\u5b58\u5728\u6587\u4ef6 ios::in|ios::out|ios::trunc \u8bfb\u5199\u6587\u4ef6\uff0c\u5b58\u5728\u6e05\u695a\u5185\u5bb9\uff0c\u4e0d\u5b58\u5728\u65b0\u5efa \u6587\u4ef6\u6253\u5f00\u6a21\u5f0f\u901a\u8fc7 | \u6765\u7ec4\u5408 \u5b9a\u4e49\u6d41\u5bf9\u8c61\u65f6\uff0c\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6253\u5f00 c++ fstream outFile(\"test.txt\", ios::out); \u6ce8\u610f\uff1a\u8981\u5224\u65ad\u6587\u4ef6\u662f\u5426\u6253\u5f00 \u5173\u95ed file.close();","title":"\u4e8c\u3001\u6587\u4ef6\u7684\u6253\u5f00\u4e0e\u5173\u95ed"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_4","text":"\u5199\u5165\u4e0e\u5728\u5c4f\u5e55\u4e0a\u8f93\u51fa\u7c7b\u4f3c\uff0c\u4f7f\u7528\u6d41 #include <fstream> using namespace std; int main(){ fstream outFile(\"text.txt\",ios::out); if(!outFile){ cout << \"open failed\"; exit(0); } outFile << 5 << \"string\" << 1.2; outFile.close(); //\u5173\u95ed\u6587\u4ef6 return 0; }","title":"\u4e09\u3001\u5199\u5165\u6587\u4ef6"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_5","text":"\u540c\u4e0a #include <fstream> using namespace std; int main(){ fstream outFile(\"text.txt\",ios::out); if(!outFile){ cout << \"open failed\"; exit(0); } int data; outFile >> data; outFile.close(); //\u5173\u95ed\u6587\u4ef6 return 0; }","title":"\u56db\u3001\u8bfb\u6587\u4ef6"},{"location":"C%20or%20C%2B%2B/%E6%96%87%E4%BB%B6/#_6","text":"\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f7f\u4e00\u6807\u51c6\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u65b9\u5f0f\u5b58\u50a8\uff0c\u8bfb\u53d6\u6570\u636e\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d \u4f18\u70b9\uff1a \u8282\u7701\u7a7a\u95f4 \u6570\u636e\u89c4\u6574 \u4fbf\u4e8e\u7d22\u5f15 \u6253\u5f00\u65f6\uff0c\u9700\u8981 |ios::binary \u8bfb\u5199\u6587\u4ef6\uff1a \u8bfb\uff1a istream &read(char *buff, int count); \u4f5c\u7528\uff1a\u4ece\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u8bfbcount\u5b57\u8282\uff0c\u5b58\u653e\u5230buff\u4e2d int gcount() \u4f5c\u7528\uff1a\u5f53\u524d\u8bfb\u7684\u5b57\u8282\u6570 \u5199\uff1a ostream &write(char *buff, int count); \u4f5c\u7528\uff1a\u5c06\u4ecebuff\u5f00\u59cb\u7684count\u5b57\u8282\u5199\u5230\u6587\u4ef6\u7684\u5f53\u524d\u4f4d\u7f6e \u7a0b\u5e8f\u793a\u4f8b ```c++ #include #include #include using namespace std; int main(){ fstream file; char msg[] = \"This is a test message\", buf[20]; file.open(\"text.txt\",ios::out|ios::in|ios::trunc|ios::binary); if(!file){ exit(2); } file.write(msg, sizeof(msg)); file.seekp(0,ios::beg); file.read(buf,20); cout << file.gcount() << endl; cout << buf << endl; return 0; } ``` ## \u516d\u3001\u6587\u4ef6\u7684\u5b9a\u4f4d\u64cd\u4f5c \u53d6\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u7684\u65b9\u6cd5 int tellg() //g\u4ee3\u8868get int tellp() //p\u4ee3\u8868put \u6539\u53d8\u6587\u4ef6\u6307\u9488\u7684\u5f53\u524d\u4f4d\u7f6e seekg(int offset, int mode) seekp(int offset, int mode) mode: ios::beg :\u6587\u4ef6\u5f00\u5934 ios::cur :\u5f53\u524d\u4f4d\u7f6e ios::end :\u6587\u4ef6\u7ed3\u5c3e \u5355\u4f4d:\u5b57\u8282","title":"\u4e94\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u8bfb\u5199"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/","text":"\u7ed3\u6784\u4f53 \u4e00\u3001\u679a\u4e3e(enum) \u7528\u6237\u5b9a\u4e49\u7684 \u6570\u636e\u7c7b\u578b enum \u679a\u4e3e\u7c7b\u578b\u540d\u5b57{\u540d0,\u540d1,...,\u540dn}; \u4f7f\u7528\u65f6\uff1a enum \u679a\u4e3e\u7c7b\u578b \u53d8\u91cf\u540d; enum\u5c31\u662fint \u9ed8\u8ba4\u4ece0\u5f00\u59cb\uff0c\u81ea\u52a8+1\uff0c\u53ef\u4e2d\u65ad \u4e8c\u3001\u7ed3\u6784 \u7ed3\u6784\u662f\u4e00\u4e2a\u590d\u5408\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u6570\u636e\u7c7b\u578b \u58f0\u660e ```c //\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\u518d\u5b9a\u4e49\u53d8\u91cf struct point{ int x; int y; }; struct point a,b; //\u4e0d\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\uff0c\u5b9a\u4e49\u53d8\u91cf struct{ int x; int y; }a,b; //\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\u65f6\u5b9a\u4e49\u53d8\u91cf\u3001 struct point{ int x; int y; }a,b; ``` \u5728\u51fd\u6570\u5185\u5916 \u51fd\u6570\u5185\u58f0\u660e\u53ea\u80fd\u5728\u51fd\u6570\u5185\u4f7f\u7528 \u51fd\u6570\u5916\u58f0\u660e\u53ef\u88ab\u591a\u4e2a\u51fd\u6570\u4f7f\u7528 \u7ed3\u6784\u6210\u5458 \u7ed3\u6784\u4e0e\u6570\u7ec4\u7c7b\u4f3c \u7528 \".\" \u8bbf\u95ee\u7ed3\u6784\u91cc\u7684\u6210\u5458 \u7ed3\u6784\u53d8\u91cf.\u7ed3\u6784\u6210\u5458 \u7ed3\u6784\u8fd0\u7b97 \u8981\u8bbf\u95ee\u6574\u4e2a\u7ed3\u6784\uff0c\u76f4\u63a5\u7528\u7ed3\u6784\u53d8\u91cf\u7684\u540d\u5b57 \u5bf9\u4e8e\u6574\u4e2a\u7ed3\u6784\uff0c\u53ef\u4ee5\u505a\u8d4b\u503c\u3001\u53d6\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\u53c2\u6570 p1 = (struct point){5,10} \uff08\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff09 p1 = p2 \u7ed3\u6784\u6307\u9488 \u4e0e\u6570\u7ec4\u4e0d\u540c\uff0c\u7ed3\u6784\u53d8\u91cf\u7684\u540d\u5b57\u5e76\u4e0d\u662f\u5176\u5730\u5740\uff0c\u9700\u8981\u4f7f\u7528&\u8fd0\u7b97\u7b26 struct date *pDate = &today ## \u4e09\u3001\u7ed3\u6784\u4e0e\u51fd\u6570 \u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u6574\u4e2a\u7ed3\u6784\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u7684\u503c\u4f20\u5165\u51fd\u6570 int numberofday(struct date d) \u5b9e\u8d28\uff1a\u5728\u51fd\u6570\u4e2d\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u5e76\u590d\u5236 \u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784 \u8f93\u5165\u7ed3\u6784 \u901a\u8fc7 \u51fd\u6570 \u6765\u8bfb\u5165\u7ed3\u6784 \u65b9\u6848\u4e00\uff1a\u4f20\u5165\u4e00\u4e2a\u521d\u59cb\u7ed3\u6784\uff0c\u5e76\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f\u540e\u5c06\u8fd9\u4e2a\u7ed3\u6784\u8fd4\u56de\u5e76\u8d4b\u503c\u7ed9\u4e00\u4e2a\u7ed3\u6784 c struct point getstruct(void){ struct point temp; scanf(\"%d\",&a.x); scanf(\"%d\",&a.y); return temp; } \u65b9\u6848\u4e8c\uff1a \u6307\u9488 \u4f7f\u7528->\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u7ed3\u6784\u53d8\u91cf\u4e2d\u7684\u6210\u5458 c int main() { struct point y={0,0}; getstruct(&y); } struct point* getstruct(struct point *p) { scanf(\"%d\",&p->x); scanf(\"%d\",&p->y); return *p; } \u5b9e\u4f8b\uff1a\u4e8c\u7ef4\u5750\u6807\u70b9 ```c include struct point{ int x; int y; }; struct point getstruct(struct point ); void output(struct point); void print(const struct point*); int main() { struct point y = {0,0}; getstruct(&y); output(y); output( getstruct(&y)); print(getstruct(&y)); getstruct(&y)->y = 0; getstruct(&y) = (struct point){1,2}; } struct point getstruct(struct point p){ scanf(\"%d\",&p->x); scanf(\"%d\",&p->y); return p; } void output(struct point p){ printf(\"%d\",&p.x); printf(\"%d\",&p.y); } void print(const struct point* p){ printf(\"%d %d\",p->x,p->y); } ``` \u4e09\u3001\u7ed3\u6784\u4e2d\u7684\u7ed3\u6784 \u7ed3\u6784\u6570\u7ec4 c struct date { int year, int month, int day }; struct date dates[]={{2021,11,1},{2021,11,2}}; \u7ed3\u6784\u4e2d\u7684\u7ed3\u6784 ```c struct point{ int x; int y; }; struct rectan{ struct point point1; struct point point2; }; ``` \u5982\u679c\u6709\u53d8\u91cf\u5b9a\u4e49\uff1a struct rectan r,*rp=&r \uff0c\u5219\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\u7b49\u4ef7\uff1a rp.point1.x rp->point1.x (rp.point1).x (rp->point1).x \u56db\u3001\u7c7b\u578b\u5b9a\u4e49 \u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff08typedef\uff09 typedef \u53d8\u91cf\u540d \u60f3\u8981\u7684\u53d8\u91cf\u540d; \u540e\u7eed\u53ef\u901a\u8fc7\u81ea\u884c\u547d\u540d\u7684\u540d\u5b57\u8c03\u7528 \u4e94\u3001\u8054\u5408 union \u8054\u5408\u8d77\u6765\u4f7f\u7528 \u4e00\u4e2a\u7a7a\u95f4 \u540c\u4e00\u4e2a\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u6210\u5458\u6709\u6548 union\u7684 \u5927\u5c0f\u662f\u5176\u6700\u5927\u7684\u6210\u5458 \u521d\u59cb\u5316 \u5bf9\u7b2c\u4e00\u4e2a\u6210\u5458\u521d\u59cb\u5316","title":"\u7ed3\u6784\u4f53"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#_1","text":"","title":"\u7ed3\u6784\u4f53"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#enum","text":"\u7528\u6237\u5b9a\u4e49\u7684 \u6570\u636e\u7c7b\u578b enum \u679a\u4e3e\u7c7b\u578b\u540d\u5b57{\u540d0,\u540d1,...,\u540dn}; \u4f7f\u7528\u65f6\uff1a enum \u679a\u4e3e\u7c7b\u578b \u53d8\u91cf\u540d; enum\u5c31\u662fint \u9ed8\u8ba4\u4ece0\u5f00\u59cb\uff0c\u81ea\u52a8+1\uff0c\u53ef\u4e2d\u65ad","title":"\u4e00\u3001\u679a\u4e3e(enum)"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#_2","text":"\u7ed3\u6784\u662f\u4e00\u4e2a\u590d\u5408\u7684\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u6570\u636e\u7c7b\u578b \u58f0\u660e ```c //\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\u518d\u5b9a\u4e49\u53d8\u91cf struct point{ int x; int y; }; struct point a,b; //\u4e0d\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\uff0c\u5b9a\u4e49\u53d8\u91cf struct{ int x; int y; }a,b; //\u58f0\u660e\u7ed3\u6784\u7c7b\u578b\u540d\u65f6\u5b9a\u4e49\u53d8\u91cf\u3001 struct point{ int x; int y; }a,b; ``` \u5728\u51fd\u6570\u5185\u5916 \u51fd\u6570\u5185\u58f0\u660e\u53ea\u80fd\u5728\u51fd\u6570\u5185\u4f7f\u7528 \u51fd\u6570\u5916\u58f0\u660e\u53ef\u88ab\u591a\u4e2a\u51fd\u6570\u4f7f\u7528 \u7ed3\u6784\u6210\u5458 \u7ed3\u6784\u4e0e\u6570\u7ec4\u7c7b\u4f3c \u7528 \".\" \u8bbf\u95ee\u7ed3\u6784\u91cc\u7684\u6210\u5458 \u7ed3\u6784\u53d8\u91cf.\u7ed3\u6784\u6210\u5458 \u7ed3\u6784\u8fd0\u7b97 \u8981\u8bbf\u95ee\u6574\u4e2a\u7ed3\u6784\uff0c\u76f4\u63a5\u7528\u7ed3\u6784\u53d8\u91cf\u7684\u540d\u5b57 \u5bf9\u4e8e\u6574\u4e2a\u7ed3\u6784\uff0c\u53ef\u4ee5\u505a\u8d4b\u503c\u3001\u53d6\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u4f20\u9012\u7ed9\u51fd\u6570\u53c2\u6570 p1 = (struct point){5,10} \uff08\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\uff09 p1 = p2 \u7ed3\u6784\u6307\u9488 \u4e0e\u6570\u7ec4\u4e0d\u540c\uff0c\u7ed3\u6784\u53d8\u91cf\u7684\u540d\u5b57\u5e76\u4e0d\u662f\u5176\u5730\u5740\uff0c\u9700\u8981\u4f7f\u7528&\u8fd0\u7b97\u7b26 struct date *pDate = &today ## \u4e09\u3001\u7ed3\u6784\u4e0e\u51fd\u6570 \u7ed3\u6784\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u6574\u4e2a\u7ed3\u6784\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u7684\u503c\u4f20\u5165\u51fd\u6570 int numberofday(struct date d) \u5b9e\u8d28\uff1a\u5728\u51fd\u6570\u4e2d\u65b0\u5efa\u4e00\u4e2a\u7ed3\u6784\u53d8\u91cf\uff0c\u5e76\u590d\u5236 \u4e5f\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784 \u8f93\u5165\u7ed3\u6784 \u901a\u8fc7 \u51fd\u6570 \u6765\u8bfb\u5165\u7ed3\u6784 \u65b9\u6848\u4e00\uff1a\u4f20\u5165\u4e00\u4e2a\u521d\u59cb\u7ed3\u6784\uff0c\u5e76\u5904\u7406\uff0c\u5904\u7406\u7ed3\u675f\u540e\u5c06\u8fd9\u4e2a\u7ed3\u6784\u8fd4\u56de\u5e76\u8d4b\u503c\u7ed9\u4e00\u4e2a\u7ed3\u6784 c struct point getstruct(void){ struct point temp; scanf(\"%d\",&a.x); scanf(\"%d\",&a.y); return temp; } \u65b9\u6848\u4e8c\uff1a \u6307\u9488 \u4f7f\u7528->\u8868\u793a\u6307\u9488\u6240\u6307\u7684\u7ed3\u6784\u53d8\u91cf\u4e2d\u7684\u6210\u5458 c int main() { struct point y={0,0}; getstruct(&y); } struct point* getstruct(struct point *p) { scanf(\"%d\",&p->x); scanf(\"%d\",&p->y); return *p; } \u5b9e\u4f8b\uff1a\u4e8c\u7ef4\u5750\u6807\u70b9 ```c","title":"\u4e8c\u3001\u7ed3\u6784"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#include","text":"struct point{ int x; int y; }; struct point getstruct(struct point ); void output(struct point); void print(const struct point*); int main() { struct point y = {0,0}; getstruct(&y); output(y); output( getstruct(&y)); print(getstruct(&y)); getstruct(&y)->y = 0; getstruct(&y) = (struct point){1,2}; } struct point getstruct(struct point p){ scanf(\"%d\",&p->x); scanf(\"%d\",&p->y); return p; } void output(struct point p){ printf(\"%d\",&p.x); printf(\"%d\",&p.y); } void print(const struct point* p){ printf(\"%d %d\",p->x,p->y); } ```","title":"include "},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#_3","text":"\u7ed3\u6784\u6570\u7ec4 c struct date { int year, int month, int day }; struct date dates[]={{2021,11,1},{2021,11,2}}; \u7ed3\u6784\u4e2d\u7684\u7ed3\u6784 ```c struct point{ int x; int y; }; struct rectan{ struct point point1; struct point point2; }; ``` \u5982\u679c\u6709\u53d8\u91cf\u5b9a\u4e49\uff1a struct rectan r,*rp=&r \uff0c\u5219\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\u7b49\u4ef7\uff1a rp.point1.x rp->point1.x (rp.point1).x (rp->point1).x","title":"\u4e09\u3001\u7ed3\u6784\u4e2d\u7684\u7ed3\u6784"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#_4","text":"\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff08typedef\uff09 typedef \u53d8\u91cf\u540d \u60f3\u8981\u7684\u53d8\u91cf\u540d; \u540e\u7eed\u53ef\u901a\u8fc7\u81ea\u884c\u547d\u540d\u7684\u540d\u5b57\u8c03\u7528","title":"\u56db\u3001\u7c7b\u578b\u5b9a\u4e49"},{"location":"C%20or%20C%2B%2B/%E7%BB%93%E6%9E%84%E4%BD%93/#_5","text":"union \u8054\u5408\u8d77\u6765\u4f7f\u7528 \u4e00\u4e2a\u7a7a\u95f4 \u540c\u4e00\u4e2a\u65f6\u95f4\u53ea\u80fd\u6709\u4e00\u4e2a\u6210\u5458\u6709\u6548 union\u7684 \u5927\u5c0f\u662f\u5176\u6700\u5927\u7684\u6210\u5458 \u521d\u59cb\u5316 \u5bf9\u7b2c\u4e00\u4e2a\u6210\u5458\u521d\u59cb\u5316","title":"\u4e94\u3001\u8054\u5408"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/","text":"\u7b2c\u56db\u5468 \u8fdb\u4e00\u6b65\u7684\u5224\u65ad\u4e0e\u5faa\u73af \u4e00\u3001\u903b\u8f91\u8fd0\u7b97 1\u3001bool\u578b #include <stdio.h> #include <stdbool.h> //\u9700\u8981\u8be5\u5e93 int main(void) { bool b = 6 > 5; bool t = true; t = 2; printf(\"%d\\n\", b); return 0; } 2\u3001 \u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b \u7ed3\u679c \uff01 \u975e !a \u5982\u679ca\u662ftrue\u7ed3\u679c\u5c31\u662ffalse\uff0c\u53cd\u4e4b && \u4e0e a && b \u5982\u679ca\u548cb\u90fd\u662ftrue\u5219true || \u6216 a || b \u5176\u4e2d\u4e00\u8005\u771f\u4e3a\u771f \u8868\u8fbex\u2208(4,6) x>4 && x<6 \u8868\u8fbex\u2208[4,6] x>=4 && x<=6 \u5224\u65ad\u5b57\u7b26\u662f\u5426\u662f\u5927\u5199\u5b57\u6bcd a>'A' && a<'Z' \u4f18\u5148\u7ea7\uff1a\uff01> && > || \u82e5\u5de6\u8fb9\u5373\u80fd\u4ea7\u751f\u7ed3\u679c\uff0c\u4e0d\u8fdb\u884c\u53f3\u8fb9\u7684\u8fd0\u7b97 3\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26\u548c\u9017\u53f7\u8fd0\u7b97\u7b26 \u6761\u4ef6\u8fd0\u7b97\u7b26 \uff1a if (count > 20) count = count - 10; else count = count + 10; /*\u76f8\u5f53\u4e8e count = (count > 20)? count - 10 : count + 10; \u4f18\u5148\u7ea7\uff1a\u4ec5\u9ad8\u4e8e\u8d4b\u503c\u8fd0\u7b97\u7b26 \u9017\u53f7\u8fd0\u7b97\u7b26 \uff1a \u4f18\u5148\u7ea7\u4f4e\u4e8e\u4e00\u5207 \u7ed3\u679c\u662f\u9017\u53f7\u540e\u7684 \u4e3b\u8981\u5728for\u51fd\u6570\u4e2d\u4f7f\u7528 for (i=0,j=10;i<j;i++,j--) \u4e8c\u3001\u5d4c\u5957if-else \u65e0\u82b1\u62ec\u53f7\uff0celse\u603b\u662f\u5339\u914d\u6700\u8fd1\u7684\u672a\u5339\u914d\u7684if \u4e09\u3001\u591a\u8def\u5206\u652f switch (\u63a7\u5236\u8868\u8fbe\u5f0f){ //\u8868\u8fbe\u5f0f\u5fc5\u987b\u662fint\u6216char\u7c7b\u578b case \u5e38\u91cf: //\u5fc5\u987b\u662f\u5e38\u91cf \u8bed\u53e5 break; //break\u7ed3\u675f case \u5e38\u91cf: \u8bed\u53e5 default: \u8bed\u53e5 } \u8868\u8fbe\u5f0f\u5fc5\u987b\u662fint\u7c7b\u578b case\u662f\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bed\u53e5\uff0cbreak\u7ed3\u675f\u8bed\u53e5 //switch-case #include <stdio.h> int main(void) { int type; scanf(\"%d\",&type); switch(type){ case 1: printf(\"\u4f60\u597d\"); break; case 2: printf(\"\u65e9\u4e0a\u597d\"); break; case 3: printf(\"\u665a\u4e0a\u597d\"); break; case 4: printf(\"\u518d\u89c1\"); break; default: printf(\"\u554a\uff1f\u4ec0\u4e48\u554a\uff1f\"); } return 0; } \u56db\u3001\u5faa\u73af\u7684\u4f8b\u5b50 \u5faa\u73af\u8ba1\u7b97 //2\u7684\u51e0\u6b21\u65b9 #include <stdio.h> int main(void) { int x,y = 0; scanf(\"%d\",&x); for(;x > 1;x /= 2){ y++; } /* do { y++; x /= 2; } while(x>1); */ printf(\"%d\",y); return 0; } \u786e\u5b9a\u7279\u6b8a\u7684\u503c \u7b97\u5e73\u5747\u6570 #include <stdio.h> int main(void) { int ave, sum, time, num; num = 0, sum = 0, time = 0; while (num != -1){ scanf(\"%d\",&num); sum = sum + num; time ++; } if (num = -1) sum++,time--; ave = sum / time; printf(\"%d %d\",ave,time); return 0; } #include <stdio.h> int main() { int num, sum = 0, time = 0, ave; do{ scanf(\"%d\",&num); if (num != -1){ sum += num; time ++; } } while (num != -1); ave = sum / time; printf(\"%d %d\",ave,time); return 0; } #include <stdio.h> int main() { int num, sum = 0, time = 0, ave; scanf(\"%d\",&num); while (num != -1){ sum += num; time ++; scanf(\"%d\",&num); } ave = sum / time; printf(\"%d %d\",ave,time); return 0; } \u731c\u6570 \u6838\u5fc3\u91cd\u70b9\u662f\u5faa\u73af\u7684\u6761\u4ef6 \u4eba\u4eec\u5f80\u5f80\u4f1a\u8003\u8651\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6 \u5b9e\u9645\u5199\u51fa\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u6587\u5b57\u63cf\u8ff0\u7a0b\u5e8f\u7684\u601d\u8def #include <stdio.h> #include <stdlib.h> //\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f #Inlcude <time.h> //\uff1f\uff1f\uff1f\uff1f\uff1f int main(void) { srand(time(0)); //\uff1f\uff1f\uff1f\uff1f\uff1f int num = rand()%100+1; //\u968f\u673a\u6570 int count = 0, a; do{ scanf(\"%d\",&a); if (a > num){ printf(\"\u5927\u4e86\\n\"); count ++;} else if (a < num){ printf(\"\u5c0f\u4e86\\n\"); count++;} }while (num != a); printf(\"\u731c\u4e2d %d\",count); return 0; } \u6574\u6570\u6c42\u9006 #include <stdio.h> int main() { int a; scanf(\"%d\",&a); int ret = 0; do{ int num = a % 10; ret = ret * 10 + num; //\u903b\u8f91 a /= 10; }while( a > 0); printf(\"%d\",ret); return 0; } \u4e94\u3001\u95ee\u9898 \u5fd8\u4e86\u5927\u62ec\u53f7\uff1a\u6bcf\u6b21\u90fd\u52a0\u4e0a","title":"\u7b2c\u56db\u5468 \u8fdb\u4e00\u6b65\u7684\u5224\u65ad\u4e0e\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#_1","text":"","title":"\u7b2c\u56db\u5468 \u8fdb\u4e00\u6b65\u7684\u5224\u65ad\u4e0e\u5faa\u73af"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#_2","text":"","title":"\u4e00\u3001\u903b\u8f91\u8fd0\u7b97"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#1bool","text":"#include <stdio.h> #include <stdbool.h> //\u9700\u8981\u8be5\u5e93 int main(void) { bool b = 6 > 5; bool t = true; t = 2; printf(\"%d\\n\", b); return 0; }","title":"1\u3001bool\u578b"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#2","text":"\u8fd0\u7b97\u7b26 \u63cf\u8ff0 \u5b9e\u4f8b \u7ed3\u679c \uff01 \u975e !a \u5982\u679ca\u662ftrue\u7ed3\u679c\u5c31\u662ffalse\uff0c\u53cd\u4e4b && \u4e0e a && b \u5982\u679ca\u548cb\u90fd\u662ftrue\u5219true || \u6216 a || b \u5176\u4e2d\u4e00\u8005\u771f\u4e3a\u771f \u8868\u8fbex\u2208(4,6) x>4 && x<6 \u8868\u8fbex\u2208[4,6] x>=4 && x<=6 \u5224\u65ad\u5b57\u7b26\u662f\u5426\u662f\u5927\u5199\u5b57\u6bcd a>'A' && a<'Z' \u4f18\u5148\u7ea7\uff1a\uff01> && > || \u82e5\u5de6\u8fb9\u5373\u80fd\u4ea7\u751f\u7ed3\u679c\uff0c\u4e0d\u8fdb\u884c\u53f3\u8fb9\u7684\u8fd0\u7b97","title":"2\u3001"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#3","text":"\u6761\u4ef6\u8fd0\u7b97\u7b26 \uff1a if (count > 20) count = count - 10; else count = count + 10; /*\u76f8\u5f53\u4e8e count = (count > 20)? count - 10 : count + 10; \u4f18\u5148\u7ea7\uff1a\u4ec5\u9ad8\u4e8e\u8d4b\u503c\u8fd0\u7b97\u7b26 \u9017\u53f7\u8fd0\u7b97\u7b26 \uff1a \u4f18\u5148\u7ea7\u4f4e\u4e8e\u4e00\u5207 \u7ed3\u679c\u662f\u9017\u53f7\u540e\u7684 \u4e3b\u8981\u5728for\u51fd\u6570\u4e2d\u4f7f\u7528 for (i=0,j=10;i<j;i++,j--)","title":"3\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26\u548c\u9017\u53f7\u8fd0\u7b97\u7b26"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#if-else","text":"\u65e0\u82b1\u62ec\u53f7\uff0celse\u603b\u662f\u5339\u914d\u6700\u8fd1\u7684\u672a\u5339\u914d\u7684if","title":"\u4e8c\u3001\u5d4c\u5957if-else"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#_3","text":"switch (\u63a7\u5236\u8868\u8fbe\u5f0f){ //\u8868\u8fbe\u5f0f\u5fc5\u987b\u662fint\u6216char\u7c7b\u578b case \u5e38\u91cf: //\u5fc5\u987b\u662f\u5e38\u91cf \u8bed\u53e5 break; //break\u7ed3\u675f case \u5e38\u91cf: \u8bed\u53e5 default: \u8bed\u53e5 } \u8868\u8fbe\u5f0f\u5fc5\u987b\u662fint\u7c7b\u578b case\u662f\u4ece\u8fd9\u91cc\u5f00\u59cb\u8bed\u53e5\uff0cbreak\u7ed3\u675f\u8bed\u53e5 //switch-case #include <stdio.h> int main(void) { int type; scanf(\"%d\",&type); switch(type){ case 1: printf(\"\u4f60\u597d\"); break; case 2: printf(\"\u65e9\u4e0a\u597d\"); break; case 3: printf(\"\u665a\u4e0a\u597d\"); break; case 4: printf(\"\u518d\u89c1\"); break; default: printf(\"\u554a\uff1f\u4ec0\u4e48\u554a\uff1f\"); } return 0; }","title":"\u4e09\u3001\u591a\u8def\u5206\u652f"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#_4","text":"\u5faa\u73af\u8ba1\u7b97 //2\u7684\u51e0\u6b21\u65b9 #include <stdio.h> int main(void) { int x,y = 0; scanf(\"%d\",&x); for(;x > 1;x /= 2){ y++; } /* do { y++; x /= 2; } while(x>1); */ printf(\"%d\",y); return 0; } \u786e\u5b9a\u7279\u6b8a\u7684\u503c \u7b97\u5e73\u5747\u6570 #include <stdio.h> int main(void) { int ave, sum, time, num; num = 0, sum = 0, time = 0; while (num != -1){ scanf(\"%d\",&num); sum = sum + num; time ++; } if (num = -1) sum++,time--; ave = sum / time; printf(\"%d %d\",ave,time); return 0; } #include <stdio.h> int main() { int num, sum = 0, time = 0, ave; do{ scanf(\"%d\",&num); if (num != -1){ sum += num; time ++; } } while (num != -1); ave = sum / time; printf(\"%d %d\",ave,time); return 0; } #include <stdio.h> int main() { int num, sum = 0, time = 0, ave; scanf(\"%d\",&num); while (num != -1){ sum += num; time ++; scanf(\"%d\",&num); } ave = sum / time; printf(\"%d %d\",ave,time); return 0; } \u731c\u6570 \u6838\u5fc3\u91cd\u70b9\u662f\u5faa\u73af\u7684\u6761\u4ef6 \u4eba\u4eec\u5f80\u5f80\u4f1a\u8003\u8651\u5faa\u73af\u7ec8\u6b62\u7684\u6761\u4ef6 \u5b9e\u9645\u5199\u51fa\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u7528\u6587\u5b57\u63cf\u8ff0\u7a0b\u5e8f\u7684\u601d\u8def #include <stdio.h> #include <stdlib.h> //\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f #Inlcude <time.h> //\uff1f\uff1f\uff1f\uff1f\uff1f int main(void) { srand(time(0)); //\uff1f\uff1f\uff1f\uff1f\uff1f int num = rand()%100+1; //\u968f\u673a\u6570 int count = 0, a; do{ scanf(\"%d\",&a); if (a > num){ printf(\"\u5927\u4e86\\n\"); count ++;} else if (a < num){ printf(\"\u5c0f\u4e86\\n\"); count++;} }while (num != a); printf(\"\u731c\u4e2d %d\",count); return 0; } \u6574\u6570\u6c42\u9006 #include <stdio.h> int main() { int a; scanf(\"%d\",&a); int ret = 0; do{ int num = a % 10; ret = ret * 10 + num; //\u903b\u8f91 a /= 10; }while( a > 0); printf(\"%d\",ret); return 0; }","title":"\u56db\u3001\u5faa\u73af\u7684\u4f8b\u5b50"},{"location":"C%20or%20C%2B%2B/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/#_5","text":"\u5fd8\u4e86\u5927\u62ec\u53f7\uff1a\u6bcf\u6b21\u90fd\u52a0\u4e0a","title":"\u4e94\u3001\u95ee\u9898"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868 \u4e00\u3001\u94fe\u8868\uff08linkedlist\uff09 \u5b9a\u4e49\uff1a\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6309\u9700\u968f\u65f6\u5f00\u8f9f\uff0c\u968f\u65f6\u91ca\u653e \u7531\u7ed3\u70b9\u7ec4\u6210 \u7ed3\u70b9\uff1a \u6570\u636e\u6210\u5458\uff1a\u5b58\u50a8\u6570\u636e \u6307\u9488\u6210\u5458\uff1a\u50a8\u5b58\u4e0b\u4e00\u7ed3\u70b9\u7684\u9996\u5730\u5740 \u5b9a\u4e49\u5f62\u5f0f\uff1a c struct stu_node{ int num; float score; struct stu_node *next; //next\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 }; \u8868\u5934\u7ed3\u70b9\u7684\u5730\u5740\u6700\u4e3a\u91cd\u8981\uff0c\u5e38\u5b9a\u4e49\u4e00\u4e2a\u5934\u6307\u9488\u6765\u5b58\u653e\u8868\u5934\u7ed3\u70b9\u7684\u5730\u5740\uff0c\u7528\u6765\u627e\u5230\u8be5\u94fe\u8868 \u5bf9\u94fe\u8868\u7684\u64cd\u4f5c\uff1a \u5efa\u7acb\u94fe\u8868 \u8f93\u51fa\u94fe\u8868 \u5220\u9664\u7ed3\u70b9 \u63d2\u5165\u7ed3\u70b9 \u4e8c\u3001\u5efa\u7acb\u94fe\u8868 \u9010\u4e2a\u5f00\u8f9f\uff0c\u5e76\u4e14\u5efa\u7acb\u8054\u7cfb \u4e24\u79cd\u65b9\u6cd5\uff1a \u8868\u5c3e\u6dfb\u52a0\u6cd5\uff08\u5e38\u7528\uff09\uff1a \u5c06\u65b0\u7ed3\u70b9\u63d2\u5165\u8868\u5c3e \u7ed3\u70b9\u7684\u6b21\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e00\u81f4 \u8868\u5934\u6dfb\u52a0\u6cd5 \u5c06\u65b0\u7ed3\u70b9\u63d2\u5165\u8868\u5934 \u8282\u70b9\u7684\u6b21\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u76f8\u53cd \u6b65\u9aa4\uff1a \u5efa\u7acb\u5934\u6307\u9488\u53ca\u5934\u7ed3\u70b9\uff08 \u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \uff09 \u5faa\u73af\u8f93\u5165\u6570\u636e\uff0c\u5e76\u8fde\u63a5\u7ed3\u70b9 \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5730\u5740\u57df\u7a7a\u7f6e \u5b9e\u4f8b\uff1a\u5b66\u751f\u7ba1\u7406\u7cfb\u7edf #include <stdio.h> #include <stdlib.h> typedef struct stu_node{ int num; float score; struct stu_node *next; }stu; #define LEN sizeof(struct stu_node) stu * creat(){ //\u65e0\u53c2\u6570 stu *p1 = NULL,*p2 = NULL,*head = NULL; int n; float s; printf(\"\u8bf7\u8f93\u5165\u5b66\u53f7\u548c\u6210\u7ee9\uff08\u8f93\u51650\u65f6\u7ed3\u675f\uff09\\n\"); scanf(\"%d %f\",&n, &s); //\u8bfb\u53d6\u5b66\u53f7\u4e0e\u6210\u7ee9 while(n!=0){ //\u5224\u65ad\u662f\u5426\u7ee7\u7eed p1 = (stu *)malloc(LEN); //\u5f00\u8f9f\u4e00\u5757\u5185\u5b58 p1->num = n; //\u8bfb\u5165\u5b66\u53f7\u548c\u6210\u7ee9 p1->score = s; if(head == NULL) head = p1; //\u5934\u6307\u9488\u4e3a\u7a7a\uff0c\u5219\u6307\u5411\u8868\u5934\u7ed3\u70b9 else p2->next = p1; //\u5934\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u5219p2\u7684\u6307\u9488\u6210\u5458\u6307\u5411p1 p2 = p1; //p2\u6307\u5411\u65b0\u7684\u8868\u5c3e\u7ed3\u70b9 scanf(\"%d %f\",&n,&s); //\u518d\u6b21\u8bfb\u53d6\u6570\u636e } p2->next = NULL; //\u7ed3\u5c3e return head; //\u8fd4\u56de\u5934\u6307\u9488 } \u4e09\u3001\u8f93\u51fa\u94fe\u8868 \u904d\u5386 \u4f7f\u7528 \u901a\u8fc7\u5934\u6307\u9488\u627e\u5230\u94fe\u8868 \u8f93\u51fa\uff0c\u5e76\u5229\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u91cd\u590d2\uff0c\u76f4\u5230\u6307\u9488\u6307\u5411NULL \u5b9e\u4f8b\uff1a\u5b66\u751f\u7ba1\u7406\u7cfb\u7edf void list(stu *head){ stu *p; if(head==NULL)printf(\"\u94fe\u8868\u4e3a\u7a7a\\n\" ); else{ p = head; while (p != NULL){ printf(\"%d,%5.2f\\n\",p->num,p->score); p=p->next; //\u4ee4p\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 } } } void main(){ stu *head; //\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u70b9\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf head = creat(); //\u521b\u5efa\u94fe\u8868 list(head); //\u8f93\u51fa } \u56db\u3001\u5220\u9664\u7ed3\u70b9 \u4e94\u3001\u63d2\u5165\u7ed3\u70b9","title":"\u94fe\u8868"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#_1","text":"","title":"\u94fe\u8868"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#linkedlist","text":"\u5b9a\u4e49\uff1a\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6309\u9700\u968f\u65f6\u5f00\u8f9f\uff0c\u968f\u65f6\u91ca\u653e \u7531\u7ed3\u70b9\u7ec4\u6210 \u7ed3\u70b9\uff1a \u6570\u636e\u6210\u5458\uff1a\u5b58\u50a8\u6570\u636e \u6307\u9488\u6210\u5458\uff1a\u50a8\u5b58\u4e0b\u4e00\u7ed3\u70b9\u7684\u9996\u5730\u5740 \u5b9a\u4e49\u5f62\u5f0f\uff1a c struct stu_node{ int num; float score; struct stu_node *next; //next\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 }; \u8868\u5934\u7ed3\u70b9\u7684\u5730\u5740\u6700\u4e3a\u91cd\u8981\uff0c\u5e38\u5b9a\u4e49\u4e00\u4e2a\u5934\u6307\u9488\u6765\u5b58\u653e\u8868\u5934\u7ed3\u70b9\u7684\u5730\u5740\uff0c\u7528\u6765\u627e\u5230\u8be5\u94fe\u8868 \u5bf9\u94fe\u8868\u7684\u64cd\u4f5c\uff1a \u5efa\u7acb\u94fe\u8868 \u8f93\u51fa\u94fe\u8868 \u5220\u9664\u7ed3\u70b9 \u63d2\u5165\u7ed3\u70b9","title":"\u4e00\u3001\u94fe\u8868\uff08linkedlist\uff09"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#_2","text":"\u9010\u4e2a\u5f00\u8f9f\uff0c\u5e76\u4e14\u5efa\u7acb\u8054\u7cfb \u4e24\u79cd\u65b9\u6cd5\uff1a \u8868\u5c3e\u6dfb\u52a0\u6cd5\uff08\u5e38\u7528\uff09\uff1a \u5c06\u65b0\u7ed3\u70b9\u63d2\u5165\u8868\u5c3e \u7ed3\u70b9\u7684\u6b21\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e00\u81f4 \u8868\u5934\u6dfb\u52a0\u6cd5 \u5c06\u65b0\u7ed3\u70b9\u63d2\u5165\u8868\u5934 \u8282\u70b9\u7684\u6b21\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u76f8\u53cd \u6b65\u9aa4\uff1a \u5efa\u7acb\u5934\u6307\u9488\u53ca\u5934\u7ed3\u70b9\uff08 \u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \uff09 \u5faa\u73af\u8f93\u5165\u6570\u636e\uff0c\u5e76\u8fde\u63a5\u7ed3\u70b9 \u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u5730\u5740\u57df\u7a7a\u7f6e \u5b9e\u4f8b\uff1a\u5b66\u751f\u7ba1\u7406\u7cfb\u7edf #include <stdio.h> #include <stdlib.h> typedef struct stu_node{ int num; float score; struct stu_node *next; }stu; #define LEN sizeof(struct stu_node) stu * creat(){ //\u65e0\u53c2\u6570 stu *p1 = NULL,*p2 = NULL,*head = NULL; int n; float s; printf(\"\u8bf7\u8f93\u5165\u5b66\u53f7\u548c\u6210\u7ee9\uff08\u8f93\u51650\u65f6\u7ed3\u675f\uff09\\n\"); scanf(\"%d %f\",&n, &s); //\u8bfb\u53d6\u5b66\u53f7\u4e0e\u6210\u7ee9 while(n!=0){ //\u5224\u65ad\u662f\u5426\u7ee7\u7eed p1 = (stu *)malloc(LEN); //\u5f00\u8f9f\u4e00\u5757\u5185\u5b58 p1->num = n; //\u8bfb\u5165\u5b66\u53f7\u548c\u6210\u7ee9 p1->score = s; if(head == NULL) head = p1; //\u5934\u6307\u9488\u4e3a\u7a7a\uff0c\u5219\u6307\u5411\u8868\u5934\u7ed3\u70b9 else p2->next = p1; //\u5934\u6307\u9488\u4e0d\u4e3a\u7a7a\uff0c\u5219p2\u7684\u6307\u9488\u6210\u5458\u6307\u5411p1 p2 = p1; //p2\u6307\u5411\u65b0\u7684\u8868\u5c3e\u7ed3\u70b9 scanf(\"%d %f\",&n,&s); //\u518d\u6b21\u8bfb\u53d6\u6570\u636e } p2->next = NULL; //\u7ed3\u5c3e return head; //\u8fd4\u56de\u5934\u6307\u9488 }","title":"\u4e8c\u3001\u5efa\u7acb\u94fe\u8868"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#_3","text":"\u904d\u5386 \u4f7f\u7528 \u901a\u8fc7\u5934\u6307\u9488\u627e\u5230\u94fe\u8868 \u8f93\u51fa\uff0c\u5e76\u5229\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 \u91cd\u590d2\uff0c\u76f4\u5230\u6307\u9488\u6307\u5411NULL \u5b9e\u4f8b\uff1a\u5b66\u751f\u7ba1\u7406\u7cfb\u7edf void list(stu *head){ stu *p; if(head==NULL)printf(\"\u94fe\u8868\u4e3a\u7a7a\\n\" ); else{ p = head; while (p != NULL){ printf(\"%d,%5.2f\\n\",p->num,p->score); p=p->next; //\u4ee4p\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9 } } } void main(){ stu *head; //\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u70b9\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf head = creat(); //\u521b\u5efa\u94fe\u8868 list(head); //\u8f93\u51fa }","title":"\u4e09\u3001\u8f93\u51fa\u94fe\u8868"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#_4","text":"","title":"\u56db\u3001\u5220\u9664\u7ed3\u70b9"},{"location":"C%20or%20C%2B%2B/%E9%93%BE%E8%A1%A8/#_5","text":"","title":"\u4e94\u3001\u63d2\u5165\u7ed3\u70b9"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","text":"\u9762\u5411\u5bf9\u8c61 \u57fa\u672c\u6982\u5ff5 \u5bf9\u8c61\uff1a \u7279\u5f81\uff1a \u5c5e\u6027 \u884c\u4e3a \u7c7b\uff1a\u76f8\u540c\u5c5e\u6027\u548c\u884c\u4e3a\u5bf9\u8c61\u7684\u62bd\u8c61 \u65b9\u6cd5\u548c\u6d88\u606f\uff1a \u5b9e\u73b0\u884c\u4e3a\u7684\u8fc7\u7a0b\u79f0\u4e3a\u65b9\u6cd5 \u5bf9\u8c61\u4e4b\u95f4\u7684\u901a\u8baf\u79f0\u4e3a\u6d88\u606f \u7279\u5f81\uff1a \u62bd\u8c61 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001 \u7c7b\u4e0e\u5bf9\u8c61 \u7c7b\u7684\u5b9a\u4e49 c++ class \u7c7b\u540d\u79f0{ private: \u79c1\u6709\u6570\u636e\u6216\u51fd\u6570\uff08\u901a\u8fc7\u5171\u6709\u51fd\u6570\u8bbf\u95ee/\u53cb\u5143\u51fd\u6570/\u53cb\u5143\u7c7b\uff09 public: \u516c\u7528\u6570\u636e\u6216\u51fd\u6570 protected: \u4fdd\u62a4\u578b\u6570\u636e\u6216\u51fd\u6570(\u4e0e\u7ee7\u627f\u6709\u5173) } \u7f3a\u7701\u53c2\u6570 \u65e0\u76f8\u5e94\u8f93\u5165\u65f6\u5019\u4f1a\u5f15\u7528\u7f3a\u7701\u53c2\u6570 \u7c7b\u7684\u6210\u5458\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u5b9a\u4e49 \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d::\u51fd\u6570\u6210\u5458\u540d (\u53c2\u6570\u8868){} \u53ef\u4ee5\u9644\u5e26\u9ed8\u8ba4\u7684\u5f62\u53c2\u503c\uff08\u7f3a\u7701\u53c2\u6570\uff09 \u4e0d\u540c\u7c7b\u53ef\u4ee5\u62e5\u6709\u540c\u540d\u51fd\u6570 \u5b9a\u4e49\u4e8e\u7c7b\u58f0\u660e\u7684\u51fd\u6570\u5c06\u81ea\u52a8\u8f6c\u5316\u4e3a\u5185\u8054\u51fd\u6570 \u5bf9\u8c61 \u7c7b\u7684\u5b9e\u4f8b\u5316 \u8bf4\u660e\uff1a \u7c7b\u540d \u5bf9\u8c61\u540d \u529f\u80fd \u7ed9\u5bf9\u8c61\u4e00\u4e2a\u6807\u8bc6\u7b26 \u7ed9\u5bf9\u8c61\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4 \u5c06\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u6210\u5458\u521d\u59cb\u5316 \u540c\u4e00\u7c7b\u4e0b\u7684\u4e0d\u540c\u5bf9\u8c61\u4f7f\u7528\u7684\u51fd\u6570\u53ea\u5360\u7528\u4e00\u4e2a\u5185\u5b58\u5757 \u5f15\u7528\uff1a \u5bf9\u8c61\u540d.\u5171\u6709\u6210\u5458\u6570\u636e\uff08\u65b9\u6cd5\uff09 \u6784\u9020\u51fd\u6570\u53ca\u6790\u6784\u51fd\u6570 \u521d\u59cb\u5316\u65b9\u5f0f\u4e0e\u7ed3\u6784\u4f53\u4e0d\u540c\uff0c\u4e0d\u80fd\u4f7f\u7528{}\u6765\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6570\u636e\u90e8\u5206\u662f\u79c1\u6709\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u5bf9\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u7684\u64cd\u4f5c \u6784\u9020\u51fd\u6570 \u5b9a\u4e49\uff1a\u548c\u7c7b\u540c\u540d\u7684\u6210\u5458\u51fd\u6570\u79f0\u4e3a\u6784\u9020\u51fd\u6570 \u4f5c\u7528\uff1a\u4e3a\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316 \u8bf4\u660e\uff1a \u4e0d\u80fd\u6307\u5b9a\u8fd4\u56de\u7c7b\u578b \u7c7b\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff08 \u53ef\u5e26\u6216\u4e0d\u5e26\u53c2\u6570 \uff09 \u6ca1\u6709\u8fdb\u884c\u6784\u9020\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5efa\u7acb\u4e00\u4e2a\u6784\u9020\u51fd\u6570 \u5bf9\u8c61\u521b\u5efa\u65f6\u88ab\u81ea\u52a8\u8c03\u7528 \u53ef\u4ee5\u8fdb\u884c\u91cd\u8f7d\u64cd\u4f5c \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u5b9a\u4e49\uff1a X::X (X &) \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u76f8\u540c\u7684\u5bf9\u8c61 \u8bf4\u660e\uff1a \u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 \u4f7f\u7528\u51fd\u6570\u4f20\u53c2\u6570\u65f6\uff0c\u5373\u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f20\u53c2 \u6790\u6784\u51fd\u6570 \u5b9a\u4e49\uff1a\u4e0e\u7c7b\u540c\u540d\uff0c\u6709\u524d\u7f00 ~ \u4f5c\u7528\uff1a\u7a0b\u5e8f\u7ed3\u675f\u65f6\u81ea\u52a8\u6e05\u7406 \u8bf4\u660e\uff1a \u65e0\u8fd4\u56de\u503c \u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570 \u65e0\u663e\u5f0f\u8bf4\u660e\u65f6\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u4e0d\u505a\u4efb\u4f55\u4e8b\u7684\u9ed8\u8ba4\u6790\u6784\u51fd\u6570\uff08\u51fd\u6570\u4f53\u4e3a\u7a7a\uff09 \u9759\u6001\u6210\u5458 \u9759\u6001\u5c5e\u6027 \u4f7f\u7528static\u58f0\u660e static int a; \u7684\u6210\u5458\uff0c\u4e3a\u6240\u6709\u7684\u5bf9\u8c61\u5171\u6709\uff08\u5c5e\u4e8e\u4e00\u4e2a\u7c7b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u5bf9\u8c61\uff09 \u8bf4\u660e\uff1a \u9759\u6001\u6570\u636e\u6210\u5458\u5177\u6709\u9759\u6001\u751f\u5b58\u671f \u7528\u6cd5\uff1a \u7c7b\u540d::\u6807\u8bc6\u7b26 \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\u4ec5\u4ec5\u5bf9\u9759\u6001\u6210\u5458\u8fdb\u884c\u5f15\u7528\u8bf4\u660e(\u521d\u59cb\u5316\u9700\u8981\u5728\u7c7b\u5916\u5b9a\u4e49) \u9759\u6001\u65b9\u6cd5 \u4f7f\u7528static\u58f0\u660e\u7684\u51fd\u6570\uff0c\u4e3a\u6240\u6709\u5bf9\u8c61\u5171\u6709 \u8bf4\u660e\uff1a \u9759\u6001\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\u540d\u6765\u8c03\u7528\uff08\u4e00\u822c\u51fd\u6570\u4ec5\u80fd\u4f7f\u7528\u5bf9\u8c61\u540d\u6765\u8c03\u7528\uff09 \u9759\u6001\u6210\u5458\u5fc5\u987b\u901a\u8fc7\u5bf9\u8c61\u540d\u6765\u8bbf\u95ee\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458 \u9759\u6001\u6210\u5458\u51fd\u6570\u65e0this\u6307\u9488 this\u6307\u9488 \u6bcf\u4e2a\u51fd\u6570\u90fd\u80fd\u901a\u8fc7this\u6307\u9488 \u8bbf\u95ee\u81ea\u5df1\u7684\u5730\u5740 this->\u6210\u5458 \uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u8c03\u7528\u5bf9\u8c61\uff08\u6216\u5bf9\u8c61\u91cc\u7684\u53e6\u4e00\u4e2a\u51fd\u6570\uff09 \u53cb\u5143\u51fd\u6570\uff08\u7c7b\uff09\u6ca1\u6709this\u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u51fd\u6570\uff08\u7c7b\uff09\u4e0d\u662f\u7c7b\u7684\u6210\u5458 \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5bf9\u8c61\uff1a * \u6307\u9488\u540d = new \u7c7b\u540d \u53cb\u5143 \u53cb\u5143\u7c7b\uff08\u51fd\u6570\uff09\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u7c7b\u7684\u79c1\u6709\u6210\u5458 \u58f0\u660e\u53cb\u5143\u51fd\u6570\uff1a friend \u51fd\u6570\u540d (\u53c2\u6570\u8868) \u58f0\u660e\u53cb\u5143\u7c7b\uff1a friend class \u7c7b\u540d \u58f0\u660e\u53cb\u5143\u7c7b\u4e2d\u7684\u51fd\u6570\uff1a friend \u7c7b\u540d::\u51fd\u6570\u540d (\u53c2\u6570\u8868) \u7ee7\u627f \u6d3e\u751f\u7c7b \u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5c5e\u6027\uff08\u7236\u7c7b\u4e0e\u5b50\u7c7b\uff09 class \u5b50\u7c7b\u540d:\u7ee7\u627f\u65b9\u5f0f \u7236\u7c7b\u540d \u7ee7\u627f\u65b9\u5f0f\uff1a | | public | private | protected | | --------- | --------- | ------- | --------- | | public | public | private | protected | | private | private | private | private | | protected | protected | private | protected | \u591a\u91cd\u7ee7\u627f \u57fa\u7c7b\u540d\u8868\u5927\u4e8e\u7b49\u4e8e\u4e8c\uff08\u57fa\u7c7b\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff09 \u591a\u6001 \u4e00\u4e2a\u63a5\u53e3\uff0c\u591a\u4e2a\u65b9\u6cd5 \u4e24\u79cd\u591a\u6001 \u7f16\u8bd1\u65f6\u591a\u6001\u6027\uff1a\u901a\u8fc7\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\u548c\u53c2\u6570\u6570\u76ee\u8fbe\u5230\u591a\u6001 \u8fd0\u884c\u65f6\u591a\u6001\u6027\uff1a\u865a\u51fd\u6570 \u5173\u952e\u5b57\uff1avirtual(\u5728\u57fa\u7c7b\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21) ```c++ #include using namespace std; class Base{ public: virtual void virtualfun(void){ cout << \"this is base\\n\"; } }; class Derived:public Base{ public: void virtualfun(void){ cout << \"this is derived class\\n\"; } }; int main(){ Base baseobject; Derived derivedobject; baseobject.virtualfun(); derivedobject.virtualfun(); return 0; } ``` \u8bf4\u660e \u865a\u51fd\u6570\u9700\u8981\u66f4\u5927\u7684\u5f00\u9500 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570 \u865a\u51fd\u6570\u53ea\u80fd\u662f\u7c7b\u7684\u6210\u5458 \u5185\u8054\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570 \u91cd\u8f7d \u51fd\u6570\u91cd\u8f7d \u540c\u4e00\u4e2a\u51fd\u6570\u540d\u5b9e\u73b0\u4e0d\u540c\u529f\u80fd\uff08\u7f16\u8bd1\u65f6\u591a\u6001\u6027\uff09 \u64cd\u4f5c\u7b26\u91cd\u8f7d \u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\uff1a\u5355\u76ee\u8fd0\u7b97\u3001\u53cc\u76ee\u8fd0\u7b97\u3001new\u3001delete\u3001\u5f15\u7528\u8fd0\u7b97\u7b26 \u58f0\u660e\u65b9\u5f0f\uff1a \u51fd\u6570\u7c7b\u578b operator \u8fd0\u7b97\u7b26 (\u5f62\u53c2\u8868); ```c++ #include using namespace std; class opre{ public: opre operator ++(void); opre operator ++(int); void display(); opre(); //\u6784\u9020\u51fd\u6570 private: int x; }; opre::opre(){ x = 0; } void opre:: display(){ cout << \"x = \" << x << endl; } opre opre::operator ++(){ opre a; ++x; a.x = x; return a; } opre opre::operator ++(int){ opre a; x++; a.x = x; return a; } int main(){ opre X,Y; X.display(); ++X; Y = ++X; X.display(); Y.display(); return 0; } ``` \u6a21\u677f \u7528\u6765\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u529f\u80fd\u7684\u51fd\u6570 \u5f62\u5f0f: template <typename T> \u51fd\u6570\u5b9a\u4e49: c++ inline T const& Max(T const& a,T const& b){ return a < b ? b : a; } const \u7c7b\u4e2d\u7684const\u6210\u5458\u4e0d\u80fd\u88ab\u6539\u53d8 \u7c7b\u4e2d\u7684const\u51fd\u6570\u4e0d\u80fd\u6539\u53d8\u5176\u4ed6\u5143\u7d20\u7684\u503c \u4ec5\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6216\u6790\u6784\u51fd\u6570\u5bf9const\u6210\u5458\u8fdb\u884c\u521d\u59cb\u5316 \u5e38\u89c1\u7684\u7a0b\u5e8f\u9519\u8bef\uff1a \u8bd5\u56fe\u4fee\u6539const\u5bf9\u8c61 \u8bd5\u56fe\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458 \u8bd5\u56fe\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570 \u8bd5\u56fe\u901a\u8fc7const\u5bf9\u8c61\u4e2d\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_1","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_2","text":"\u5bf9\u8c61\uff1a \u7279\u5f81\uff1a \u5c5e\u6027 \u884c\u4e3a \u7c7b\uff1a\u76f8\u540c\u5c5e\u6027\u548c\u884c\u4e3a\u5bf9\u8c61\u7684\u62bd\u8c61 \u65b9\u6cd5\u548c\u6d88\u606f\uff1a \u5b9e\u73b0\u884c\u4e3a\u7684\u8fc7\u7a0b\u79f0\u4e3a\u65b9\u6cd5 \u5bf9\u8c61\u4e4b\u95f4\u7684\u901a\u8baf\u79f0\u4e3a\u6d88\u606f \u7279\u5f81\uff1a \u62bd\u8c61 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_3","text":"\u7c7b\u7684\u5b9a\u4e49 c++ class \u7c7b\u540d\u79f0{ private: \u79c1\u6709\u6570\u636e\u6216\u51fd\u6570\uff08\u901a\u8fc7\u5171\u6709\u51fd\u6570\u8bbf\u95ee/\u53cb\u5143\u51fd\u6570/\u53cb\u5143\u7c7b\uff09 public: \u516c\u7528\u6570\u636e\u6216\u51fd\u6570 protected: \u4fdd\u62a4\u578b\u6570\u636e\u6216\u51fd\u6570(\u4e0e\u7ee7\u627f\u6709\u5173) } \u7f3a\u7701\u53c2\u6570 \u65e0\u76f8\u5e94\u8f93\u5165\u65f6\u5019\u4f1a\u5f15\u7528\u7f3a\u7701\u53c2\u6570 \u7c7b\u7684\u6210\u5458\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u5b9a\u4e49 \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d::\u51fd\u6570\u6210\u5458\u540d (\u53c2\u6570\u8868){} \u53ef\u4ee5\u9644\u5e26\u9ed8\u8ba4\u7684\u5f62\u53c2\u503c\uff08\u7f3a\u7701\u53c2\u6570\uff09 \u4e0d\u540c\u7c7b\u53ef\u4ee5\u62e5\u6709\u540c\u540d\u51fd\u6570 \u5b9a\u4e49\u4e8e\u7c7b\u58f0\u660e\u7684\u51fd\u6570\u5c06\u81ea\u52a8\u8f6c\u5316\u4e3a\u5185\u8054\u51fd\u6570 \u5bf9\u8c61 \u7c7b\u7684\u5b9e\u4f8b\u5316 \u8bf4\u660e\uff1a \u7c7b\u540d \u5bf9\u8c61\u540d \u529f\u80fd \u7ed9\u5bf9\u8c61\u4e00\u4e2a\u6807\u8bc6\u7b26 \u7ed9\u5bf9\u8c61\u5f00\u8f9f\u5185\u5b58\u7a7a\u95f4 \u5c06\u5bf9\u8c61\u4e2d\u7684\u6570\u636e\u6210\u5458\u521d\u59cb\u5316 \u540c\u4e00\u7c7b\u4e0b\u7684\u4e0d\u540c\u5bf9\u8c61\u4f7f\u7528\u7684\u51fd\u6570\u53ea\u5360\u7528\u4e00\u4e2a\u5185\u5b58\u5757 \u5f15\u7528\uff1a \u5bf9\u8c61\u540d.\u5171\u6709\u6210\u5458\u6570\u636e\uff08\u65b9\u6cd5\uff09","title":"\u7c7b\u4e0e\u5bf9\u8c61"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_4","text":"\u521d\u59cb\u5316\u65b9\u5f0f\u4e0e\u7ed3\u6784\u4f53\u4e0d\u540c\uff0c\u4e0d\u80fd\u4f7f\u7528{}\u6765\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6570\u636e\u90e8\u5206\u662f\u79c1\u6709\u7684\uff0c\u56e0\u6b64\u4f7f\u7528\u6784\u9020\u51fd\u6570\u6765\u5bf9\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316\u7684\u64cd\u4f5c \u6784\u9020\u51fd\u6570 \u5b9a\u4e49\uff1a\u548c\u7c7b\u540c\u540d\u7684\u6210\u5458\u51fd\u6570\u79f0\u4e3a\u6784\u9020\u51fd\u6570 \u4f5c\u7528\uff1a\u4e3a\u5bf9\u8c61\u8fdb\u884c\u521d\u59cb\u5316 \u8bf4\u660e\uff1a \u4e0d\u80fd\u6307\u5b9a\u8fd4\u56de\u7c7b\u578b \u7c7b\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff08 \u53ef\u5e26\u6216\u4e0d\u5e26\u53c2\u6570 \uff09 \u6ca1\u6709\u8fdb\u884c\u6784\u9020\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5efa\u7acb\u4e00\u4e2a\u6784\u9020\u51fd\u6570 \u5bf9\u8c61\u521b\u5efa\u65f6\u88ab\u81ea\u52a8\u8c03\u7528 \u53ef\u4ee5\u8fdb\u884c\u91cd\u8f7d\u64cd\u4f5c \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u5b9a\u4e49\uff1a X::X (X &) \u4f5c\u7528\uff1a\u521b\u5efa\u4e00\u4e2a\u76f8\u540c\u7684\u5bf9\u8c61 \u8bf4\u660e\uff1a \u5bf9\u8c61\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 \u4f7f\u7528\u51fd\u6570\u4f20\u53c2\u6570\u65f6\uff0c\u5373\u901a\u8fc7\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f20\u53c2 \u6790\u6784\u51fd\u6570 \u5b9a\u4e49\uff1a\u4e0e\u7c7b\u540c\u540d\uff0c\u6709\u524d\u7f00 ~ \u4f5c\u7528\uff1a\u7a0b\u5e8f\u7ed3\u675f\u65f6\u81ea\u52a8\u6e05\u7406 \u8bf4\u660e\uff1a \u65e0\u8fd4\u56de\u503c \u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570 \u65e0\u663e\u5f0f\u8bf4\u660e\u65f6\uff0c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u4e0d\u505a\u4efb\u4f55\u4e8b\u7684\u9ed8\u8ba4\u6790\u6784\u51fd\u6570\uff08\u51fd\u6570\u4f53\u4e3a\u7a7a\uff09","title":"\u6784\u9020\u51fd\u6570\u53ca\u6790\u6784\u51fd\u6570"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_5","text":"\u9759\u6001\u5c5e\u6027 \u4f7f\u7528static\u58f0\u660e static int a; \u7684\u6210\u5458\uff0c\u4e3a\u6240\u6709\u7684\u5bf9\u8c61\u5171\u6709\uff08\u5c5e\u4e8e\u4e00\u4e2a\u7c7b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u5bf9\u8c61\uff09 \u8bf4\u660e\uff1a \u9759\u6001\u6570\u636e\u6210\u5458\u5177\u6709\u9759\u6001\u751f\u5b58\u671f \u7528\u6cd5\uff1a \u7c7b\u540d::\u6807\u8bc6\u7b26 \u5728\u7c7b\u7684\u58f0\u660e\u4e2d\u4ec5\u4ec5\u5bf9\u9759\u6001\u6210\u5458\u8fdb\u884c\u5f15\u7528\u8bf4\u660e(\u521d\u59cb\u5316\u9700\u8981\u5728\u7c7b\u5916\u5b9a\u4e49) \u9759\u6001\u65b9\u6cd5 \u4f7f\u7528static\u58f0\u660e\u7684\u51fd\u6570\uff0c\u4e3a\u6240\u6709\u5bf9\u8c61\u5171\u6709 \u8bf4\u660e\uff1a \u9759\u6001\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u7c7b\u540d\u6216\u5bf9\u8c61\u540d\u6765\u8c03\u7528\uff08\u4e00\u822c\u51fd\u6570\u4ec5\u80fd\u4f7f\u7528\u5bf9\u8c61\u540d\u6765\u8c03\u7528\uff09 \u9759\u6001\u6210\u5458\u5fc5\u987b\u901a\u8fc7\u5bf9\u8c61\u540d\u6765\u8bbf\u95ee\u975e\u9759\u6001\u7684\u6570\u636e\u6210\u5458 \u9759\u6001\u6210\u5458\u51fd\u6570\u65e0this\u6307\u9488","title":"\u9759\u6001\u6210\u5458"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#this","text":"\u6bcf\u4e2a\u51fd\u6570\u90fd\u80fd\u901a\u8fc7this\u6307\u9488 \u8bbf\u95ee\u81ea\u5df1\u7684\u5730\u5740 this->\u6210\u5458 \uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u5185\u8c03\u7528\u5bf9\u8c61\uff08\u6216\u5bf9\u8c61\u91cc\u7684\u53e6\u4e00\u4e2a\u51fd\u6570\uff09 \u53cb\u5143\u51fd\u6570\uff08\u7c7b\uff09\u6ca1\u6709this\u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u51fd\u6570\uff08\u7c7b\uff09\u4e0d\u662f\u7c7b\u7684\u6210\u5458 \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5bf9\u8c61\uff1a * \u6307\u9488\u540d = new \u7c7b\u540d","title":"this\u6307\u9488"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_6","text":"\u53cb\u5143\u7c7b\uff08\u51fd\u6570\uff09\u53ef\u4ee5\u8bbf\u95ee\u4e00\u4e2a\u7c7b\u7684\u79c1\u6709\u6210\u5458 \u58f0\u660e\u53cb\u5143\u51fd\u6570\uff1a friend \u51fd\u6570\u540d (\u53c2\u6570\u8868) \u58f0\u660e\u53cb\u5143\u7c7b\uff1a friend class \u7c7b\u540d \u58f0\u660e\u53cb\u5143\u7c7b\u4e2d\u7684\u51fd\u6570\uff1a friend \u7c7b\u540d::\u51fd\u6570\u540d (\u53c2\u6570\u8868)","title":"\u53cb\u5143"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_7","text":"\u6d3e\u751f\u7c7b \u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5c5e\u6027\uff08\u7236\u7c7b\u4e0e\u5b50\u7c7b\uff09 class \u5b50\u7c7b\u540d:\u7ee7\u627f\u65b9\u5f0f \u7236\u7c7b\u540d \u7ee7\u627f\u65b9\u5f0f\uff1a | | public | private | protected | | --------- | --------- | ------- | --------- | | public | public | private | protected | | private | private | private | private | | protected | protected | private | protected | \u591a\u91cd\u7ee7\u627f \u57fa\u7c7b\u540d\u8868\u5927\u4e8e\u7b49\u4e8e\u4e8c\uff08\u57fa\u7c7b\u4e4b\u95f4\u7528\u9017\u53f7\u9694\u5f00\uff09","title":"\u7ee7\u627f"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_8","text":"\u4e00\u4e2a\u63a5\u53e3\uff0c\u591a\u4e2a\u65b9\u6cd5 \u4e24\u79cd\u591a\u6001 \u7f16\u8bd1\u65f6\u591a\u6001\u6027\uff1a\u901a\u8fc7\u4e0d\u540c\u7684\u53c2\u6570\u7c7b\u578b\u548c\u53c2\u6570\u6570\u76ee\u8fbe\u5230\u591a\u6001 \u8fd0\u884c\u65f6\u591a\u6001\u6027\uff1a\u865a\u51fd\u6570 \u5173\u952e\u5b57\uff1avirtual(\u5728\u57fa\u7c7b\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21) ```c++ #include using namespace std; class Base{ public: virtual void virtualfun(void){ cout << \"this is base\\n\"; } }; class Derived:public Base{ public: void virtualfun(void){ cout << \"this is derived class\\n\"; } }; int main(){ Base baseobject; Derived derivedobject; baseobject.virtualfun(); derivedobject.virtualfun(); return 0; } ``` \u8bf4\u660e \u865a\u51fd\u6570\u9700\u8981\u66f4\u5927\u7684\u5f00\u9500 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570 \u865a\u51fd\u6570\u53ea\u80fd\u662f\u7c7b\u7684\u6210\u5458 \u5185\u8054\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570","title":"\u591a\u6001"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_9","text":"\u51fd\u6570\u91cd\u8f7d \u540c\u4e00\u4e2a\u51fd\u6570\u540d\u5b9e\u73b0\u4e0d\u540c\u529f\u80fd\uff08\u7f16\u8bd1\u65f6\u591a\u6001\u6027\uff09 \u64cd\u4f5c\u7b26\u91cd\u8f7d \u53ef\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\uff1a\u5355\u76ee\u8fd0\u7b97\u3001\u53cc\u76ee\u8fd0\u7b97\u3001new\u3001delete\u3001\u5f15\u7528\u8fd0\u7b97\u7b26 \u58f0\u660e\u65b9\u5f0f\uff1a \u51fd\u6570\u7c7b\u578b operator \u8fd0\u7b97\u7b26 (\u5f62\u53c2\u8868); ```c++ #include using namespace std; class opre{ public: opre operator ++(void); opre operator ++(int); void display(); opre(); //\u6784\u9020\u51fd\u6570 private: int x; }; opre::opre(){ x = 0; } void opre:: display(){ cout << \"x = \" << x << endl; } opre opre::operator ++(){ opre a; ++x; a.x = x; return a; } opre opre::operator ++(int){ opre a; x++; a.x = x; return a; } int main(){ opre X,Y; X.display(); ++X; Y = ++X; X.display(); Y.display(); return 0; } ```","title":"\u91cd\u8f7d"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_10","text":"\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u529f\u80fd\u7684\u51fd\u6570 \u5f62\u5f0f: template <typename T> \u51fd\u6570\u5b9a\u4e49: c++ inline T const& Max(T const& a,T const& b){ return a < b ? b : a; }","title":"\u6a21\u677f"},{"location":"C%20or%20C%2B%2B/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#const","text":"\u7c7b\u4e2d\u7684const\u6210\u5458\u4e0d\u80fd\u88ab\u6539\u53d8 \u7c7b\u4e2d\u7684const\u51fd\u6570\u4e0d\u80fd\u6539\u53d8\u5176\u4ed6\u5143\u7d20\u7684\u503c \u4ec5\u53ef\u4ee5\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6216\u6790\u6784\u51fd\u6570\u5bf9const\u6210\u5458\u8fdb\u884c\u521d\u59cb\u5316 \u5e38\u89c1\u7684\u7a0b\u5e8f\u9519\u8bef\uff1a \u8bd5\u56fe\u4fee\u6539const\u5bf9\u8c61 \u8bd5\u56fe\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u4fee\u6539\u5bf9\u8c61\u7684\u6570\u636e\u6210\u5458 \u8bd5\u56fe\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570 \u8bd5\u56fe\u901a\u8fc7const\u5bf9\u8c61\u4e2d\u8c03\u7528\u975econst\u6210\u5458\u51fd\u6570","title":"const"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/","text":"\u7b2c\u4e09\u7ae0 \u6570\u636e\u548cC getchar() ? ? ? ? C\u8bed\u8a00\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b \u4e00\u3001int \u663e\u793a\u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236 \u5341\u8fdb\u5236\uff1a%d \u516b\u8fdb\u5236\uff1a%o \u5341\u516d\u8fdb\u5236\uff1a%x \u82e5\u663e\u793a\u524d\u7f00\uff0c\u5206\u522b\u4f7f\u7528\uff1a \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 %#o %#x / %#X #include <stdio.h> int main(void) { int x = 100; printf(\"dec = %d; octal = %o; hex = %x\\n\",x,x,x); printf(\"dec = %d; octal = %#o; hex = %#x\\n\",x,x,x); return 0; } \u524d\u7f00 \u7c7b\u578b \u5341\u8fdb\u5236 \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 short %hd %ho %hx unsigned %u long %ld long long %lld \u4e8c\u3001char \u8f6c\u4e49\u5e8f\u5217 \u8f6c\u4e49\u5e8f\u5217 \u542b\u4e49 \\a \u8b66\u62a5 \\b \u9000\u683c\uff08backspace\uff09 \\f \u6362\u9875 \\n \u6362\u884c \\r \u56de\u8f66 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\v \u5782\u76f4\u5236\u8868\u7b26 \\\\ \u53cd\u659c\u6760 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\? \u95ee\u53f7 \\0oo \u516b\u8fdb\u5236\u503c\uff08oo\u5fc5\u987b\u662f\u6709\u6548\u7684\u516b\u8fdb\u5236\u6570\uff09 \\xhh \u5341\u516d\u8fdb\u5236\u6570\uff08hh\u5fc5\u987b\u662f\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\uff09 \u4e09\u3001\u53ef\u79fb\u690d\u7c7b\u578b\uff1astdint.h\u548cinttypes.h","title":"\u7b2c\u4e09\u7ae0 \u6570\u636e\u548cC"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/#c","text":"getchar() ? ? ? ?","title":"\u7b2c\u4e09\u7ae0 \u6570\u636e\u548cC"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/#c_1","text":"","title":"C\u8bed\u8a00\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/#int","text":"\u663e\u793a\u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236 \u5341\u8fdb\u5236\uff1a%d \u516b\u8fdb\u5236\uff1a%o \u5341\u516d\u8fdb\u5236\uff1a%x \u82e5\u663e\u793a\u524d\u7f00\uff0c\u5206\u522b\u4f7f\u7528\uff1a \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 %#o %#x / %#X #include <stdio.h> int main(void) { int x = 100; printf(\"dec = %d; octal = %o; hex = %x\\n\",x,x,x); printf(\"dec = %d; octal = %#o; hex = %#x\\n\",x,x,x); return 0; } \u524d\u7f00 \u7c7b\u578b \u5341\u8fdb\u5236 \u516b\u8fdb\u5236 \u5341\u516d\u8fdb\u5236 short %hd %ho %hx unsigned %u long %ld long long %lld","title":"\u4e00\u3001int"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/#char","text":"\u8f6c\u4e49\u5e8f\u5217 \u8f6c\u4e49\u5e8f\u5217 \u542b\u4e49 \\a \u8b66\u62a5 \\b \u9000\u683c\uff08backspace\uff09 \\f \u6362\u9875 \\n \u6362\u884c \\r \u56de\u8f66 \\t \u6c34\u5e73\u5236\u8868\u7b26 \\v \u5782\u76f4\u5236\u8868\u7b26 \\\\ \u53cd\u659c\u6760 \\' \u5355\u5f15\u53f7 \\\" \u53cc\u5f15\u53f7 \\? \u95ee\u53f7 \\0oo \u516b\u8fdb\u5236\u503c\uff08oo\u5fc5\u987b\u662f\u6709\u6548\u7684\u516b\u8fdb\u5236\u6570\uff09 \\xhh \u5341\u516d\u8fdb\u5236\u6570\uff08hh\u5fc5\u987b\u662f\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\uff09","title":"\u4e8c\u3001char"},{"location":"C%20or%20C%2B%2B/C%20Primer%20Plus/%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%92%8CC/#stdinthinttypesh","text":"","title":"\u4e09\u3001\u53ef\u79fb\u690d\u7c7b\u578b\uff1astdint.h\u548cinttypes.h"},{"location":"HTML/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","text":"\u57fa\u672c\u8bed\u6cd5","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"HTML/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/#_1","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"Java/%E5%9F%BA%E7%A1%80/Arrays%E7%B1%BB/","text":"Arrays\u7c7b \u5e38\u7528\u529f\u80fd\uff1a \u7ed9\u6570\u7ec4\u8d4b\u503c\uff1a fill \u5bf9\u6570\u7ec4\u6392\u5e8f\uff1a sort \u6bd4\u8f83\u6570\u7ec4\uff1a equals \u67e5\u627e\u6570\u7ec4\u5143\u7d20\uff1a binarySearch \u7a00\u758f\u6570\u7ec4 \u5904\u7406\u65b9\u5f0f \u8bb0\u5f55\u6570\u7ec4\u4e00\u5171\u6709\u51e0\u884c\u51e0\u5217\uff0c\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u503c \u5427\u5177\u6709\u4e0d\u540c\u503c\u7684\u5143\u7d20\u548c\u884c\u5217\u53ca\u503c\u8bb0\u5f55\u5728\u4e00\u4e2a\u5c0f\u89c4\u6a21\u7684\u6570\u7ec4\u4e2d\uff0c\u4ece\u800c\u7f29\u5c0f\u7a0b\u5e8f\u7684\u89c4\u6a21","title":"Arrays\u7c7b"},{"location":"Java/%E5%9F%BA%E7%A1%80/Arrays%E7%B1%BB/#arrays","text":"","title":"Arrays\u7c7b"},{"location":"Java/%E5%9F%BA%E7%A1%80/Arrays%E7%B1%BB/#_1","text":"\u7ed9\u6570\u7ec4\u8d4b\u503c\uff1a fill \u5bf9\u6570\u7ec4\u6392\u5e8f\uff1a sort \u6bd4\u8f83\u6570\u7ec4\uff1a equals \u67e5\u627e\u6570\u7ec4\u5143\u7d20\uff1a binarySearch","title":"\u5e38\u7528\u529f\u80fd\uff1a"},{"location":"Java/%E5%9F%BA%E7%A1%80/Arrays%E7%B1%BB/#_2","text":"\u5904\u7406\u65b9\u5f0f \u8bb0\u5f55\u6570\u7ec4\u4e00\u5171\u6709\u51e0\u884c\u51e0\u5217\uff0c\u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u503c \u5427\u5177\u6709\u4e0d\u540c\u503c\u7684\u5143\u7d20\u548c\u884c\u5217\u53ca\u503c\u8bb0\u5f55\u5728\u4e00\u4e2a\u5c0f\u89c4\u6a21\u7684\u6570\u7ec4\u4e2d\uff0c\u4ece\u800c\u7f29\u5c0f\u7a0b\u5e8f\u7684\u89c4\u6a21","title":"\u7a00\u758f\u6570\u7ec4"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/","text":"Java \u6d41(Stream)\u3001\u6587\u4ef6(File)\u548cIO \u4e00\u3001IO Java.io\u5305\u51e0\u4e4e\u5305\u542b\u4e86\u6240\u6709\u64cd\u4f5c\u8f93\u5165\u8f93\u51fa\u7684\u7c7b \u652f\u6301\u7684\u683c\u5f0f\uff1a\u57fa\u672c\u7c7b\u578b\u3001\u5bf9\u8c61\u3001\u672c\u5730\u5316\u5b57\u7b26\u96c6 \u4e8c\u3001BufferedReader(\u4ece\u63a7\u5236\u53f0\u8bfb\u53d6\u5b57\u7b26\u4e32) \u521b\u5efa BufferedReader \u7684\u57fa\u672c\u8bed\u6cd5\uff1a BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); \u5e38\u7528\u65b9\u6cd5 int read() throws IOException \uff1a\u8bfb\u53d6int\u957f\u5ea6 String readLine() throws IOException \uff1a\u8bfb\u53d6\u4e00\u884c\u5b57\u7b26 \u4e09\u3001\u8bfb\u5199\u6587\u4ef6 \u4e24\u4e2a\u91cd\u8981\u6d41\uff1a FileInputStream FileOutputStream FileInputStream \u6784\u9020\u65b9\u6cd5\uff1a InputStream f = new FileInputStream(\"\u6587\u4ef6\u8def\u5f84\") \u5148\u4f7f\u7528\u4e00\u4e2aFile\u5bf9\u8c61 java File f = new File(\"\u6587\u4ef6\u8def\u5f84\"); InputStream in = new File InputStream(f); \u65b9\u6cd5\uff1a void close() throws IOException void finalize() throws IOException int read(int r) throws IOException \uff1a\u8bfb\u5165r\u5b57\u8282\u6570\u7684\u6570\u636e\uff0c\u8fd4\u56de\u4e0b\u4e00\u5b57\u8282\u6570\u636e\uff0c\u5982\u679c\u5df2\u7ecf\u5230\u7ed3\u5c3e\u5219\u8fd4\u56de-1 int read(byte[] r) throws IOException \uff1a\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6r.length\u957f\u5ea6\u7684\u5b57\u8282\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u662f\u6587\u4ef6\u7ed3\u5c3e\u5219\u8fd4\u56de-1 int avaliable() throws IOException \uff1a\u8fd4\u56de\u4e0b\u4e00\u6b21\u5bf9\u6b64\u8f93\u5165\u6d41\u8c03\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u4e0d\u53d7\u963b\u585e\u7684\u4ece\u6b64\u8f93\u5165\u6d41\u8bfb\u53d6\u7684\u5b57\u8282\u6570 FileOutputStream \u6784\u9020\u65b9\u6cd5\u7c7b\u4f3c \u5982\u679c\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u81ea\u52a8\u521b\u5efa \u65b9\u6cd5\u4e5f\u7c7b\u4f3c\uff08read\u53d8write\uff09 \u56db\u3001\u6587\u4ef6\u5b57\u8282\u8f93\u5165\u6d41 \u56db\u4e2a\u57fa\u672c\u6b65\u9aa4 \u8bbe\u5b9a\u8f93\u5165\u6d41\u7684\u6e90 \u521b\u5efa\u6307\u5411\u6e90\u7684\u8f93\u5165\u6d41 \u8ba9\u8f93\u5165\u6d41\u8bfb\u53d6\u6e90\u4e2d\u7684\u6570\u636e \u5173\u95ed\u8f93\u5165\u6d41 \u56db\u3001\u5b9e\u4f8b","title":"Java \u6d41(Stream)\u3001\u6587\u4ef6(File)\u548cIO"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#java-streamfileio","text":"","title":"Java \u6d41(Stream)\u3001\u6587\u4ef6(File)\u548cIO"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#io","text":"Java.io\u5305\u51e0\u4e4e\u5305\u542b\u4e86\u6240\u6709\u64cd\u4f5c\u8f93\u5165\u8f93\u51fa\u7684\u7c7b \u652f\u6301\u7684\u683c\u5f0f\uff1a\u57fa\u672c\u7c7b\u578b\u3001\u5bf9\u8c61\u3001\u672c\u5730\u5316\u5b57\u7b26\u96c6","title":"\u4e00\u3001IO"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#bufferedreader","text":"\u521b\u5efa BufferedReader \u7684\u57fa\u672c\u8bed\u6cd5\uff1a BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); \u5e38\u7528\u65b9\u6cd5 int read() throws IOException \uff1a\u8bfb\u53d6int\u957f\u5ea6 String readLine() throws IOException \uff1a\u8bfb\u53d6\u4e00\u884c\u5b57\u7b26","title":"\u4e8c\u3001BufferedReader(\u4ece\u63a7\u5236\u53f0\u8bfb\u53d6\u5b57\u7b26\u4e32)"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#_1","text":"\u4e24\u4e2a\u91cd\u8981\u6d41\uff1a FileInputStream FileOutputStream FileInputStream \u6784\u9020\u65b9\u6cd5\uff1a InputStream f = new FileInputStream(\"\u6587\u4ef6\u8def\u5f84\") \u5148\u4f7f\u7528\u4e00\u4e2aFile\u5bf9\u8c61 java File f = new File(\"\u6587\u4ef6\u8def\u5f84\"); InputStream in = new File InputStream(f); \u65b9\u6cd5\uff1a void close() throws IOException void finalize() throws IOException int read(int r) throws IOException \uff1a\u8bfb\u5165r\u5b57\u8282\u6570\u7684\u6570\u636e\uff0c\u8fd4\u56de\u4e0b\u4e00\u5b57\u8282\u6570\u636e\uff0c\u5982\u679c\u5df2\u7ecf\u5230\u7ed3\u5c3e\u5219\u8fd4\u56de-1 int read(byte[] r) throws IOException \uff1a\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6r.length\u957f\u5ea6\u7684\u5b57\u8282\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u662f\u6587\u4ef6\u7ed3\u5c3e\u5219\u8fd4\u56de-1 int avaliable() throws IOException \uff1a\u8fd4\u56de\u4e0b\u4e00\u6b21\u5bf9\u6b64\u8f93\u5165\u6d41\u8c03\u7528\u7684\u65b9\u6cd5\u53ef\u4ee5\u4e0d\u53d7\u963b\u585e\u7684\u4ece\u6b64\u8f93\u5165\u6d41\u8bfb\u53d6\u7684\u5b57\u8282\u6570 FileOutputStream \u6784\u9020\u65b9\u6cd5\u7c7b\u4f3c \u5982\u679c\u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u81ea\u52a8\u521b\u5efa \u65b9\u6cd5\u4e5f\u7c7b\u4f3c\uff08read\u53d8write\uff09","title":"\u4e09\u3001\u8bfb\u5199\u6587\u4ef6"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#_2","text":"","title":"\u56db\u3001\u6587\u4ef6\u5b57\u8282\u8f93\u5165\u6d41"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#_3","text":"\u8bbe\u5b9a\u8f93\u5165\u6d41\u7684\u6e90 \u521b\u5efa\u6307\u5411\u6e90\u7684\u8f93\u5165\u6d41 \u8ba9\u8f93\u5165\u6d41\u8bfb\u53d6\u6e90\u4e2d\u7684\u6570\u636e \u5173\u95ed\u8f93\u5165\u6d41","title":"\u56db\u4e2a\u57fa\u672c\u6b65\u9aa4"},{"location":"Java/%E5%9F%BA%E7%A1%80/Java%20%E6%B5%81%28Stream%29%E3%80%81%E6%96%87%E4%BB%B6%28File%29%E5%92%8CIO/#_4","text":"","title":"\u56db\u3001\u5b9e\u4f8b"},{"location":"Java/%E5%9F%BA%E7%A1%80/JavaDoc/","text":"JavaDoc javadoc\u547d\u4ee4\u662f\u7528\u6765\u751f\u6210\u81ea\u5df1\u7684doc\u6587\u6863 \u6ce8\u91ca\u4e66\u5199\u65b9\u5f0f\uff1a/* / \u53c2\u6570\u4fe1\u606f @author \u4f5c\u8005\u540d @version \u7248\u672c\u53f7 @since \u6307\u660e\u9700\u8981\u6700\u65e9\u4f7f\u7528\u7684jdk\u7248\u672c @param \u53c2\u6570\u540d @return \u8fd4\u56de\u503c\u60c5\u51b5 @throws \u5f02\u5e38\u629b\u51fa\u60c5\u51b5","title":"JavaDoc"},{"location":"Java/%E5%9F%BA%E7%A1%80/JavaDoc/#javadoc","text":"javadoc\u547d\u4ee4\u662f\u7528\u6765\u751f\u6210\u81ea\u5df1\u7684doc\u6587\u6863 \u6ce8\u91ca\u4e66\u5199\u65b9\u5f0f\uff1a/* / \u53c2\u6570\u4fe1\u606f @author \u4f5c\u8005\u540d @version \u7248\u672c\u53f7 @since \u6307\u660e\u9700\u8981\u6700\u65e9\u4f7f\u7528\u7684jdk\u7248\u672c @param \u53c2\u6570\u540d @return \u8fd4\u56de\u503c\u60c5\u51b5 @throws \u5f02\u5e38\u629b\u51fa\u60c5\u51b5","title":"JavaDoc"},{"location":"Java/%E5%9F%BA%E7%A1%80/Scanner%E5%AF%B9%E8%B1%A1/","text":"Scanner\u5bf9\u8c61 \u4e00\u3001Scanner\u5bf9\u8c61 \u901a\u8fc7Scanner\u7c7b\u6765\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165 \u57fa\u672c\u8bed\u6cd5\uff1a Scanner s = new Scanner(System.in); \u901a\u8fc7Scanner\u7c7b\u7684 next() \u4e0e nextLine() \u65b9\u6cd5\u83b7\u53d6\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c \u5728\u8bfb\u53d6\u524d\u6211\u4eec\u4e00\u822c\u9700\u8981\u4f7f\u7528 hasNext() \u4e0e hasNextLine() \u5224\u65ad\u662f\u5426\u8fd8\u6709\u8f93\u5165\u7684\u6570\u636e public class scanner\u65b9\u6cd5 { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"\u4f7f\u7528next\u65b9\u6cd5\u63a5\u63a5\u53d7\"); //\u5224\u65ad\u7528\u6237\u6709\u6ca1\u6709\u8f93\u5165\u5b57\u7b26\u4e32 if(scanner.hasNext()){ String str = scanner.next(); System.out.println(\"\u8f93\u5165\u7684\u5185\u5bb9\u4e3a\" + str); } else{ System.out.println(\"\u7528\u6237\u6ca1\u6709\u8f93\u5165\") } //\u51e1\u662fIO\u6d41\u7684\u7c7b\u5982\u679c\u4e0d\u5173\u95ed\u5c31\u4f1a\u4e00\u76f4\u5360\u7528\u8d44\u6e90 scanner.close(); } } \u4e24\u79cd\u8f93\u5165\u65b9\u5f0f\u7684\u533a\u522b next(): \u4e00\u5b9a\u8981\u8bfb\u53d6\u5230\u6709\u6548\u5b57\u7b26\u540e\u624d\u53ef\u4ee5\u7ed3\u675f\u8f93\u5165 \u5bf9\u8f93\u5165\u6709\u6548\u5b57\u7b26\u4e4b\u524d\u9047\u5230\u7684\u7a7a\u767d\uff0cnext()\u65b9\u6cd5\u4f1a\u5c06\u5176\u81ea\u52a8\u53bb\u6389 \u53ea\u6709\u8f93\u5165\u6709\u6548\u5b57\u7b26\u540e\u624d\u5c06\u5176\u540e\u9762\u8f93\u5165\u7684\u7a7a\u767d\u4f5c\u4e3a\u5206\u9694\u7b26\u6216\u8005\u7ed3\u675f\u7b26 next()\u4e0d\u80fd\u5f97\u5230\u5e26\u6709\u7a7a\u683c\u7684\u5b57\u7b26\u4e32 nextLine(): \u4ee5Enter\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u53ef\u4ee5\u8bfb\u53d6\u4e00\u884c\u6587\u672c \u53ef\u4ee5\u83b7\u5f97\u7a7a\u767d \u4e8c\u3001Scanner\u8fdb\u9636\u4f7f\u7528 Scanner\u5bf9\u8c61\u540d.hasNext\u6570\u636e\u7c7b\u578b","title":"Scanner\u5bf9\u8c61"},{"location":"Java/%E5%9F%BA%E7%A1%80/Scanner%E5%AF%B9%E8%B1%A1/#scanner","text":"","title":"Scanner\u5bf9\u8c61"},{"location":"Java/%E5%9F%BA%E7%A1%80/Scanner%E5%AF%B9%E8%B1%A1/#scanner_1","text":"\u901a\u8fc7Scanner\u7c7b\u6765\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165 \u57fa\u672c\u8bed\u6cd5\uff1a Scanner s = new Scanner(System.in); \u901a\u8fc7Scanner\u7c7b\u7684 next() \u4e0e nextLine() \u65b9\u6cd5\u83b7\u53d6\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c \u5728\u8bfb\u53d6\u524d\u6211\u4eec\u4e00\u822c\u9700\u8981\u4f7f\u7528 hasNext() \u4e0e hasNextLine() \u5224\u65ad\u662f\u5426\u8fd8\u6709\u8f93\u5165\u7684\u6570\u636e public class scanner\u65b9\u6cd5 { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"\u4f7f\u7528next\u65b9\u6cd5\u63a5\u63a5\u53d7\"); //\u5224\u65ad\u7528\u6237\u6709\u6ca1\u6709\u8f93\u5165\u5b57\u7b26\u4e32 if(scanner.hasNext()){ String str = scanner.next(); System.out.println(\"\u8f93\u5165\u7684\u5185\u5bb9\u4e3a\" + str); } else{ System.out.println(\"\u7528\u6237\u6ca1\u6709\u8f93\u5165\") } //\u51e1\u662fIO\u6d41\u7684\u7c7b\u5982\u679c\u4e0d\u5173\u95ed\u5c31\u4f1a\u4e00\u76f4\u5360\u7528\u8d44\u6e90 scanner.close(); } } \u4e24\u79cd\u8f93\u5165\u65b9\u5f0f\u7684\u533a\u522b next(): \u4e00\u5b9a\u8981\u8bfb\u53d6\u5230\u6709\u6548\u5b57\u7b26\u540e\u624d\u53ef\u4ee5\u7ed3\u675f\u8f93\u5165 \u5bf9\u8f93\u5165\u6709\u6548\u5b57\u7b26\u4e4b\u524d\u9047\u5230\u7684\u7a7a\u767d\uff0cnext()\u65b9\u6cd5\u4f1a\u5c06\u5176\u81ea\u52a8\u53bb\u6389 \u53ea\u6709\u8f93\u5165\u6709\u6548\u5b57\u7b26\u540e\u624d\u5c06\u5176\u540e\u9762\u8f93\u5165\u7684\u7a7a\u767d\u4f5c\u4e3a\u5206\u9694\u7b26\u6216\u8005\u7ed3\u675f\u7b26 next()\u4e0d\u80fd\u5f97\u5230\u5e26\u6709\u7a7a\u683c\u7684\u5b57\u7b26\u4e32 nextLine(): \u4ee5Enter\u4f5c\u4e3a\u7ed3\u675f\u7b26\uff0c\u53ef\u4ee5\u8bfb\u53d6\u4e00\u884c\u6587\u672c \u53ef\u4ee5\u83b7\u5f97\u7a7a\u767d","title":"\u4e00\u3001Scanner\u5bf9\u8c61"},{"location":"Java/%E5%9F%BA%E7%A1%80/Scanner%E5%AF%B9%E8%B1%A1/#scanner_2","text":"Scanner\u5bf9\u8c61\u540d.hasNext\u6570\u636e\u7c7b\u578b","title":"\u4e8c\u3001Scanner\u8fdb\u9636\u4f7f\u7528"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%8C%85%E6%9C%BA%E5%88%B6/","text":"\u5305\u673a\u5236 \u683c\u5f0f\uff1a pack1.pack2.pack3 \u4f5c\u7528\uff1a \u672c\u8d28\uff1a\u6587\u4ef6\u5939 \u4e00\u822c\u5229\u7528\u516c\u53f8\u57df\u540d\u5012\u7f6e\u4f5c\u4e3a\u5305\u540d \u4f7f\u7528 import \u5f15\u7528\u5176\u4ed6\u5305 \u4f7f\u7528*\u5bfc\u5165\u8fd9\u4e2a\u5305\u4e0b\u7684\u6240\u6709\u5305","title":"\u5305\u673a\u5236"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%8C%85%E6%9C%BA%E5%88%B6/#_1","text":"\u683c\u5f0f\uff1a pack1.pack2.pack3 \u4f5c\u7528\uff1a \u672c\u8d28\uff1a\u6587\u4ef6\u5939 \u4e00\u822c\u5229\u7528\u516c\u53f8\u57df\u540d\u5012\u7f6e\u4f5c\u4e3a\u5305\u540d \u4f7f\u7528 import \u5f15\u7528\u5176\u4ed6\u5305 \u4f7f\u7528*\u5bfc\u5165\u8fd9\u4e2a\u5305\u4e0b\u7684\u6240\u6709\u5305","title":"\u5305\u673a\u5236"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/","text":"\u5f02\u5e38 \u4e00\u3001\u4ec0\u4e48\u662f\u5f02\u5e38 \u5206\u7c7b \u68c0\u67e5\u6027\u5f02\u5e38 \u8fd0\u884c\u65f6\u5f02\u5e38 \u4e8c\u3001\u5f02\u5e38\u4f53\u7cfb\u7ed3\u6784 java\u4e2d\u628a\u5f02\u5e38\u5f53\u4f5c\u5bf9\u8c61\u6765\u5904\u7406\uff0c\u5e76\u5b9a\u4e49\u4e86\u4e00\u4e2a\u57fa\u7c7b java.lang.Throwable \u4f5c\u4e3a\u6240\u6709\u5f02\u5e38\u7684\u8d85\u7c7b \u4e24\u7c7b \u9519\u8bef Error \u5f02\u5e38 Exceeption RuntimeException (\u8fd0\u884c\u65f6\u5f02\u5e38) \u6570\u7ec4\u4e0b\u6807\u8d8a\u754c \u7a7a\u6307\u9488\u5f02\u5e38 \u7b97\u6570\u5f02\u5e38 \u4e22\u5931\u8d44\u6e90 \u627e\u4e0d\u5230\u7c7b ....... \u8fd9\u4e9b\u5f02\u5e38\u4e00\u822c\u662f\u7531\u957f\u987b\u903b\u8f91\u9519\u8bef\u5f15\u8d77\u7684\uff0c\u7a0b\u5e8f\u5e94\u8be5\u4ece\u903b\u8f91\u89d2\u5ea6\u5c3d\u53ef\u80fd\u907f\u514d\u8fd9\u7c7b\u5f02\u5e38\u7684\u53d1\u751f Error \u548c Exception \u7684\u533a\u522b\uff1a Error \u901a\u5e38\u662f\u707e\u96be\u6027\u7684\u81f4\u547d\u9519\u8bef\uff0c\u662f\u7a0b\u5e8f\u65e0\u6cd5\u63a7\u5236\u548c\u5904\u7406\u7684\uff0c\u5f53\u51fa\u73b0\u8fd9\u4e9b\u5f02\u5e38\u65f6\uff0cJava\u865a\u62df\u673a\u4e00\u822c\u4f1a\u9009\u62e9\u7ec8\u6b62\u8fdb\u7a0b\uff1b Exception \u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u5e76\u4e14\u5728\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5c3d\u53ef\u80fd\u53bb\u5904\u7406\u8fd9\u4e9b\u5f02\u5e38 \u4e09\u3001Java\u5f02\u5e38\u5904\u7406\u673a\u5236 \u629b\u51fa\u5f02\u5e38 \u6355\u83b7\u5f02\u5e38 try\uff1a\u76d1\u63a7\u533a\u57df catch\uff1a\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u7531\u51e0\u4e2acatch\u7ec4\u6210\uff0c\u5206\u522b\u5904\u7406\u4e0d\u540c\u7684\u5f02\u5e38 finally\uff1a\u5904\u7406\u5584\u540e\u5de5\u4f5c(\u53ef\u4ee5\u7701\u53bb) java try{ System.out.println(a/b); //\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u8bed\u53e5 }catch(ArithmeticException e){ System.out.println(\"\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\uff0c\u53d8\u91cfb\u4e0d\u80fd\u4e3a0\"); }finally{ System.out.println(\"finally\"); } \u4e94\u4e2a\u5173\u952e\u8bcd\uff1atry, catch, finally, throw, throws \u56db\u3001\u5904\u7406\u5f02\u5e38 \u4e94\u3001\u81ea\u5b9a\u4e49\u5f02\u5e38 \u516d\u3001\u603b\u7ed3","title":"\u5f02\u5e38"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_1","text":"","title":"\u5f02\u5e38"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_2","text":"\u5206\u7c7b \u68c0\u67e5\u6027\u5f02\u5e38 \u8fd0\u884c\u65f6\u5f02\u5e38","title":"\u4e00\u3001\u4ec0\u4e48\u662f\u5f02\u5e38"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_3","text":"java\u4e2d\u628a\u5f02\u5e38\u5f53\u4f5c\u5bf9\u8c61\u6765\u5904\u7406\uff0c\u5e76\u5b9a\u4e49\u4e86\u4e00\u4e2a\u57fa\u7c7b java.lang.Throwable \u4f5c\u4e3a\u6240\u6709\u5f02\u5e38\u7684\u8d85\u7c7b \u4e24\u7c7b \u9519\u8bef Error \u5f02\u5e38 Exceeption RuntimeException (\u8fd0\u884c\u65f6\u5f02\u5e38) \u6570\u7ec4\u4e0b\u6807\u8d8a\u754c \u7a7a\u6307\u9488\u5f02\u5e38 \u7b97\u6570\u5f02\u5e38 \u4e22\u5931\u8d44\u6e90 \u627e\u4e0d\u5230\u7c7b ....... \u8fd9\u4e9b\u5f02\u5e38\u4e00\u822c\u662f\u7531\u957f\u987b\u903b\u8f91\u9519\u8bef\u5f15\u8d77\u7684\uff0c\u7a0b\u5e8f\u5e94\u8be5\u4ece\u903b\u8f91\u89d2\u5ea6\u5c3d\u53ef\u80fd\u907f\u514d\u8fd9\u7c7b\u5f02\u5e38\u7684\u53d1\u751f Error \u548c Exception \u7684\u533a\u522b\uff1a Error \u901a\u5e38\u662f\u707e\u96be\u6027\u7684\u81f4\u547d\u9519\u8bef\uff0c\u662f\u7a0b\u5e8f\u65e0\u6cd5\u63a7\u5236\u548c\u5904\u7406\u7684\uff0c\u5f53\u51fa\u73b0\u8fd9\u4e9b\u5f02\u5e38\u65f6\uff0cJava\u865a\u62df\u673a\u4e00\u822c\u4f1a\u9009\u62e9\u7ec8\u6b62\u8fdb\u7a0b\uff1b Exception \u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u5e76\u4e14\u5728\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u5c3d\u53ef\u80fd\u53bb\u5904\u7406\u8fd9\u4e9b\u5f02\u5e38","title":"\u4e8c\u3001\u5f02\u5e38\u4f53\u7cfb\u7ed3\u6784"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#java","text":"\u629b\u51fa\u5f02\u5e38 \u6355\u83b7\u5f02\u5e38 try\uff1a\u76d1\u63a7\u533a\u57df catch\uff1a\u6355\u83b7\u5f02\u5e38 \u53ef\u4ee5\u7531\u51e0\u4e2acatch\u7ec4\u6210\uff0c\u5206\u522b\u5904\u7406\u4e0d\u540c\u7684\u5f02\u5e38 finally\uff1a\u5904\u7406\u5584\u540e\u5de5\u4f5c(\u53ef\u4ee5\u7701\u53bb) java try{ System.out.println(a/b); //\u53ef\u80fd\u53d1\u751f\u5f02\u5e38\u7684\u8bed\u53e5 }catch(ArithmeticException e){ System.out.println(\"\u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\uff0c\u53d8\u91cfb\u4e0d\u80fd\u4e3a0\"); }finally{ System.out.println(\"finally\"); } \u4e94\u4e2a\u5173\u952e\u8bcd\uff1atry, catch, finally, throw, throws","title":"\u4e09\u3001Java\u5f02\u5e38\u5904\u7406\u673a\u5236"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_4","text":"","title":"\u56db\u3001\u5904\u7406\u5f02\u5e38"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_5","text":"","title":"\u4e94\u3001\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8/#_6","text":"","title":"\u516d\u3001\u603b\u7ed3"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/","text":"\u6570\u7ec4 \u4e00\u3001\u58f0\u660e Java\u4e0d\u5141\u8bb8\u518d\u58f0\u660e\u6570\u7ec4\u4e2d\u7684\u65b9\u62ec\u53f7\u5185\u6307\u5b9a\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 int a[12] / int [12]a \u7f16\u8bd1\u51fa\u73b0\u9519\u8bef \u4e3a\u6570\u7ec4\u5206\u914d\u5143\u7d20\u7684\u683c\u5f0f\uff1a \u6570\u7ec4\u540d = new \u6570\u7ec4\u5143\u7d20\u7c7b\u578b[\u6570\u7ec4\u5143\u7d20\u4e2a\u6570] \u53ef\u4ee5\u5728 \u58f0\u660e\u6570\u7ec4 \u7684\u540c\u65f6 \u521b\u5efa\u6570\u7ec4 \u6784\u6210\u4e8c\u7ef4\u6570\u7ec4\u7684\u4e00\u7ef4\u6570\u7ec4\u957f\u5ea6\u4e0d\u5fc5\u76f8\u540c Java\u5141\u8bb8\u4f7f\u7528int\u7c7b\u578b\u53d8\u91cf\u6307\u5b9a\u5143\u7d20\u7684\u4e2a\u6570","title":"\u6570\u7ec4"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/#_1","text":"","title":"\u6570\u7ec4"},{"location":"Java/%E5%9F%BA%E7%A1%80/%E6%95%B0%E7%BB%84/#_2","text":"Java\u4e0d\u5141\u8bb8\u518d\u58f0\u660e\u6570\u7ec4\u4e2d\u7684\u65b9\u62ec\u53f7\u5185\u6307\u5b9a\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 int a[12] / int [12]a \u7f16\u8bd1\u51fa\u73b0\u9519\u8bef \u4e3a\u6570\u7ec4\u5206\u914d\u5143\u7d20\u7684\u683c\u5f0f\uff1a \u6570\u7ec4\u540d = new \u6570\u7ec4\u5143\u7d20\u7c7b\u578b[\u6570\u7ec4\u5143\u7d20\u4e2a\u6570] \u53ef\u4ee5\u5728 \u58f0\u660e\u6570\u7ec4 \u7684\u540c\u65f6 \u521b\u5efa\u6570\u7ec4 \u6784\u6210\u4e8c\u7ef4\u6570\u7ec4\u7684\u4e00\u7ef4\u6570\u7ec4\u957f\u5ea6\u4e0d\u5fc5\u76f8\u540c Java\u5141\u8bb8\u4f7f\u7528int\u7c7b\u578b\u53d8\u91cf\u6307\u5b9a\u5143\u7d20\u7684\u4e2a\u6570","title":"\u4e00\u3001\u58f0\u660e"},{"location":"Java/%E8%BF%9B%E9%98%B6/GUI/","text":"///# GUI Java Swing \u6982\u8ff0 \u4e24\u4e2a\u6982\u5ff5\uff1a \u7ec4\u4ef6\u7c7b \u5bb9\u5668\u7c7b \u57fa\u672c\u77e5\u8bc6\u70b9 Component\u76f8\u5173\u5bf9\u8c61\u79f0\u4e3a\u7ec4\u4ef6 Container\u76f8\u5173\u5bf9\u8c61\u79f0\u4e3a\u5bb9\u5668 \u5411\u5bb9\u5668\u6dfb\u52a0\u7ec4\u4ef6\uff08 add() \u65b9\u6cd5\uff09 \u4f7f\u7528 remove() \u65b9\u6cd5\u79fb\u9664\u7ec4\u4ef6 \u7a97\u53e3 JFrame\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5373\u5e95\u5c42\u5bb9\u5668\uff0c\u88ab\u79f0\u4e3a\u7a97\u53e3 \u7a97\u53e3\u9ed8\u8ba4\u88ab\u6dfb\u52a0\u5230\u663e\u793a\u5668\u7684\u5c4f\u5e55\u4e0a\uff0c\u4e0d\u5141\u8bb8\u5c06\u4e00\u4e2a\u7a97\u53e3\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u4e2d JFrame\u5e38\u7528\u65b9\u6cd5 JFrame() \u521b\u5efa\u4e00\u4e2a\u65e0\u6807\u9898\u7684\u7a97\u53e3 JFrame(String s) \u521b\u5efa\u4e00\u4e2a\u6807\u9898\u4e3as\u7684\u7a97\u53e3 seBounds(int a, int b, int width, int height) \u8bbe\u7f6e\u521d\u59cb\u4f4d\u7f6e\u548c\u5927\u5c0f setSize(int width, int height) setLocation() setVisible(boolean b) setResizable(boolean b) dispose() \u64a4\u9500\u5f53\u524d\u7a97\u53e3\u5e76\u91ca\u653e\u8d44\u6e90 setExtendedState(int state) \u8bbe\u7f6e\u7a97\u53e3\u7684\u62d3\u5c55\u72b6\u6001 MAXIMIZED_HORIZ \u6c34\u5e73\u65b9\u5411\u6700\u5927\u5316 MAXIMIZED_VERT MAXIMIZED_BOTH setDefaultCloseOperation(int operation) \u5173\u95ed\u540e\u8d3coiudeckzo DO_NOTHING_ON_CLOSE HIDE_ON_CLOSE EXIT_ON_CLOSE DISPOSE_ON_CLOSE \u9000\u51fa\u5e76\u91ca\u653e\u8d44\u6e90 \u83dc\u5355\u6761\u3001\u83dc\u5355\u3001\u83dc\u5355\u9879 \u83dc\u5355\u6761\uff1a\u53ea\u80fd\u5411\u7a97\u53e3\u6dfb\u52a0\u4e00\u4e2a\u83dc\u5355\u6761 JMenuBar \u83dc\u5355\uff1a JMenu \u5b9e\u4f8b\u5bf9\u8c61 \u83dc\u5355\u9879\uff1a JMenuItem \u5bf9\u8c61 \u5d4c\u5165\u5b50\u83dc\u5355\u4f7f\u7528 add(sth) \u65b9\u6cd5 \u83dc\u5355\u4e0a\u7684\u56fe\u6807 \u4f7f\u7528\u56fe\u6807\u7c7bIcon\u58f0\u660e\u4e00\u4e2a\u56fe\u6807\uff0c\u518d\u4f7f\u7528\u5176\u5b50\u7c7b\u521b\u5efa\u4e00\u4e2a\u56fe\u6807\uff0c\u5982 Icon icon = new ImageIcon(\"a.gif\") \u5e38\u7528\u7ec4\u4ef6\u4e0e\u5e03\u5c40 \u90fd\u662fJComponent\u7684\u5b50\u7c7b \u5e38\u7528\u7ec4\u4ef6 JTextField \uff1a\u5355\u884c\u6587\u672c\u6587\u672c\u6846 JTextArea \uff1a\u591a\u884c\u6587\u672c\u6587\u672c\u6846 JButton \uff1a\u6309\u94ae JLabel JCheckBox \uff1a\u590d\u9009\u6846 JRadioButtom \uff1a\u5355\u9009\u6846 JCombaBox \uff1a\u4e0b\u62c9\u5217\u8868 JPasswordField \uff1a\u5bc6\u7801\u6846 \u5e38\u7528\u5bb9\u5668 Container\u7684\u5b50\u7c7b Jpanel\u9762\u677f JTabbedPane [[\u5904\u7406\u4e8b\u4ef6]]","title":"GUI"},{"location":"Java/%E8%BF%9B%E9%98%B6/GUI/#java-swing","text":"\u4e24\u4e2a\u6982\u5ff5\uff1a \u7ec4\u4ef6\u7c7b \u5bb9\u5668\u7c7b \u57fa\u672c\u77e5\u8bc6\u70b9 Component\u76f8\u5173\u5bf9\u8c61\u79f0\u4e3a\u7ec4\u4ef6 Container\u76f8\u5173\u5bf9\u8c61\u79f0\u4e3a\u5bb9\u5668 \u5411\u5bb9\u5668\u6dfb\u52a0\u7ec4\u4ef6\uff08 add() \u65b9\u6cd5\uff09 \u4f7f\u7528 remove() \u65b9\u6cd5\u79fb\u9664\u7ec4\u4ef6","title":"Java Swing \u6982\u8ff0"},{"location":"Java/%E8%BF%9B%E9%98%B6/GUI/#_1","text":"JFrame\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5373\u5e95\u5c42\u5bb9\u5668\uff0c\u88ab\u79f0\u4e3a\u7a97\u53e3 \u7a97\u53e3\u9ed8\u8ba4\u88ab\u6dfb\u52a0\u5230\u663e\u793a\u5668\u7684\u5c4f\u5e55\u4e0a\uff0c\u4e0d\u5141\u8bb8\u5c06\u4e00\u4e2a\u7a97\u53e3\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u4e2d JFrame\u5e38\u7528\u65b9\u6cd5 JFrame() \u521b\u5efa\u4e00\u4e2a\u65e0\u6807\u9898\u7684\u7a97\u53e3 JFrame(String s) \u521b\u5efa\u4e00\u4e2a\u6807\u9898\u4e3as\u7684\u7a97\u53e3 seBounds(int a, int b, int width, int height) \u8bbe\u7f6e\u521d\u59cb\u4f4d\u7f6e\u548c\u5927\u5c0f setSize(int width, int height) setLocation() setVisible(boolean b) setResizable(boolean b) dispose() \u64a4\u9500\u5f53\u524d\u7a97\u53e3\u5e76\u91ca\u653e\u8d44\u6e90 setExtendedState(int state) \u8bbe\u7f6e\u7a97\u53e3\u7684\u62d3\u5c55\u72b6\u6001 MAXIMIZED_HORIZ \u6c34\u5e73\u65b9\u5411\u6700\u5927\u5316 MAXIMIZED_VERT MAXIMIZED_BOTH setDefaultCloseOperation(int operation) \u5173\u95ed\u540e\u8d3coiudeckzo DO_NOTHING_ON_CLOSE HIDE_ON_CLOSE EXIT_ON_CLOSE DISPOSE_ON_CLOSE \u9000\u51fa\u5e76\u91ca\u653e\u8d44\u6e90 \u83dc\u5355\u6761\u3001\u83dc\u5355\u3001\u83dc\u5355\u9879 \u83dc\u5355\u6761\uff1a\u53ea\u80fd\u5411\u7a97\u53e3\u6dfb\u52a0\u4e00\u4e2a\u83dc\u5355\u6761 JMenuBar \u83dc\u5355\uff1a JMenu \u5b9e\u4f8b\u5bf9\u8c61 \u83dc\u5355\u9879\uff1a JMenuItem \u5bf9\u8c61 \u5d4c\u5165\u5b50\u83dc\u5355\u4f7f\u7528 add(sth) \u65b9\u6cd5 \u83dc\u5355\u4e0a\u7684\u56fe\u6807 \u4f7f\u7528\u56fe\u6807\u7c7bIcon\u58f0\u660e\u4e00\u4e2a\u56fe\u6807\uff0c\u518d\u4f7f\u7528\u5176\u5b50\u7c7b\u521b\u5efa\u4e00\u4e2a\u56fe\u6807\uff0c\u5982 Icon icon = new ImageIcon(\"a.gif\")","title":"\u7a97\u53e3"},{"location":"Java/%E8%BF%9B%E9%98%B6/GUI/#_2","text":"\u90fd\u662fJComponent\u7684\u5b50\u7c7b \u5e38\u7528\u7ec4\u4ef6 JTextField \uff1a\u5355\u884c\u6587\u672c\u6587\u672c\u6846 JTextArea \uff1a\u591a\u884c\u6587\u672c\u6587\u672c\u6846 JButton \uff1a\u6309\u94ae JLabel JCheckBox \uff1a\u590d\u9009\u6846 JRadioButtom \uff1a\u5355\u9009\u6846 JCombaBox \uff1a\u4e0b\u62c9\u5217\u8868 JPasswordField \uff1a\u5bc6\u7801\u6846 \u5e38\u7528\u5bb9\u5668 Container\u7684\u5b50\u7c7b Jpanel\u9762\u677f JTabbedPane [[\u5904\u7406\u4e8b\u4ef6]]","title":"\u5e38\u7528\u7ec4\u4ef6\u4e0e\u5e03\u5c40"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/","text":"Java\u591a\u7ebf\u7a0b\u673a\u5236 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b \u7ebf\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u5171\u4eab\u5185\u5b58 \u7528\u6765\u5b9e\u73b0\u6570\u636e\u4ea4\u6362\u3001\u5b9e\u65f6\u901a\u4fe1\u4e0e\u5fc5\u8981\u7684\u540c\u6b65\u64cd\u4f5c \u4e0e\u8fdb\u7a0b\u7684\u4e0d\u540c\uff1a\u73b0\u6210\u7684\u4e2d\u65ad\u4e0e\u6062\u590d\u53ef\u4ee5\u66f4\u52a0\u8282\u7701\u7cfb\u7edf\u7684\u5f00\u9500 \u7ebf\u7a0b\u7684\u72b6\u6001\u4e0e\u751f\u547d\u5468\u671f \u65b0\u5efa\u72b6\u6001 \u53ef\u8fd0\u884c\u72b6\u6001 \u4e2d\u65ad\u72b6\u6001 \u6b7b\u4ea1\u72b6\u6001 \u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u4f18\u5148\u7ea7 \u4f18\u5148\u7ea7\u53ef\u4ee5\u901a\u8fc7 setPriority(int grade) \u65b9\u6cd5\u6765\u66f4\u6539 Thread\u7c7b\u4e0e\u7ebf\u7a0b\u7684\u521b\u5efa \u4f7f\u7528Thread\u7684\u5b50\u7c7b \uff08\u4f8b12-1\uff09 \u4f18\u70b9\uff1a \u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u589e\u52a0\u65b0\u7684\u6210\u5458\u53d8\u91cf\uff08\u65b0\u5c5e\u6027\uff09 \u53ef\u4ee5\u589e\u52a0\u65b0\u7684\u6210\u5458\u65b9\u6cd5\uff08\u65b0\u529f\u80fd\uff09 \u7f3a\u70b9 Java\u4e0d\u652f\u6301\u591a\u7ee7\u627f\uff0c\u65e0\u6cd5\u62d3\u5c55\u5176\u4ed6\u7c7b \u4f7f\u7528Thread\u7c7b\uff0c\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0 \uff08\u4f8b12-2\uff09 \u901a\u5e38\u4f7f\u7528\u7684\u6784\u9020\u65b9\u6cd5\uff1a Thread(Runnable target) \u5bf9\u4e8e\u4f7f\u7528\u540c\u4e00\u76ee\u6807\u5bf9\u8c61\u7684\u7ebf\u7a0b\uff0c \u76ee\u6807\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5c31\u662f\u8fd9\u4e9b\u7ebf\u7a0b\u5171\u4eab\u7684\u6570\u636e\u5355\u5143 \uff08\u4f8b12-3\uff09 \u7ebf\u7a0b\u7684\u5e38\u7528\u65b9\u6cd5 start() run() \uff1a\u4e0eRunnable\u63a5\u53e3\u4e2d run() \u65b9\u6cd5\u76f8\u540c sleep(int millsecond) \uff1a static\u65b9\u6cd5 \uff0c\u5982\u679c\u7ebf\u7a0b\u5728\u4f11\u7720\u65f6\u5019\u88ab\u6253\u65ad\uff0c\u5c31\u4f1a\u629b\u51fa InterruptedException \u5f02\u5e38\uff0c \u5fc5\u987b\u5728try-catch\u8bed\u53e5\u4e2d\u4f7f\u7528sleep\u65b9\u6cd5 isAlive() currentThread() \uff1a\u8fd4\u56de\u6b63\u5728\u4f7f\u7528cpu\u8d44\u6e90\u7684\u7ebf\u7a0b interrupt() \uff1a\u7528\u6765\u5435\u9192\u4f11\u7720\u7684\u7ebf\u7a0b\uff0c\u91cd\u65b0\u8fdb\u5165Runnable\u72b6\u6001 \u7ebf\u7a0b\u540c\u6b65 \u82e5\u5e72\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4f7f\u7528 synchronized \u4fee\u9970\u7684 \u65b9\u6cd5\u6216\u4ee3\u7801\u5757 \u591a\u7ebf\u7a0b\u8c03\u7528 synchronized \u65b9\u6cd5\u5fc5\u987b\u9075\u5b88\u540c\u6b65\u673a\u5236\uff08\u5373\u6392\u961f\u4f7f\u7528\uff09 \uff08\u4f8b12-7\uff09 \u534f\u8c03\u540c\u6b65\u7684\u7ebf\u7a0b wait() \u65b9\u6cd5 \u4e2d\u65ad\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u6682\u65f6 \u8ba9\u51fa cpu\u7684\u4f7f\u7528\u6743\u7b49\u5f85\u901a\u77e5\u540e\uff0c\u624d\u53c2\u4e0eCPU\u8d44\u6e90\u62a2\u593a yield() \u65b9\u6cd5 \u5c06CPU\u8d44\u6e90\u8ba9\u51fa\uff0c\u4f46\u7acb\u523b\u52a0\u5165CPU\u8d44\u6e90\u7684\u4e89\u62a2 notifyAll() \u65b9\u6cd5 \u901a\u77e5\u6240\u6709 \u7531\u4e8e\u4f7f\u7528\u540c\u6b65\u65b9\u6cd5\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u65b9\u6cd5\u7ed3\u675f\u7b49\u5f85\uff0c\u8fdb\u5165\u5c31\u7eea\u72b6\u6001 notify() \u65b9\u6cd5 \u901a\u77e5\u6307\u5b9a \u7684\u4f7f\u7528\u540c\u6b65\u65b9\u6cd5\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u65b9\u6cd5\u7ed3\u675f\u7b49\u5f85\uff0c \u8fdb\u5165\u5c31\u7eea\u72b6\u6001 \u6ce8\uff1a\u4e0d\u53ef\u4ee5\u5728\u975e\u540c\u6b65\u65b9\u6cd5\u4e2d\u4f7f\u7528\u4ee5\u4e0a\u4e09\u4e2a\u65b9\u6cd5 \u7ebf\u7a0b\u8054\u5408 \u4e00\u4e2a\u7ebf\u7a0bA\u5728\u5360\u6709cpu\u8d44\u6e90\u671f\u95f4\u53ef\u4ee5\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528 join() \u4e0e\u672c\u7ebf\u7a0b\u8054\u5408 \u8054\u5408\u540eA\u5c06\u7acb\u5373\u4e2d\u65ad\u6267\u884c\uff0c\u76f4\u5230B\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0cA\u518d\u91cd\u65b0\u6392\u961f\u7b49\u5f85cpu\u8d44\u6e90 [[GUI]]\u7ebf\u7a0b \u4e24\u4e2a\u91cd\u8981\u7ebf\u7a0b\uff1a AWT-EventQuecue \u8d1f\u8d23\u5904\u7406GUI\u4e8b\u4ef6 AWT-Windows \u8d1f\u8d23\u5c06\u7a97\u4f53\u6216\u7ec4\u4ef6\u7ed8\u5236\u5230\u684c\u9762 \u5b88\u62a4\u7ebf\u7a0b \u5b88\u62a4\u7ebf\u7a0b\uff1a\u5f53\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u7528\u6237\u7ebf\u7a0b\u90fd\u5df2\u7ecf\u7ed3\u675f\u8fd0\u884c\u65f6\uff0c\u5b88\u62a4\u7ebf\u7a0b\u7acb\u523b\u7ed3\u675f\u8fd0\u884c\uff08\u65e0\u89c6 run() \u65b9\u6cd5\uff09 \u5e38\u89c1\u7684\u5b88\u62a4\u7ebf\u7a0b\uff1a\u5783\u573e\u56de\u6536\u673a\u5236 \u6ce8\uff1a\u4e00\u4e2a\u7ebf\u7a0b\u5fc5\u987b\u5728\u8fd0\u884c\u4e4b\u524d\u8bbe\u7f6e\u81ea\u5df1\u662f\u5426\u4e3a\u5b88\u62a4\u7ebf\u7a0b \u58f0\u660e\u65b9\u5f0f\uff1a ThreadName.setDaemon(true)","title":"Java\u591a\u7ebf\u7a0b\u673a\u5236"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#java","text":"","title":"Java\u591a\u7ebf\u7a0b\u673a\u5236"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_1","text":"\u7ebf\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u5171\u4eab\u5185\u5b58 \u7528\u6765\u5b9e\u73b0\u6570\u636e\u4ea4\u6362\u3001\u5b9e\u65f6\u901a\u4fe1\u4e0e\u5fc5\u8981\u7684\u540c\u6b65\u64cd\u4f5c \u4e0e\u8fdb\u7a0b\u7684\u4e0d\u540c\uff1a\u73b0\u6210\u7684\u4e2d\u65ad\u4e0e\u6062\u590d\u53ef\u4ee5\u66f4\u52a0\u8282\u7701\u7cfb\u7edf\u7684\u5f00\u9500 \u7ebf\u7a0b\u7684\u72b6\u6001\u4e0e\u751f\u547d\u5468\u671f \u65b0\u5efa\u72b6\u6001 \u53ef\u8fd0\u884c\u72b6\u6001 \u4e2d\u65ad\u72b6\u6001 \u6b7b\u4ea1\u72b6\u6001 \u7ebf\u7a0b\u7684\u8c03\u5ea6\u4e0e\u4f18\u5148\u7ea7 \u4f18\u5148\u7ea7\u53ef\u4ee5\u901a\u8fc7 setPriority(int grade) \u65b9\u6cd5\u6765\u66f4\u6539","title":"\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#thread","text":"\u4f7f\u7528Thread\u7684\u5b50\u7c7b \uff08\u4f8b12-1\uff09 \u4f18\u70b9\uff1a \u53ef\u4ee5\u5728\u5b50\u7c7b\u4e2d\u589e\u52a0\u65b0\u7684\u6210\u5458\u53d8\u91cf\uff08\u65b0\u5c5e\u6027\uff09 \u53ef\u4ee5\u589e\u52a0\u65b0\u7684\u6210\u5458\u65b9\u6cd5\uff08\u65b0\u529f\u80fd\uff09 \u7f3a\u70b9 Java\u4e0d\u652f\u6301\u591a\u7ee7\u627f\uff0c\u65e0\u6cd5\u62d3\u5c55\u5176\u4ed6\u7c7b \u4f7f\u7528Thread\u7c7b\uff0c\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0 \uff08\u4f8b12-2\uff09 \u901a\u5e38\u4f7f\u7528\u7684\u6784\u9020\u65b9\u6cd5\uff1a Thread(Runnable target) \u5bf9\u4e8e\u4f7f\u7528\u540c\u4e00\u76ee\u6807\u5bf9\u8c61\u7684\u7ebf\u7a0b\uff0c \u76ee\u6807\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5c31\u662f\u8fd9\u4e9b\u7ebf\u7a0b\u5171\u4eab\u7684\u6570\u636e\u5355\u5143 \uff08\u4f8b12-3\uff09","title":"Thread\u7c7b\u4e0e\u7ebf\u7a0b\u7684\u521b\u5efa"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_2","text":"start() run() \uff1a\u4e0eRunnable\u63a5\u53e3\u4e2d run() \u65b9\u6cd5\u76f8\u540c sleep(int millsecond) \uff1a static\u65b9\u6cd5 \uff0c\u5982\u679c\u7ebf\u7a0b\u5728\u4f11\u7720\u65f6\u5019\u88ab\u6253\u65ad\uff0c\u5c31\u4f1a\u629b\u51fa InterruptedException \u5f02\u5e38\uff0c \u5fc5\u987b\u5728try-catch\u8bed\u53e5\u4e2d\u4f7f\u7528sleep\u65b9\u6cd5 isAlive() currentThread() \uff1a\u8fd4\u56de\u6b63\u5728\u4f7f\u7528cpu\u8d44\u6e90\u7684\u7ebf\u7a0b interrupt() \uff1a\u7528\u6765\u5435\u9192\u4f11\u7720\u7684\u7ebf\u7a0b\uff0c\u91cd\u65b0\u8fdb\u5165Runnable\u72b6\u6001","title":"\u7ebf\u7a0b\u7684\u5e38\u7528\u65b9\u6cd5"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_3","text":"\u82e5\u5e72\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4f7f\u7528 synchronized \u4fee\u9970\u7684 \u65b9\u6cd5\u6216\u4ee3\u7801\u5757 \u591a\u7ebf\u7a0b\u8c03\u7528 synchronized \u65b9\u6cd5\u5fc5\u987b\u9075\u5b88\u540c\u6b65\u673a\u5236\uff08\u5373\u6392\u961f\u4f7f\u7528\uff09 \uff08\u4f8b12-7\uff09","title":"\u7ebf\u7a0b\u540c\u6b65"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_4","text":"wait() \u65b9\u6cd5 \u4e2d\u65ad\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u6682\u65f6 \u8ba9\u51fa cpu\u7684\u4f7f\u7528\u6743\u7b49\u5f85\u901a\u77e5\u540e\uff0c\u624d\u53c2\u4e0eCPU\u8d44\u6e90\u62a2\u593a yield() \u65b9\u6cd5 \u5c06CPU\u8d44\u6e90\u8ba9\u51fa\uff0c\u4f46\u7acb\u523b\u52a0\u5165CPU\u8d44\u6e90\u7684\u4e89\u62a2 notifyAll() \u65b9\u6cd5 \u901a\u77e5\u6240\u6709 \u7531\u4e8e\u4f7f\u7528\u540c\u6b65\u65b9\u6cd5\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u65b9\u6cd5\u7ed3\u675f\u7b49\u5f85\uff0c\u8fdb\u5165\u5c31\u7eea\u72b6\u6001 notify() \u65b9\u6cd5 \u901a\u77e5\u6307\u5b9a \u7684\u4f7f\u7528\u540c\u6b65\u65b9\u6cd5\u800c\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u65b9\u6cd5\u7ed3\u675f\u7b49\u5f85\uff0c \u8fdb\u5165\u5c31\u7eea\u72b6\u6001 \u6ce8\uff1a\u4e0d\u53ef\u4ee5\u5728\u975e\u540c\u6b65\u65b9\u6cd5\u4e2d\u4f7f\u7528\u4ee5\u4e0a\u4e09\u4e2a\u65b9\u6cd5","title":"\u534f\u8c03\u540c\u6b65\u7684\u7ebf\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_5","text":"\u4e00\u4e2a\u7ebf\u7a0bA\u5728\u5360\u6709cpu\u8d44\u6e90\u671f\u95f4\u53ef\u4ee5\u8ba9\u5176\u4ed6\u7ebf\u7a0b\u8c03\u7528 join() \u4e0e\u672c\u7ebf\u7a0b\u8054\u5408 \u8054\u5408\u540eA\u5c06\u7acb\u5373\u4e2d\u65ad\u6267\u884c\uff0c\u76f4\u5230B\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\uff0cA\u518d\u91cd\u65b0\u6392\u961f\u7b49\u5f85cpu\u8d44\u6e90","title":"\u7ebf\u7a0b\u8054\u5408"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#gui","text":"\u4e24\u4e2a\u91cd\u8981\u7ebf\u7a0b\uff1a AWT-EventQuecue \u8d1f\u8d23\u5904\u7406GUI\u4e8b\u4ef6 AWT-Windows \u8d1f\u8d23\u5c06\u7a97\u4f53\u6216\u7ec4\u4ef6\u7ed8\u5236\u5230\u684c\u9762","title":"[[GUI]]\u7ebf\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/#_6","text":"\u5b88\u62a4\u7ebf\u7a0b\uff1a\u5f53\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u7528\u6237\u7ebf\u7a0b\u90fd\u5df2\u7ecf\u7ed3\u675f\u8fd0\u884c\u65f6\uff0c\u5b88\u62a4\u7ebf\u7a0b\u7acb\u523b\u7ed3\u675f\u8fd0\u884c\uff08\u65e0\u89c6 run() \u65b9\u6cd5\uff09 \u5e38\u89c1\u7684\u5b88\u62a4\u7ebf\u7a0b\uff1a\u5783\u573e\u56de\u6536\u673a\u5236 \u6ce8\uff1a\u4e00\u4e2a\u7ebf\u7a0b\u5fc5\u987b\u5728\u8fd0\u884c\u4e4b\u524d\u8bbe\u7f6e\u81ea\u5df1\u662f\u5426\u4e3a\u5b88\u62a4\u7ebf\u7a0b \u58f0\u660e\u65b9\u5f0f\uff1a ThreadName.setDaemon(true)","title":"\u5b88\u62a4\u7ebf\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","text":"Java\u7f51\u7edc\u7f16\u7a0b URL\u7c7b \u6784\u9020\u65b9\u6cd5 \u4f7f\u7528\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2aURL\u5bf9\u8c61 \u8bfb\u53d6URL\u4e2d\u7684\u8d44\u6e90 \u5bf9\u8c61\u8c03\u7528 InputStream openStream() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u8f93\u5165\u6d41 - \u8be5\u8f93\u5165\u6d41\u6307\u5411URL\u5bf9\u8c61\u6240\u5305\u542b\u7684\u8d44\u6e90 \u5957\u63a5\u5b57 \u5957\u63a5\u5b57\u6982\u8ff0 \u5f53\u4e24\u4e2a\u7a0b\u5e8f\u9700\u8981\u901a\u4fe1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Socket\u7c7b\u5efa\u7acb\u5957\u63a5\u5b57\u5bf9\u8c61\u5e76\u8fde\u63a5\u5728\u4e00\u8d77 \u5ba2\u6237\u7aef\u5957\u63a5\u5b57 \u5ba2\u6237\u7aef\u7a0b\u5e8f\u4f7f\u7528Socket\u7c7b\u5efa\u7acb\u8d1f\u8d23\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\uff1a Socket(String host, int port) throws IOException \u5ba2\u6237\u7aef\u7528\u8f93\u5165\u6d41( getInputStream() )\u53ef\u4ee5\u8bfb\u53d6\u670d\u52a1\u5668\u5199\u5230\u8f93\u51fa\u6d41( DataOutputStream )\u4e2d\u7684\u6570\u636e \u670d\u52a1\u5668\u7528\u8f93\u5165\u6d41\u53ef\u4ee5\u8bfb\u53d6\u5ba2\u6237\u7aef\u5199\u5230\u8f93\u51fa\u6d41\u4e2d\u7684\u6570\u636e ServerSocket\u5bf9\u8c61\u4e0e\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57 \u670d\u52a1\u5668\u7aef\u5fc5\u987b\u5efa\u7acb\u4e00\u4e2aServerSocket\u5bf9\u8c61\uff08\u7c7b\u4f3c\u90ae\u5c40\u4e2d\u7684\u4e1a\u52a1\u5458\uff09 \u670d\u52a1\u5668\u7684ServerSocket\u5bf9\u8c61\u5efa\u7acb\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 accept() \u65b9\u6cd5\u5c06\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u548c\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u8d77\u6765 \u6ce8\u610f\uff1a accpet() \u65b9\u6cd5\u4f1a\u963b\u585e\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u76f4\u5230\u63a5\u6536\u5230\u5ba2\u6237\u7684\u547c\u53eb\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aSocket\u5bf9\u8c61 \u5efa\u7acb\u8fde\u63a5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u76f8\u5173\u7684\u65b9\u6cd5\u83b7\u53d6\u5ba2\u6237\u7aef\u7684IP\u5730\u5740\u548c\u7aef\u53e3 socket\u5bf9\u8c61\u4f7f\u7528\u5b8c\u6bd5\u540e\u9700\u8981\u81ea\u884c\u5173\u95ed \u6ce8\u610f\u5173\u95ed\u8f93\u51fa\u6d41 \u4f7f\u7528\u591a\u7ebf\u7a0b\u6280\u672f \u5957\u63a5\u5b57\u901a\u4fe1\u4e2d\u7684\u4e24\u4e2a\u57fa\u672c\u539f\u5219\uff1a \u670d\u52a1\u5668\u542f\u52a8\u4e00\u4e2a\u4e13\u95e8\u7684\u7ebf\u7a0b\uff0c\u5728\u8be5\u7ebf\u7a0b\u4e2d\u548c\u5ba2\u6237\u7684\u5957\u63a5\u5b57\u5efa\u7acb\u8fde\u63a5 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u9700\u8981\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8bfb\u53d6\u4fe1\u606f UDP\u6570\u636e\u62a5 \u57fa\u4e8eUDP\u7684\u4fe1\u606f\u4f20\u9012\u66f4\u5feb\uff0c\u4f46\u4e0d\u63d0\u4f9b\u53ef\u9760\u6027\u4fdd\u8bc1 \u57fa\u4e8eUDP\u901a\u4fe1\u7684\u57fa\u672c\u6a21\u5f0f\uff1a \u53d1\u9001\u6570\u636e\u5305 \u4f7f\u7528 DatagramPacket \u7c7b\u5c06\u6570\u636e\u6253\u5305 \u4e24\u4e2a\u6784\u9020\u65b9\u6cd5\u5c06\u6570\u636e\u6253\u5305\uff1a DatagramPacket(byte data[], int length, InetAddress address, int port) DatagramPacket(byte data[], int offset, int length, InetAddress addresss ,int port) \u7528 DatagramSocket \u7c7b\u7684\u5bf9\u8c61\u6765\u53d1\u9001\u6570\u636e\u5305 java DatagramSocket mail_out = new DatagramSocket(); mail_out.send(data_pack); \u63a5\u6536\u6570\u636e\u5305 \u540c\u6837\u4f7f\u7528 DatagramSocket \u7c7b\u7684\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\uff1a DatagramSocket(int port) \u7aef\u53e3\u53c2\u6570\u5fc5\u987b\u548c\u5f85\u63a5\u6536\u7684\u6570\u636e\u5305\u7aef\u53e3\u76f8\u540c \u4f7f\u7528 receive(DatagramPacket pack) \u63a5\u6536\u6570\u636e\u5305 \u63d0\u524d\u51c6\u5907\u4e00\u4e2a\u6570\u636e\u5305\u4ee5\u4fbf\u6536\u53d6\u6570\u636e\u5305 java byte data[] = new byte[100]; int length = 90; DatagramPacket pack = new DatagramPacket(data, length); mail_in.receive(pack); receive() \u65b9\u6cd5\u53ef\u80fd\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u6536\u5230\u6570\u636e\u5305","title":"Java\u7f51\u7edc\u7f16\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#java","text":"","title":"Java\u7f51\u7edc\u7f16\u7a0b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#url","text":"","title":"URL\u7c7b"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_1","text":"\u4f7f\u7528\u5b57\u7b26\u4e32\u521b\u5efa\u4e00\u4e2aURL\u5bf9\u8c61","title":"\u6784\u9020\u65b9\u6cd5"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#url_1","text":"\u5bf9\u8c61\u8c03\u7528 InputStream openStream() \u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u8f93\u5165\u6d41","title":"\u8bfb\u53d6URL\u4e2d\u7684\u8d44\u6e90"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#-url","text":"","title":"- \u8be5\u8f93\u5165\u6d41\u6307\u5411URL\u5bf9\u8c61\u6240\u5305\u542b\u7684\u8d44\u6e90"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_2","text":"","title":"\u5957\u63a5\u5b57"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_3","text":"\u5f53\u4e24\u4e2a\u7a0b\u5e8f\u9700\u8981\u901a\u4fe1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528Socket\u7c7b\u5efa\u7acb\u5957\u63a5\u5b57\u5bf9\u8c61\u5e76\u8fde\u63a5\u5728\u4e00\u8d77","title":"\u5957\u63a5\u5b57\u6982\u8ff0"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_4","text":"\u5ba2\u6237\u7aef\u7a0b\u5e8f\u4f7f\u7528Socket\u7c7b\u5efa\u7acb\u8d1f\u8d23\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5957\u63a5\u5b57\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\uff1a Socket(String host, int port) throws IOException \u5ba2\u6237\u7aef\u7528\u8f93\u5165\u6d41( getInputStream() )\u53ef\u4ee5\u8bfb\u53d6\u670d\u52a1\u5668\u5199\u5230\u8f93\u51fa\u6d41( DataOutputStream )\u4e2d\u7684\u6570\u636e \u670d\u52a1\u5668\u7528\u8f93\u5165\u6d41\u53ef\u4ee5\u8bfb\u53d6\u5ba2\u6237\u7aef\u5199\u5230\u8f93\u51fa\u6d41\u4e2d\u7684\u6570\u636e","title":"\u5ba2\u6237\u7aef\u5957\u63a5\u5b57"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#serversocket","text":"\u670d\u52a1\u5668\u7aef\u5fc5\u987b\u5efa\u7acb\u4e00\u4e2aServerSocket\u5bf9\u8c61\uff08\u7c7b\u4f3c\u90ae\u5c40\u4e2d\u7684\u4e1a\u52a1\u5458\uff09 \u670d\u52a1\u5668\u7684ServerSocket\u5bf9\u8c61\u5efa\u7acb\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 accept() \u65b9\u6cd5\u5c06\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57\u548c\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u8fde\u63a5\u8d77\u6765 \u6ce8\u610f\uff1a accpet() \u65b9\u6cd5\u4f1a\u963b\u585e\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u76f4\u5230\u63a5\u6536\u5230\u5ba2\u6237\u7684\u547c\u53eb\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aSocket\u5bf9\u8c61 \u5efa\u7acb\u8fde\u63a5\u540e\uff0c\u670d\u52a1\u5668\u7aef\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u76f8\u5173\u7684\u65b9\u6cd5\u83b7\u53d6\u5ba2\u6237\u7aef\u7684IP\u5730\u5740\u548c\u7aef\u53e3 socket\u5bf9\u8c61\u4f7f\u7528\u5b8c\u6bd5\u540e\u9700\u8981\u81ea\u884c\u5173\u95ed \u6ce8\u610f\u5173\u95ed\u8f93\u51fa\u6d41","title":"ServerSocket\u5bf9\u8c61\u4e0e\u670d\u52a1\u5668\u7aef\u5957\u63a5\u5b57"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_5","text":"\u5957\u63a5\u5b57\u901a\u4fe1\u4e2d\u7684\u4e24\u4e2a\u57fa\u672c\u539f\u5219\uff1a \u670d\u52a1\u5668\u542f\u52a8\u4e00\u4e2a\u4e13\u95e8\u7684\u7ebf\u7a0b\uff0c\u5728\u8be5\u7ebf\u7a0b\u4e2d\u548c\u5ba2\u6237\u7684\u5957\u63a5\u5b57\u5efa\u7acb\u8fde\u63a5 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u90fd\u9700\u8981\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8bfb\u53d6\u4fe1\u606f","title":"\u4f7f\u7528\u591a\u7ebf\u7a0b\u6280\u672f"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#udp","text":"\u57fa\u4e8eUDP\u7684\u4fe1\u606f\u4f20\u9012\u66f4\u5feb\uff0c\u4f46\u4e0d\u63d0\u4f9b\u53ef\u9760\u6027\u4fdd\u8bc1 \u57fa\u4e8eUDP\u901a\u4fe1\u7684\u57fa\u672c\u6a21\u5f0f\uff1a","title":"UDP\u6570\u636e\u62a5"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_6","text":"\u4f7f\u7528 DatagramPacket \u7c7b\u5c06\u6570\u636e\u6253\u5305 \u4e24\u4e2a\u6784\u9020\u65b9\u6cd5\u5c06\u6570\u636e\u6253\u5305\uff1a DatagramPacket(byte data[], int length, InetAddress address, int port) DatagramPacket(byte data[], int offset, int length, InetAddress addresss ,int port) \u7528 DatagramSocket \u7c7b\u7684\u5bf9\u8c61\u6765\u53d1\u9001\u6570\u636e\u5305 java DatagramSocket mail_out = new DatagramSocket(); mail_out.send(data_pack);","title":"\u53d1\u9001\u6570\u636e\u5305"},{"location":"Java/%E8%BF%9B%E9%98%B6/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#_7","text":"\u540c\u6837\u4f7f\u7528 DatagramSocket \u7c7b\u7684\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\uff1a DatagramSocket(int port) \u7aef\u53e3\u53c2\u6570\u5fc5\u987b\u548c\u5f85\u63a5\u6536\u7684\u6570\u636e\u5305\u7aef\u53e3\u76f8\u540c \u4f7f\u7528 receive(DatagramPacket pack) \u63a5\u6536\u6570\u636e\u5305 \u63d0\u524d\u51c6\u5907\u4e00\u4e2a\u6570\u636e\u5305\u4ee5\u4fbf\u6536\u53d6\u6570\u636e\u5305 java byte data[] = new byte[100]; int length = 90; DatagramPacket pack = new DatagramPacket(data, length); mail_in.receive(pack); receive() \u65b9\u6cd5\u53ef\u80fd\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u6536\u5230\u6570\u636e\u5305","title":"\u63a5\u6536\u6570\u636e\u5305"},{"location":"Java/%E8%BF%9B%E9%98%B6/StringBuffer%E5%92%8CStringBuilder/","text":"StringBuffer\u548cStringBuilder \u4e00\u3001StringBuilder \u901f\u5ea6\u5feb\uff08\u5efa\u8bae\u4f7f\u7528\uff09 \u4e0eStringBuffer\u7684\u533a\u522b\uff1a\u975e\u7ebf\u7a0b\u5b89\u5168 \u6784\u9020\u5668 \u65b9\u6cd5\uff1a append(String s) \uff1a\u5728\u5c3e\u90e8\u6dfb\u52a0s\u5b57\u7b26\u4e32 insert(int location, String s) \uff1a\u5728location\u4f4d\u7f6e\u6dfb\u52a0s\u5b57\u7b26\u4e32 delete(int begin, int end) \uff1a\u5220\u9664\u4ecebegin\u5f00\u59cb\u5230end\u7684\u5b57\u7b26\u4e32 \u4e8c\u3001StringBuffer \u65b9\u6cd5 append(String s) \uff1a\u5728\u5c3e\u90e8\u6dfb\u52a0s\u5b57\u7b26\u4e32 insert(int location, String s) \uff1a\u5728location\u4f4d\u7f6e\u6dfb\u52a0s\u5b57\u7b26\u4e32 delete(int begin, int end) \uff1a\u5220\u9664\u4ecebegin\u5f00\u59cb\u5230end\u7684\u5b57\u7b26\u4e32 reverse() \uff1a\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c replace(int begin, int end, String s) \uff1a\u4ecebegin\u5f00\u59cb\u5230end\u66ff\u6362\u4e3as\u5b57\u7b26\u4e32 capacity() \uff1a\u8fd4\u56de\u5bb9\u91cf charAt(int index) \uff1a\u8fd4\u56deindex\u5904\u7684\u5b57\u7b26","title":"StringBuffer\u548cStringBuilder"},{"location":"Java/%E8%BF%9B%E9%98%B6/StringBuffer%E5%92%8CStringBuilder/#stringbufferstringbuilder","text":"","title":"StringBuffer\u548cStringBuilder"},{"location":"Java/%E8%BF%9B%E9%98%B6/StringBuffer%E5%92%8CStringBuilder/#stringbuilder","text":"\u901f\u5ea6\u5feb\uff08\u5efa\u8bae\u4f7f\u7528\uff09 \u4e0eStringBuffer\u7684\u533a\u522b\uff1a\u975e\u7ebf\u7a0b\u5b89\u5168 \u6784\u9020\u5668 \u65b9\u6cd5\uff1a append(String s) \uff1a\u5728\u5c3e\u90e8\u6dfb\u52a0s\u5b57\u7b26\u4e32 insert(int location, String s) \uff1a\u5728location\u4f4d\u7f6e\u6dfb\u52a0s\u5b57\u7b26\u4e32 delete(int begin, int end) \uff1a\u5220\u9664\u4ecebegin\u5f00\u59cb\u5230end\u7684\u5b57\u7b26\u4e32","title":"\u4e00\u3001StringBuilder"},{"location":"Java/%E8%BF%9B%E9%98%B6/StringBuffer%E5%92%8CStringBuilder/#stringbuffer","text":"\u65b9\u6cd5 append(String s) \uff1a\u5728\u5c3e\u90e8\u6dfb\u52a0s\u5b57\u7b26\u4e32 insert(int location, String s) \uff1a\u5728location\u4f4d\u7f6e\u6dfb\u52a0s\u5b57\u7b26\u4e32 delete(int begin, int end) \uff1a\u5220\u9664\u4ecebegin\u5f00\u59cb\u5230end\u7684\u5b57\u7b26\u4e32 reverse() \uff1a\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c replace(int begin, int end, String s) \uff1a\u4ecebegin\u5f00\u59cb\u5230end\u66ff\u6362\u4e3as\u5b57\u7b26\u4e32 capacity() \uff1a\u8fd4\u56de\u5bb9\u91cf charAt(int index) \uff1a\u8fd4\u56deindex\u5904\u7684\u5b57\u7b26","title":"\u4e8c\u3001StringBuffer"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/","text":"\u5904\u7406\u4e8b\u4ef6 \u4e8b\u4ef6\u5904\u7406\u6a21\u5f0f \u4e8b\u4ef6\u6e90\uff1a\u6240\u6709\u53ef\u4ee5 \u4ea7\u751f\u4e8b\u4ef6 \u7684\u5bf9\u8c61 \u76d1\u89c6\u5668 \u5904\u7406\u4e8b\u4ef6\u7684\u63a5\u53e3 Java\u8981\u6c42\u76d1\u89c6\u5668\u5fc5\u987b\u548c\u4e00\u4e2a\u4e13\u7528\u4e8e\u5904\u7406\u4e8b\u4ef6\u7684\u65b9\u6cd5\u5b9e\u65bd\u7ed1\u5b9a\uff0c\u4e3a\u4e86\u8fbe\u5230\u6b64\u76ee\u7684\uff0c\u8981\u6c42\u521b\u5efa\u76d1\u89c6\u5668\u7684\u7c7b\u5fc5\u987b\u5b9e\u73b0Java\u89c4\u5b9a\u7684\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4e2d\u6709\u4e13\u7528\u4e8e\u5904\u7406\u4e8b\u4ef6\u7684\u65b9\u6cd5 ActionEvent\u4e8b\u4ef6 ActionEvent \u4e8b\u4ef6\u6e90 \u6587\u672c\u6846\u3001\u6309\u94ae\u3001\u83dc\u5355\u9879\u3001\u5bc6\u7801\u6846\u548c\u5355\u9009\u6309\u94ae\u90fd\u53ef\u4ee5\u51fa\u53d1 ActionEvent\u4e8b\u4ef6 \u6ce8\u518c\u76d1\u89c6\u5668 Java\u89c4\u5b9a\u80fd\u89e6\u53d1 ActionEvent\u4e8b\u4ef6 \u7684\u7ec4\u4ef6\u4f7f\u7528\u65b9\u6cd5 addActionListener(ActionListener listener) \u5c06\u5b9e\u73b0 ActionListener \u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b\u6ce8\u518c\u4e3a\u4e8b\u4ef6\u6e90\u7684\u76d1\u89c6\u5668 ActionListener \u63a5\u53e3 \u8be5\u63a5\u53e3\u4e2d\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5 public void actionPerformed(ActionEvent e) \u4e8b\u4ef6\u6e90\u51fa\u53d1 ActionEvent \u4e8b\u4ef6\u540e\uff0c\u76d1\u89c6\u5668\u5bf9\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5`actionPerformed() ActionEvent\u7c7b \u4e2d\u7684\u65b9\u6cd5 public Object getSource() \uff1a\u53ef\u4ee5\u83b7\u53d6\u53d1\u751f ActionEvent \u4e8b\u4ef6\u7684\u4e8b\u4ef6\u6e90\u5bf9\u8c61\u7684\u5f15\u7528 public String getActionCommand() \uff1a\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u548c\u4e8b\u4ef6\u76f8\u5173\u7684\u4e00\u4e2a\"\u547d\u4ee4\"\u5b57\u7b26\u4e32 ItemEvent\u4e8b\u4ef6 ItemEvent \u4e8b\u4ef6\u6e90 \u9009\u62e9\u6846\u3001\u4e0b\u62c9\u5217\u8868 \u6ce8\u518c\u76d1\u89c6\u5668\u76f8\u5173\u7ec4\u4ef6\u4f7f\u7528 addItemListener(ItemListener listener) ItemListener \u63a5\u53e3 \u4ec5\u6709\u4e00\u4e2a\u65b9\u6cd5 public void itemStateChanged(ItemEvent e) \u6ce8\uff1a\u4e0b\u62c9\u5217\u8868\u4e5f\u80fd\u89e6\u53d1ActionEvent\u4e8b\u4ef6\uff0c\u7528\u6237\u5355\u51fb\u4e0b\u62c9\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u9009\u9879\u5c06\u51fa\u53d1ActionEvent\u4e8b\u4ef6 DocumentEvent\u4e8b\u4ef6 MouseEvent\u4e8b\u4ef6 FocusEvent\u4e8b\u4ef6 WindowEvent\u4e8b\u4ef6","title":"\u5904\u7406\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#_1","text":"","title":"\u5904\u7406\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#_2","text":"\u4e8b\u4ef6\u6e90\uff1a\u6240\u6709\u53ef\u4ee5 \u4ea7\u751f\u4e8b\u4ef6 \u7684\u5bf9\u8c61 \u76d1\u89c6\u5668 \u5904\u7406\u4e8b\u4ef6\u7684\u63a5\u53e3 Java\u8981\u6c42\u76d1\u89c6\u5668\u5fc5\u987b\u548c\u4e00\u4e2a\u4e13\u7528\u4e8e\u5904\u7406\u4e8b\u4ef6\u7684\u65b9\u6cd5\u5b9e\u65bd\u7ed1\u5b9a\uff0c\u4e3a\u4e86\u8fbe\u5230\u6b64\u76ee\u7684\uff0c\u8981\u6c42\u521b\u5efa\u76d1\u89c6\u5668\u7684\u7c7b\u5fc5\u987b\u5b9e\u73b0Java\u89c4\u5b9a\u7684\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4e2d\u6709\u4e13\u7528\u4e8e\u5904\u7406\u4e8b\u4ef6\u7684\u65b9\u6cd5","title":"\u4e8b\u4ef6\u5904\u7406\u6a21\u5f0f"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#actionevent","text":"ActionEvent \u4e8b\u4ef6\u6e90 \u6587\u672c\u6846\u3001\u6309\u94ae\u3001\u83dc\u5355\u9879\u3001\u5bc6\u7801\u6846\u548c\u5355\u9009\u6309\u94ae\u90fd\u53ef\u4ee5\u51fa\u53d1 ActionEvent\u4e8b\u4ef6 \u6ce8\u518c\u76d1\u89c6\u5668 Java\u89c4\u5b9a\u80fd\u89e6\u53d1 ActionEvent\u4e8b\u4ef6 \u7684\u7ec4\u4ef6\u4f7f\u7528\u65b9\u6cd5 addActionListener(ActionListener listener) \u5c06\u5b9e\u73b0 ActionListener \u63a5\u53e3\u7684\u7c7b\u7684\u5b9e\u4f8b\u6ce8\u518c\u4e3a\u4e8b\u4ef6\u6e90\u7684\u76d1\u89c6\u5668 ActionListener \u63a5\u53e3 \u8be5\u63a5\u53e3\u4e2d\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5 public void actionPerformed(ActionEvent e) \u4e8b\u4ef6\u6e90\u51fa\u53d1 ActionEvent \u4e8b\u4ef6\u540e\uff0c\u76d1\u89c6\u5668\u5bf9\u7528\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5`actionPerformed() ActionEvent\u7c7b \u4e2d\u7684\u65b9\u6cd5 public Object getSource() \uff1a\u53ef\u4ee5\u83b7\u53d6\u53d1\u751f ActionEvent \u4e8b\u4ef6\u7684\u4e8b\u4ef6\u6e90\u5bf9\u8c61\u7684\u5f15\u7528 public String getActionCommand() \uff1a\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u548c\u4e8b\u4ef6\u76f8\u5173\u7684\u4e00\u4e2a\"\u547d\u4ee4\"\u5b57\u7b26\u4e32","title":"ActionEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#itemevent","text":"ItemEvent \u4e8b\u4ef6\u6e90 \u9009\u62e9\u6846\u3001\u4e0b\u62c9\u5217\u8868 \u6ce8\u518c\u76d1\u89c6\u5668\u76f8\u5173\u7ec4\u4ef6\u4f7f\u7528 addItemListener(ItemListener listener) ItemListener \u63a5\u53e3 \u4ec5\u6709\u4e00\u4e2a\u65b9\u6cd5 public void itemStateChanged(ItemEvent e) \u6ce8\uff1a\u4e0b\u62c9\u5217\u8868\u4e5f\u80fd\u89e6\u53d1ActionEvent\u4e8b\u4ef6\uff0c\u7528\u6237\u5355\u51fb\u4e0b\u62c9\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u9009\u9879\u5c06\u51fa\u53d1ActionEvent\u4e8b\u4ef6","title":"ItemEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#documentevent","text":"","title":"DocumentEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#mouseevent","text":"","title":"MouseEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#focusevent","text":"","title":"FocusEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E5%A4%84%E7%90%86%E4%BA%8B%E4%BB%B6/#windowevent","text":"","title":"WindowEvent\u4e8b\u4ef6"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/","text":"\u7c7b\u578b\u4fe1\u606f \u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u4f7f\u5f97\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u73b0\u4e2a\u4f7f\u7528\u7c7b\u578b\u4fe1\u606f \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f 1. \u4f20\u7edf\u7684RTTI\uff1a\u5047\u5b9a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u6709\u7684\u7c7b\u578b 2. \u53cd\u5c04\uff1a\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u53d1\u73b0\u548c\u4f7f\u7528\u7c7b\u7684\u4fe1\u606f \u4e3a\u4ec0\u4e48\u9700\u8981RTTI RTTI\u540d\u5b57\u7684\u542b\u4e49\uff1a\u5728\u8fd0\u884c\u65f6\uff0c\u8bc6\u522b\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b Class\u5bf9\u8c61 \u5b83\u5305\u542b\u4e86\u4e0e \u7c7b\u6709\u5173\u7684\u4fe1\u606f \u6bcf\u4e00\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2aClass\u5bf9\u8c61->Class\u5bf9\u8c61\u662f\u88ab\u4fdd\u5b58\u5728\u4e00\u4e2a \u540c\u540d\u7684.class\u6587\u4ef6 \u4e2d \u4e3a\u4e86\u751f\u6210\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u7684JVM\u5c06\u4f7f\u7528\u88ab\u79f0\u4e3a\u201c \u7c7b\u52a0\u8f7d\u5668 \u201c\u7684\u5b50\u7cfb\u7edf \u6240\u6709\u7684\u7c7b\u90fd\u662f\u5728\u5bf9\u5176\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\uff0c\u52a8\u6001\u52a0\u8f7d\u5230JVM\u4e2d \u5f53\u7a0b\u5e8f\u521b\u5efa\u7b2c\u4e00\u4e2a\u5bf9\u7c7b\u7684\u9759\u6001\u6210\u5458\u5f15\u7528\u65f6\uff0c\u5c31\u4f1a\u52a0\u8f7d\u8fd9\u4e2a\u7c7b \u6784\u9020\u5668\u4e5f\u662f\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5373\u4f7f\u5728\u6784\u9020\u5668\u524d\u6ca1\u6709\u4f7f\u7528static\u5173\u952e\u5b57\u3002\u56e0\u6b64\uff0c\u4f7f\u7528new\u64cd\u4f5c\u7b26\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u4e5f\u4f1a\u88ab\u5f53\u4f5c\u5bf9\u7c7b\u7684\u9759\u6001\u6210\u5458\u5f15\u7528\u3002 \u5176\u4f59\u5404\u4e2a\u90e8\u5206\u5b9e\u5728\u5fc5\u9700\u65f6\u624d\u52a0\u8f7d \u521b\u5efa\u7684\u8fc7\u7a0b\uff1a \u9996\u5148\u68c0\u67e5\u8fd9\u4e2a \u7c7b\u7684Class\u5bf9\u8c61 \u662f\u5426\u5df2\u7ecf\u52a0\u8f7d \u5982\u679c\u5c1a\u672a\u52a0\u8f7d\uff0c\u9ed8\u8ba4\u7684\u7c7b\u52a0\u8f7d\u5668\u5c31 \u4f1a\u6839\u636e\u7c7b\u540d\u67e5\u627e .class \u6587\u4ef6 \u5728\u8fd9\u4e2a\u7c7b\u7684\u5b57\u8282\u7801\u88ab\u52a0\u8f7d\u65f6\uff0c\u4ed6\u4eec\u4f1a\u63a5\u53d7\u9a8c\u8bc1\uff0c\u786e\u4fdd\u5176\u6ca1\u6709\u88ab\u7834\u574f\u3001\u5e76\u4e14\u4e0d\u5305\u542b\u4e0d\u826f\u7684java\u4ee3\u7801 \u4e00\u65e6\u67d0\u4e2a\u7c7b\u7684Class\u5bf9\u8c61\u88ab\u8f7d\u5165\u5185\u5b58\uff0c\u4ed6\u5c31 \u88ab\u7528\u6765\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u6240\u6709\u5bf9\u8c61 Class\u5bf9\u8c61\u7684\u57fa\u672c\u64cd\u4f5c\uff1a forName() \u53c2\u6570\uff1aString \u8fd4\u56de\u503c\uff1a\u4e00\u4e2aClass\u5bf9\u8c61\u7684\u5f15\u7528 \u5982\u679c\u627e\u4e0d\u5230\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u53ca\u629b\u51fa\u5f02\u5e38 ClassNotFoundException \u5982\u679c\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 getClass() \u65b9\u6cd5\u6765\u53d6\u5f97Class\u7684\u5f15\u7528\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c5e\u4e8e Object \u7684\u4e00\u90e8\u5206 \u5728\u4f20\u9012\u7ed9 forName() \u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u5fc5\u987b\u4f7f\u7528\u5168\u9650\u5b9a\u540d\uff08\u5305\u542b\u5305\u540d\uff09 getName() \u4ea7\u751f\u5168\u9650\u5b9a\u7684\u7c7b\u540d \u5206\u522b\u4f7f\u7528 getSimpleName() \u548c getCanonicalName() \u6765\u4ea7\u751f\u662f\u5426\u5b8c\u6574\u7684\u7c7b\u540d isInterface() \u662f\u5426\u662f\u4e00\u4e2a\u63a5\u53e3 getSUperclass() \u67e5\u8be2\u5176\u76f4\u63a5\u57fa\u7c7b \u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u53d1\u73b0\u4e00\u4e2a\u5bf9\u8c61\u5b8c\u6574\u7684\u7c7b\u7ee7\u627f\u7ed3\u6784 newInstance() \u5b9e\u73b0\u865a\u62df\u6784\u9020\u5668\u7684\u4e00\u79cd\u9014\u5f84 \u4f7f\u7528 newInstance() \u6765\u521b\u5efa\u7684\u7c7b\uff0c\u5fc5\u987b\u5e26\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u5668 \u7c7b\u5b57\u9762\u5e38\u91cf \u53e6\u4e00\u79cd\u751f\u6210\u5bf9Class\u5bf9\u8c61\u7684\u5f15\u7528\uff1a \u5bf9\u8c61.class \u4f18\u52bf\uff1a \u66f4\u7b80\u5355 \u66f4\u5b89\u5168 \u66f4\u9ad8\u6548 \u9002\u7528\u8303\u56f4\uff1a \u666e\u901a\u7684\u7c7b \u63a5\u53e3\u3001\u6570\u7ec4\u4ee5\u53ca\u57fa\u672c\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u5668\u7c7b\u8fd8\u6709\u4e00\u4e2a\u6807\u51c6\u5b57\u6bb5 TYPE \uff1aTYPE\u5b57\u6bb5\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u6307\u5411\u5bf9\u5e94\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684Class\u5bf9\u8c61 \u6cdb\u5316\u7684Class\u5f15\u7528 Class<Integer> IntegerClass = int.class \u901a\u8fc7\u4f7f\u7528\u6cdb\u578b\u8bed\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5 \u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26 ? \u6765\u8868\u793a\u4efb\u4f55\u4e8b\u7269\uff1a Class<?> class = something.class Class<?> \u4e0e Class \u7b49\u4ef7\uff0c\u4f46\u4f18\u4e8e\u540e\u8005 \u8868\u793a\u4f60\u5e76\u975e\u662f\u78b0\u5de7\u6216\u8005\u7531\u4e8e\u758f\u5ffd\uff0c\u800c\u4f7f\u7528\u4e86\u4e00\u4e2a\u975e\u5177\u4f53\u7684\u5f15\u7528 \u5c06\u901a\u914d\u7b26\u4e0e extends \u7ed3\u5408\uff0c\u9650\u5b9a\u4e00\u4e2a\u8303\u56f4\uff1a Class<? extends SuperClass> class = something.class newInstance() \u5c06\u8fd4\u56de\u5bf9\u8c61\u7684\u786e\u5207\u7c7b\u578b \u65b0\u7684\u8f6c\u578b\u8bed\u6cd5\uff1a cast() cast() \u65b9\u6cd5\u63a5\u53d7\u53c2\u6570\u5bf9\u8c61\uff0c\u5c06\u5176\u8f6c\u578b\u4e3aClass\u5f15\u7528\u7684\u7c7b\u578b \u7c7b a = classname.cast(b) instanceof\u4e0eClass\u7684\u7b49\u4ef7\u6027 instanceof() \u4e0e isInstance() \u7b49\u4ef7 == \u4e0e equals() \u7b49\u4ef7 instanceof() \u4fdd\u6301\u4e86\u7c7b\u578b\u7684\u6982\u5ff5\uff0c\u6307\uff1a \u4f60\u662f\u8fd9\u4e2a\u7c7b\u561b\uff1f\u6216\u4f60\u662f\u8fd9\u4e2a\u7c7b\u7684\u6d3e\u751f\u7c7b\u561b\uff1f == \u6bd4\u8f83\u5b9e\u9645\u7684\u5bf9\u8c61\uff0c\u4e0d\u8003\u8651\u7ee7\u627f \u53cd\u5c04\uff1a\u8fd0\u884c\u65f6\u7684\u7c7b\u4fe1\u606f RTTI\u7684\u9650\u5236\uff1a\u8fd9\u4e2a\u7c7b\u578b\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u4e00\u81f4\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u7528RTTI\u8bc6\u522b\u5b83\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b \u8fd0\u884c\u65f6\u83b7\u5f97\u7c7b\u7684\u4fe1\u606f\u7684\u53e6\u4e00\u4e2a\u52a8\u673a\uff1a\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09 java.lang.reflect Class\u7c7b\u4e0ejava.lang.reflect\u7c7b\u5e93\u4e00\u8d77\u5bf9\u53cd\u5c04\u7684\u6982\u5ff5\u8fdb\u884c\u4e86\u652f\u6301 Field \u7c7b Class.getFields() \uff1a\u8fd4\u56de\u5b57\u6bb5\u7684\u5bf9\u8c61\u6570\u7ec4 \u4e0d\u80fd\u5f97\u5230\u79c1\u6709\u7684\u5c5e\u6027 \u4f7f\u7528 get() set() \u65b9\u6cd5\u8bfb\u53d6\u548c\u4fee\u6539\u4e0eField\u5bf9\u8c61\u5173\u8054\u7684\u5b57\u6bb5 Method \u7c7b Class.getMethod() \uff1a\u8fd4\u56de\u65b9\u6cd5\u7684\u5bf9\u8c61\u6570\u7ec4 \u4f7f\u7528 invoke() \u65b9\u6cd5\u5bf9\u7528\u4e0eMethod\u5bf9\u8c61\u5173\u8054\u7684\u65b9\u6cd5 Constructor \u7c7b Class.getConstructors() \uff1a\u8fd4\u56de\u6784\u9020\u5668\u7684\u5bf9\u8c61\u6570\u7ec4 Class.getConstructor() \uff1a\u5728()\u53ef\u4ee5\u6307\u5b9a\u6784\u9020\u5668\u53c2\u6570\u7c7b\u578b\uff0c\u7a7a\u5373\u8fd4\u56de\u65e0\u53c2\u6784\u9020\u5668 \u4f7f\u7528Constructor\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 Class.forName() \u751f\u6210\u7684\u7ed3\u679c\u5728\u7f16\u8bd1\u65f6\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u56e0\u6b64\u6240\u6709\u65b9\u6cd5\u7279\u5f81\u7b7e\u540d\u4fe1\u606f\u90fd\u662f\u5728\u6267\u884c\u65f6\u88ab\u63d0\u53d6\u51fa\u6765 \u4f18\u70b9\u548c\u7f3a\u70b9 \u4f18\u70b9\uff1a\u53ef\u4ee5\u52a8\u6001\u7684\u521b\u5efa\u548c\u4f7f\u7528\u5bf9\u8c61\uff08\u4e5f\u662f\u6846\u67b6\u5e95\u5c42\u6838\u5fc3\uff09\u4f7f\u7528\u7075\u6d3b \u4f7f\u7528\u53cd\u5c04\u57fa\u672c\u662f\u89e3\u91ca\u6267\u884c\uff0c\u5bf9\u6267\u884c\u901f\u5ea6\u6709\u5f71\u54cd \u53cd\u5c04\u5bf9\u7528\u4f18\u5316\u2014\u2014\u5173\u95ed\u8bbf\u95ee\u68c0\u67e5 Method \u3001 Field \u3001 Constructor \u5bf9\u8c61\u90fd\u6709 setAccessible() \u65b9\u6cd5 setAccessible() \uff1a\u542f\u52a8\u548c\u7981\u7528\u8bbf\u95ee\u5b89\u5168\u68c0\u67e5\u7684\u5f00\u5173 \u53c2\u6570\u503c\u4e3atrue\u8868\u793a\u53cd\u5c04\u7684\u5bf9\u8c61\u5728\u4f7f\u7528\u65f6\u53d6\u6d88\u8bbf\u95ee\u68c0\u67e5\uff0c\u63d0\u9ad8\u53cd\u5c04\u7684\u6548\u7387 java\u53cd\u5c04\u771f\u7684\u5f88\u6162\u5417_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u7c7b\u578b\u4fe1\u606f"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#_1","text":"\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u4f7f\u5f97\u4f60\u53ef\u4ee5\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u53d1\u73b0\u4e2a\u4f7f\u7528\u7c7b\u578b\u4fe1\u606f \u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f 1. \u4f20\u7edf\u7684RTTI\uff1a\u5047\u5b9a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u6709\u7684\u7c7b\u578b 2. \u53cd\u5c04\uff1a\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u53d1\u73b0\u548c\u4f7f\u7528\u7c7b\u7684\u4fe1\u606f","title":"\u7c7b\u578b\u4fe1\u606f"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#rtti","text":"RTTI\u540d\u5b57\u7684\u542b\u4e49\uff1a\u5728\u8fd0\u884c\u65f6\uff0c\u8bc6\u522b\u4e00\u4e2a\u5bf9\u8c61\u7684\u7c7b\u578b","title":"\u4e3a\u4ec0\u4e48\u9700\u8981RTTI"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#class","text":"\u5b83\u5305\u542b\u4e86\u4e0e \u7c7b\u6709\u5173\u7684\u4fe1\u606f \u6bcf\u4e00\u4e2a\u7c7b\u90fd\u6709\u4e00\u4e2aClass\u5bf9\u8c61->Class\u5bf9\u8c61\u662f\u88ab\u4fdd\u5b58\u5728\u4e00\u4e2a \u540c\u540d\u7684.class\u6587\u4ef6 \u4e2d \u4e3a\u4e86\u751f\u6210\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u7684JVM\u5c06\u4f7f\u7528\u88ab\u79f0\u4e3a\u201c \u7c7b\u52a0\u8f7d\u5668 \u201c\u7684\u5b50\u7cfb\u7edf \u6240\u6709\u7684\u7c7b\u90fd\u662f\u5728\u5bf9\u5176\u7b2c\u4e00\u6b21\u4f7f\u7528\u65f6\uff0c\u52a8\u6001\u52a0\u8f7d\u5230JVM\u4e2d \u5f53\u7a0b\u5e8f\u521b\u5efa\u7b2c\u4e00\u4e2a\u5bf9\u7c7b\u7684\u9759\u6001\u6210\u5458\u5f15\u7528\u65f6\uff0c\u5c31\u4f1a\u52a0\u8f7d\u8fd9\u4e2a\u7c7b \u6784\u9020\u5668\u4e5f\u662f\u7c7b\u7684\u9759\u6001\u65b9\u6cd5\uff0c\u5373\u4f7f\u5728\u6784\u9020\u5668\u524d\u6ca1\u6709\u4f7f\u7528static\u5173\u952e\u5b57\u3002\u56e0\u6b64\uff0c\u4f7f\u7528new\u64cd\u4f5c\u7b26\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u4e5f\u4f1a\u88ab\u5f53\u4f5c\u5bf9\u7c7b\u7684\u9759\u6001\u6210\u5458\u5f15\u7528\u3002 \u5176\u4f59\u5404\u4e2a\u90e8\u5206\u5b9e\u5728\u5fc5\u9700\u65f6\u624d\u52a0\u8f7d \u521b\u5efa\u7684\u8fc7\u7a0b\uff1a \u9996\u5148\u68c0\u67e5\u8fd9\u4e2a \u7c7b\u7684Class\u5bf9\u8c61 \u662f\u5426\u5df2\u7ecf\u52a0\u8f7d \u5982\u679c\u5c1a\u672a\u52a0\u8f7d\uff0c\u9ed8\u8ba4\u7684\u7c7b\u52a0\u8f7d\u5668\u5c31 \u4f1a\u6839\u636e\u7c7b\u540d\u67e5\u627e .class \u6587\u4ef6 \u5728\u8fd9\u4e2a\u7c7b\u7684\u5b57\u8282\u7801\u88ab\u52a0\u8f7d\u65f6\uff0c\u4ed6\u4eec\u4f1a\u63a5\u53d7\u9a8c\u8bc1\uff0c\u786e\u4fdd\u5176\u6ca1\u6709\u88ab\u7834\u574f\u3001\u5e76\u4e14\u4e0d\u5305\u542b\u4e0d\u826f\u7684java\u4ee3\u7801 \u4e00\u65e6\u67d0\u4e2a\u7c7b\u7684Class\u5bf9\u8c61\u88ab\u8f7d\u5165\u5185\u5b58\uff0c\u4ed6\u5c31 \u88ab\u7528\u6765\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u6240\u6709\u5bf9\u8c61 Class\u5bf9\u8c61\u7684\u57fa\u672c\u64cd\u4f5c\uff1a forName() \u53c2\u6570\uff1aString \u8fd4\u56de\u503c\uff1a\u4e00\u4e2aClass\u5bf9\u8c61\u7684\u5f15\u7528 \u5982\u679c\u627e\u4e0d\u5230\u8981\u52a0\u8f7d\u7684\u7c7b\uff0c\u53ca\u629b\u51fa\u5f02\u5e38 ClassNotFoundException \u5982\u679c\u5df2\u7ecf\u62e5\u6709\u4e86\u4e00\u4e2a\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 getClass() \u65b9\u6cd5\u6765\u53d6\u5f97Class\u7684\u5f15\u7528\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u5c5e\u4e8e Object \u7684\u4e00\u90e8\u5206 \u5728\u4f20\u9012\u7ed9 forName() \u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u5fc5\u987b\u4f7f\u7528\u5168\u9650\u5b9a\u540d\uff08\u5305\u542b\u5305\u540d\uff09 getName() \u4ea7\u751f\u5168\u9650\u5b9a\u7684\u7c7b\u540d \u5206\u522b\u4f7f\u7528 getSimpleName() \u548c getCanonicalName() \u6765\u4ea7\u751f\u662f\u5426\u5b8c\u6574\u7684\u7c7b\u540d isInterface() \u662f\u5426\u662f\u4e00\u4e2a\u63a5\u53e3 getSUperclass() \u67e5\u8be2\u5176\u76f4\u63a5\u57fa\u7c7b \u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u53d1\u73b0\u4e00\u4e2a\u5bf9\u8c61\u5b8c\u6574\u7684\u7c7b\u7ee7\u627f\u7ed3\u6784 newInstance() \u5b9e\u73b0\u865a\u62df\u6784\u9020\u5668\u7684\u4e00\u79cd\u9014\u5f84 \u4f7f\u7528 newInstance() \u6765\u521b\u5efa\u7684\u7c7b\uff0c\u5fc5\u987b\u5e26\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u5668","title":"Class\u5bf9\u8c61"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#_2","text":"\u53e6\u4e00\u79cd\u751f\u6210\u5bf9Class\u5bf9\u8c61\u7684\u5f15\u7528\uff1a \u5bf9\u8c61.class \u4f18\u52bf\uff1a \u66f4\u7b80\u5355 \u66f4\u5b89\u5168 \u66f4\u9ad8\u6548 \u9002\u7528\u8303\u56f4\uff1a \u666e\u901a\u7684\u7c7b \u63a5\u53e3\u3001\u6570\u7ec4\u4ee5\u53ca\u57fa\u672c\u6570\u636e\u7c7b\u578b \u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u5305\u88c5\u5668\u7c7b\u8fd8\u6709\u4e00\u4e2a\u6807\u51c6\u5b57\u6bb5 TYPE \uff1aTYPE\u5b57\u6bb5\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u6307\u5411\u5bf9\u5e94\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684Class\u5bf9\u8c61","title":"\u7c7b\u5b57\u9762\u5e38\u91cf"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#class_1","text":"Class<Integer> IntegerClass = int.class \u901a\u8fc7\u4f7f\u7528\u6cdb\u578b\u8bed\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\u989d\u5916\u7684\u7c7b\u578b\u68c0\u67e5 \u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26 ? \u6765\u8868\u793a\u4efb\u4f55\u4e8b\u7269\uff1a Class<?> class = something.class Class<?> \u4e0e Class \u7b49\u4ef7\uff0c\u4f46\u4f18\u4e8e\u540e\u8005 \u8868\u793a\u4f60\u5e76\u975e\u662f\u78b0\u5de7\u6216\u8005\u7531\u4e8e\u758f\u5ffd\uff0c\u800c\u4f7f\u7528\u4e86\u4e00\u4e2a\u975e\u5177\u4f53\u7684\u5f15\u7528 \u5c06\u901a\u914d\u7b26\u4e0e extends \u7ed3\u5408\uff0c\u9650\u5b9a\u4e00\u4e2a\u8303\u56f4\uff1a Class<? extends SuperClass> class = something.class newInstance() \u5c06\u8fd4\u56de\u5bf9\u8c61\u7684\u786e\u5207\u7c7b\u578b","title":"\u6cdb\u5316\u7684Class\u5f15\u7528"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#cast","text":"cast() \u65b9\u6cd5\u63a5\u53d7\u53c2\u6570\u5bf9\u8c61\uff0c\u5c06\u5176\u8f6c\u578b\u4e3aClass\u5f15\u7528\u7684\u7c7b\u578b \u7c7b a = classname.cast(b)","title":"\u65b0\u7684\u8f6c\u578b\u8bed\u6cd5\uff1acast()"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#instanceofclass","text":"instanceof() \u4e0e isInstance() \u7b49\u4ef7 == \u4e0e equals() \u7b49\u4ef7 instanceof() \u4fdd\u6301\u4e86\u7c7b\u578b\u7684\u6982\u5ff5\uff0c\u6307\uff1a \u4f60\u662f\u8fd9\u4e2a\u7c7b\u561b\uff1f\u6216\u4f60\u662f\u8fd9\u4e2a\u7c7b\u7684\u6d3e\u751f\u7c7b\u561b\uff1f == \u6bd4\u8f83\u5b9e\u9645\u7684\u5bf9\u8c61\uff0c\u4e0d\u8003\u8651\u7ee7\u627f","title":"instanceof\u4e0eClass\u7684\u7b49\u4ef7\u6027"},{"location":"Java/%E8%BF%9B%E9%98%B6/%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF/#_3","text":"RTTI\u7684\u9650\u5236\uff1a\u8fd9\u4e2a\u7c7b\u578b\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u4e00\u81f4\uff0c\u8fd9\u6837\u624d\u80fd\u4f7f\u7528RTTI\u8bc6\u522b\u5b83\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b \u8fd0\u884c\u65f6\u83b7\u5f97\u7c7b\u7684\u4fe1\u606f\u7684\u53e6\u4e00\u4e2a\u52a8\u673a\uff1a\u8fdc\u7a0b\u65b9\u6cd5\u8c03\u7528\uff08RMI\uff09 java.lang.reflect Class\u7c7b\u4e0ejava.lang.reflect\u7c7b\u5e93\u4e00\u8d77\u5bf9\u53cd\u5c04\u7684\u6982\u5ff5\u8fdb\u884c\u4e86\u652f\u6301 Field \u7c7b Class.getFields() \uff1a\u8fd4\u56de\u5b57\u6bb5\u7684\u5bf9\u8c61\u6570\u7ec4 \u4e0d\u80fd\u5f97\u5230\u79c1\u6709\u7684\u5c5e\u6027 \u4f7f\u7528 get() set() \u65b9\u6cd5\u8bfb\u53d6\u548c\u4fee\u6539\u4e0eField\u5bf9\u8c61\u5173\u8054\u7684\u5b57\u6bb5 Method \u7c7b Class.getMethod() \uff1a\u8fd4\u56de\u65b9\u6cd5\u7684\u5bf9\u8c61\u6570\u7ec4 \u4f7f\u7528 invoke() \u65b9\u6cd5\u5bf9\u7528\u4e0eMethod\u5bf9\u8c61\u5173\u8054\u7684\u65b9\u6cd5 Constructor \u7c7b Class.getConstructors() \uff1a\u8fd4\u56de\u6784\u9020\u5668\u7684\u5bf9\u8c61\u6570\u7ec4 Class.getConstructor() \uff1a\u5728()\u53ef\u4ee5\u6307\u5b9a\u6784\u9020\u5668\u53c2\u6570\u7c7b\u578b\uff0c\u7a7a\u5373\u8fd4\u56de\u65e0\u53c2\u6784\u9020\u5668 \u4f7f\u7528Constructor\u521b\u5efa\u65b0\u7684\u5bf9\u8c61 Class.forName() \u751f\u6210\u7684\u7ed3\u679c\u5728\u7f16\u8bd1\u65f6\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u56e0\u6b64\u6240\u6709\u65b9\u6cd5\u7279\u5f81\u7b7e\u540d\u4fe1\u606f\u90fd\u662f\u5728\u6267\u884c\u65f6\u88ab\u63d0\u53d6\u51fa\u6765 \u4f18\u70b9\u548c\u7f3a\u70b9 \u4f18\u70b9\uff1a\u53ef\u4ee5\u52a8\u6001\u7684\u521b\u5efa\u548c\u4f7f\u7528\u5bf9\u8c61\uff08\u4e5f\u662f\u6846\u67b6\u5e95\u5c42\u6838\u5fc3\uff09\u4f7f\u7528\u7075\u6d3b \u4f7f\u7528\u53cd\u5c04\u57fa\u672c\u662f\u89e3\u91ca\u6267\u884c\uff0c\u5bf9\u6267\u884c\u901f\u5ea6\u6709\u5f71\u54cd \u53cd\u5c04\u5bf9\u7528\u4f18\u5316\u2014\u2014\u5173\u95ed\u8bbf\u95ee\u68c0\u67e5 Method \u3001 Field \u3001 Constructor \u5bf9\u8c61\u90fd\u6709 setAccessible() \u65b9\u6cd5 setAccessible() \uff1a\u542f\u52a8\u548c\u7981\u7528\u8bbf\u95ee\u5b89\u5168\u68c0\u67e5\u7684\u5f00\u5173 \u53c2\u6570\u503c\u4e3atrue\u8868\u793a\u53cd\u5c04\u7684\u5bf9\u8c61\u5728\u4f7f\u7528\u65f6\u53d6\u6d88\u8bbf\u95ee\u68c0\u67e5\uff0c\u63d0\u9ad8\u53cd\u5c04\u7684\u6548\u7387 java\u53cd\u5c04\u771f\u7684\u5f88\u6162\u5417_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u53cd\u5c04\uff1a\u8fd0\u884c\u65f6\u7684\u7c7b\u4fe1\u606f"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%8D%E7%94%A8%E7%B1%BB/","text":"\u590d\u7528\u7c7b","title":"\u590d\u7528\u7c7b"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%A4%8D%E7%94%A8%E7%B1%BB/#_1","text":"","title":"\u590d\u7528\u7c7b"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/","text":"\u65b9\u6cd5 \u4e00\u3001\u5b9a\u4e49 \u662f\u8bed\u53e5\u7684\u96c6\u5408\uff0c\u5171\u540c\u6267\u884c\u4e00\u4e2a\u529f\u80fd \u89e3\u51b3\u4e00\u7c7b\u95ee\u9898\u7684\u6b65\u9aa4\u7684\u6709\u5e8f\u7ec4\u5408 \u65b9\u6cd5\u5305\u542b\u4e8e\u7c7b\u6216\u5bf9\u8c61\u4e2d \u65b9\u6cd5\u5728\u7a0b\u5e8f\u4e2d\u88ab\u521b\u5efa\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u5f15\u7528 \u8bbe\u8ba1\u65b9\u6cd5\u7684\u539f\u5219\uff1a\u4e00\u4e2a\u65b9\u6cd5\u4e00\u4e2a\u529f\u80fd \u5305\u542b \u4fee\u9970\u7b26 \u8fd4\u56de\u503c\u7c7b\u578b \u65b9\u6cd5\u540d \u53c2\u6570\u7c7b\u578b \u65b9\u6cd5\u4f53 \u4e8c\u3001\u65b9\u6cd5\u7684\u91cd\u8f7d \u91cd\u8f7d\u5c31\u662f\u5728\u4e00\u4e2a\u7c7b\u4e2d\u6709\u76f8\u540c\u7684\u51fd\u6570\u540d\u79f0\uff0c\u4f46\u662f\u5f62\u53c2\u4e0d\u540c\u7684\u51fd\u6570 \u89c4\u5219 \u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c \u53c2\u6570\u5217\u8868\u5fc5\u987b\u4e0d\u540c\uff08\u4e2a\u6570\u3001\u7c7b\u578b\u3001\u53c2\u6570\u987a\u5e8f\uff09 \u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u505a\u8981\u6c42 \u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u65e0\u6cd5\u6784\u6210\u91cd\u8f7d \u4e09\u3001\u53c2\u6570\u7684\u4f20\u503c \u4f20\u503c\u7684\u673a\u5236\uff1a\u5f62\u53c2 \u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 \u5f15\u7528 \u64cd\u4f5c\u6765\u6539\u53d8\u5b9e\u53c2 \u57fa\u672c\u6570\u636e\u7c7b\u53c2\u6570\u7684\u4f20\u503c\uff1a\u5411\u8be5\u53c2\u6570\u4f20\u9012\u7684\u503c\u7684\u7ea7\u522b\u4e0d\u53ef\u4ee5\u9ad8\u4e8e\u8be5\u53c2\u6570\u7684\u7ea7\u522b\uff08eg:\u53ef\u4ee5\u7ed9 double \u578b\u53c2\u6570\u4f20\u9012\u4e00\u4e2a float \u503c\uff09 \u56db\u3001\u547d\u4ee4\u884c\u53c2\u6570 public class CommandLine{ public static void main(String[] args){ for(int i = 0;i < args.length;i++){ System.out.println(\"args[\" + i + \"] =\" + args[i]); } } } \u4e94\u3001\u53ef\u53d8\u53c2\u6570 \u4f7f\u7528\u65b9\u6cd5\uff1a\u5728\u6307\u5b9a\u7684\u53c2\u6570\u7684\u53c2\u6570\u7c7b\u578b\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a\u7701\u7565\u53f7 ... \u4e00\u4e2a\u65b9\u6cd5\u4e2d \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570 \uff0c\u4e14 \u5fc5\u987b\u662f\u65b9\u6cd5\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570 \u53ef\u53d8\u53c2\u6570\u5f53\u4f5c\u6570\u7ec4\u6765\u7528 \u516d\u3001\u9012\u5f52 \u81ea\u5df1\u8c03\u7528\u81ea\u5df1 \u4f5c\u7528\uff1a\u4f7f\u7528\u7b80\u5355\u7684\u7a0b\u5e8f\u89e3\u51b3\u590d\u6742\u7684\u95ee\u9898 \u5305\u542b \u9012\u5f52\u5934\uff1a\u4ec0\u4e48\u65f6\u5019\u4e0d\u8c03\u7528\u81ea\u8eab\uff0c\u5982\u679c\u6ca1\u6709\u5934\uff0c\u5219\u9677\u5165\u6b7b\u5faa\u73af \u9012\u5f52\u4f53\uff1a\u4ec0\u4e48\u65f6\u5019\u8c03\u7528\u81ea\u8eab\u65b9\u6cd5","title":"\u65b9\u6cd5"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_1","text":"","title":"\u65b9\u6cd5"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_2","text":"\u662f\u8bed\u53e5\u7684\u96c6\u5408\uff0c\u5171\u540c\u6267\u884c\u4e00\u4e2a\u529f\u80fd \u89e3\u51b3\u4e00\u7c7b\u95ee\u9898\u7684\u6b65\u9aa4\u7684\u6709\u5e8f\u7ec4\u5408 \u65b9\u6cd5\u5305\u542b\u4e8e\u7c7b\u6216\u5bf9\u8c61\u4e2d \u65b9\u6cd5\u5728\u7a0b\u5e8f\u4e2d\u88ab\u521b\u5efa\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u88ab\u5f15\u7528 \u8bbe\u8ba1\u65b9\u6cd5\u7684\u539f\u5219\uff1a\u4e00\u4e2a\u65b9\u6cd5\u4e00\u4e2a\u529f\u80fd \u5305\u542b \u4fee\u9970\u7b26 \u8fd4\u56de\u503c\u7c7b\u578b \u65b9\u6cd5\u540d \u53c2\u6570\u7c7b\u578b \u65b9\u6cd5\u4f53","title":"\u4e00\u3001\u5b9a\u4e49"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_3","text":"\u91cd\u8f7d\u5c31\u662f\u5728\u4e00\u4e2a\u7c7b\u4e2d\u6709\u76f8\u540c\u7684\u51fd\u6570\u540d\u79f0\uff0c\u4f46\u662f\u5f62\u53c2\u4e0d\u540c\u7684\u51fd\u6570 \u89c4\u5219 \u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c \u53c2\u6570\u5217\u8868\u5fc5\u987b\u4e0d\u540c\uff08\u4e2a\u6570\u3001\u7c7b\u578b\u3001\u53c2\u6570\u987a\u5e8f\uff09 \u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u505a\u8981\u6c42 \u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u65e0\u6cd5\u6784\u6210\u91cd\u8f7d","title":"\u4e8c\u3001\u65b9\u6cd5\u7684\u91cd\u8f7d"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_4","text":"\u4f20\u503c\u7684\u673a\u5236\uff1a\u5f62\u53c2 \u4f46\u662f\u53ef\u4ee5\u901a\u8fc7 \u5f15\u7528 \u64cd\u4f5c\u6765\u6539\u53d8\u5b9e\u53c2 \u57fa\u672c\u6570\u636e\u7c7b\u53c2\u6570\u7684\u4f20\u503c\uff1a\u5411\u8be5\u53c2\u6570\u4f20\u9012\u7684\u503c\u7684\u7ea7\u522b\u4e0d\u53ef\u4ee5\u9ad8\u4e8e\u8be5\u53c2\u6570\u7684\u7ea7\u522b\uff08eg:\u53ef\u4ee5\u7ed9 double \u578b\u53c2\u6570\u4f20\u9012\u4e00\u4e2a float \u503c\uff09","title":"\u4e09\u3001\u53c2\u6570\u7684\u4f20\u503c"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_5","text":"public class CommandLine{ public static void main(String[] args){ for(int i = 0;i < args.length;i++){ System.out.println(\"args[\" + i + \"] =\" + args[i]); } } }","title":"\u56db\u3001\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_6","text":"\u4f7f\u7528\u65b9\u6cd5\uff1a\u5728\u6307\u5b9a\u7684\u53c2\u6570\u7684\u53c2\u6570\u7c7b\u578b\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a\u7701\u7565\u53f7 ... \u4e00\u4e2a\u65b9\u6cd5\u4e2d \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570 \uff0c\u4e14 \u5fc5\u987b\u662f\u65b9\u6cd5\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570 \u53ef\u53d8\u53c2\u6570\u5f53\u4f5c\u6570\u7ec4\u6765\u7528","title":"\u4e94\u3001\u53ef\u53d8\u53c2\u6570"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%96%B9%E6%B3%95/#_7","text":"\u81ea\u5df1\u8c03\u7528\u81ea\u5df1 \u4f5c\u7528\uff1a\u4f7f\u7528\u7b80\u5355\u7684\u7a0b\u5e8f\u89e3\u51b3\u590d\u6742\u7684\u95ee\u9898 \u5305\u542b \u9012\u5f52\u5934\uff1a\u4ec0\u4e48\u65f6\u5019\u4e0d\u8c03\u7528\u81ea\u8eab\uff0c\u5982\u679c\u6ca1\u6709\u5934\uff0c\u5219\u9677\u5165\u6b7b\u5faa\u73af \u9012\u5f52\u4f53\uff1a\u4ec0\u4e48\u65f6\u5019\u8c03\u7528\u81ea\u8eab\u65b9\u6cd5","title":"\u516d\u3001\u9012\u5f52"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/","text":"\u96c6\u5408 \u96c6\u5408 \u4f18\u70b9 \u52a8\u6001\u4fdd\u5b58\u4efb\u610f\u591a\u4e2a\u5bf9\u8c61\uff0c\u4f7f\u7528\u65b9\u4fbf \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u4fbf\u7684\u65b9\u6cd5 \u6846\u67b6\u4f53\u7cfb \u5206\u4e3a\u4e24\u7ec4\uff1a \u5355\u5217\u96c6\u5408\uff1a\u5355\u4e2a\u5bf9\u8c61 List \u3001 Set \u5b9e\u73b0\u7684\u5b50\u7c7b \u53cc\u5217\u96c6\u5408\uff1a\u952e\u503c\u5bf9 Map \u5b9e\u73b0\u7684\u5b50\u7c7b iterator \u4f7f\u7528 iterator() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u4f7f\u7528 iterator.hasNext() \u518d\u6b21\u904d\u5386\u5219\u91cd\u7f6e\u8fed\u4ee3\u5668 List\u63a5\u53e3 ArrayList \u57fa\u672c\u7b49\u540c\u4e8e Vector \uff0c\u4f46 ArrayList \u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\uff08\u6548\u7387\u9ad8\uff09\uff0c\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u4e00\u822c\u4f7f\u7528 Vector \u6e90\u7801\u5206\u6790 ArrayList \u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a Object \u7c7b\u578b\u7684\u6570\u7ec4 transient Object[] elementData \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5165\u4f19\u4f7f\u7528\u7684\u65f6\u65e0\u53c2\u6784\u9020\u5668\uff0c\u5219\u521d\u59cbelementData\u5bb9\u91cf\u4e3a0 \u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u6269\u5bb9\uff0c\u5982\u9700\u8981\uff0c\u5219\u8c03\u7528 grow() \u65b9\u6cd5\uff0c\u4f7f\u5bb9\u91cf\u53d8\u4e3a 1.5 \u500d Vector Vector \u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u5e26 Synchronized \uff0c\u90fd\u662f\u7ebf\u7a0b\u540c\u6b65\u7684\u3001\u7ebf\u7a0b\u5b89\u5168\u7684\uff08\u591a\u7ebf\u7a0b\u5f00\u53d1\u65f6\uff09 \u6e90\u7801\u5206\u6790 Vector \u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a Object \u7c7b\u578b\u7684\u6570\u7ec4 transient Object[] elementData \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5165\u4f19\u4f7f\u7528\u7684\u65f6\u65e0\u53c2\u6784\u9020\u5668\uff0c\u5219\u521d\u59cbelementData\u5bb9\u91cf\u4e3a10 \u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u6269\u5bb9\uff0c\u5982\u9700\u8981\uff0c\u5219\u8c03\u7528 grow() \u65b9\u6cd5\uff0c\u4f7f\u5bb9\u91cf\u53d8\u4e3a 2 \u500d LinkedList \u5e95\u5c42\u5b9e\u73b0\u4e86\u53cc\u5411\u94fe\u8868\u548c\u53cc\u7aef\u961f\u5217\u7684\u7279\u70b9 \u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u5143\u7d20 \u7ebf\u7a0b\u4e0d\u5b89\u5168 \u5e95\u5c42\u7ed3\u6784 \u7ef4\u62a4\u4e86\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \u7ef4\u62a4\u4e86\u4e24\u4e2a\u5c5e\u6027\uff1a first \u3001 last Set\u63a5\u53e3 \u57fa\u672c\u4ecb\u7ecd\uff1a \u65e0\u5e8f\uff0c\u65e0\u6cd5\u7d22\u5f15\uff0c\u987a\u5e8f\u53d6\u51b3\u4e8ehash\u540e\u7d22\u5f15\u7684\u7ed3\u679c \u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u5143\u7d20 HashSet \u5e95\u5c42\u673a\u5236 HashSet\u5e95\u5c42\u662f HashMap \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u5148\u5f97\u5230hash\u503c\uff0c\u518d\u8f6c\u6362\u6210\u7d22\u5f15\u503c \u627e\u5230\u5b58\u50a8\u6570\u636e\u8868table\uff0c\u770b\u8fd9\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u662f\u5426\u5df2\u7ecf\u5b58\u653e\u5143\u7d20 \u6ca1\u6709\u5219\u76f4\u63a5\u52a0\u5165 \u6709\u5219\u5bf9\u7528 equals() \u6bd4\u8f83 \u76f8\u540c \u5219\u653e\u5f03\u6dfb\u52a0 \u4e0d\u76f8\u540c \u5219\u6dfb\u52a0\u5230\u6700\u540e \u5982\u679c\u4e00\u6761\u94fe\u8868\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7 TREEIFY_THRESHOLD (\u9ed8\u8ba4\u4e3a8)\uff0c\u5e76\u4e14table\u7684\u5927\u5c0f >= MIN_TREEIFY_CAPACITY (\u9ed8\u8ba464)\uff0c\u5219\u8fdb\u5316\u4e3a\u7ea2\u9ed1\u6811","title":"\u96c6\u5408"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_1","text":"","title":"\u96c6\u5408"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_2","text":"","title":"\u96c6\u5408"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_3","text":"\u52a8\u6001\u4fdd\u5b58\u4efb\u610f\u591a\u4e2a\u5bf9\u8c61\uff0c\u4f7f\u7528\u65b9\u4fbf \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u65b9\u4fbf\u7684\u65b9\u6cd5","title":"\u4f18\u70b9"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_4","text":"\u5206\u4e3a\u4e24\u7ec4\uff1a \u5355\u5217\u96c6\u5408\uff1a\u5355\u4e2a\u5bf9\u8c61 List \u3001 Set \u5b9e\u73b0\u7684\u5b50\u7c7b \u53cc\u5217\u96c6\u5408\uff1a\u952e\u503c\u5bf9 Map \u5b9e\u73b0\u7684\u5b50\u7c7b","title":"\u6846\u67b6\u4f53\u7cfb"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#iterator","text":"\u4f7f\u7528 iterator() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668 \u4f7f\u7528 iterator.hasNext() \u518d\u6b21\u904d\u5386\u5219\u91cd\u7f6e\u8fed\u4ee3\u5668","title":"iterator"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#list","text":"","title":"List\u63a5\u53e3"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#arraylist","text":"\u57fa\u672c\u7b49\u540c\u4e8e Vector \uff0c\u4f46 ArrayList \u662f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\uff08\u6548\u7387\u9ad8\uff09\uff0c\u5728\u591a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u4e00\u822c\u4f7f\u7528 Vector","title":"ArrayList"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_5","text":"ArrayList \u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a Object \u7c7b\u578b\u7684\u6570\u7ec4 transient Object[] elementData \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5165\u4f19\u4f7f\u7528\u7684\u65f6\u65e0\u53c2\u6784\u9020\u5668\uff0c\u5219\u521d\u59cbelementData\u5bb9\u91cf\u4e3a0 \u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u6269\u5bb9\uff0c\u5982\u9700\u8981\uff0c\u5219\u8c03\u7528 grow() \u65b9\u6cd5\uff0c\u4f7f\u5bb9\u91cf\u53d8\u4e3a 1.5 \u500d","title":"\u6e90\u7801\u5206\u6790"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#vector","text":"Vector \u7684\u6240\u6709\u65b9\u6cd5\u90fd\u662f\u5e26 Synchronized \uff0c\u90fd\u662f\u7ebf\u7a0b\u540c\u6b65\u7684\u3001\u7ebf\u7a0b\u5b89\u5168\u7684\uff08\u591a\u7ebf\u7a0b\u5f00\u53d1\u65f6\uff09","title":"Vector"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_6","text":"Vector \u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a Object \u7c7b\u578b\u7684\u6570\u7ec4 transient Object[] elementData \u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5165\u4f19\u4f7f\u7528\u7684\u65f6\u65e0\u53c2\u6784\u9020\u5668\uff0c\u5219\u521d\u59cbelementData\u5bb9\u91cf\u4e3a10 \u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u5148\u5224\u65ad\u662f\u5426\u9700\u8981\u6269\u5bb9\uff0c\u5982\u9700\u8981\uff0c\u5219\u8c03\u7528 grow() \u65b9\u6cd5\uff0c\u4f7f\u5bb9\u91cf\u53d8\u4e3a 2 \u500d","title":"\u6e90\u7801\u5206\u6790"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#linkedlist","text":"\u5e95\u5c42\u5b9e\u73b0\u4e86\u53cc\u5411\u94fe\u8868\u548c\u53cc\u7aef\u961f\u5217\u7684\u7279\u70b9 \u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u5143\u7d20 \u7ebf\u7a0b\u4e0d\u5b89\u5168","title":"LinkedList"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_7","text":"\u7ef4\u62a4\u4e86\u4e00\u4e2a\u53cc\u5411\u94fe\u8868 \u7ef4\u62a4\u4e86\u4e24\u4e2a\u5c5e\u6027\uff1a first \u3001 last","title":"\u5e95\u5c42\u7ed3\u6784"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#set","text":"\u57fa\u672c\u4ecb\u7ecd\uff1a \u65e0\u5e8f\uff0c\u65e0\u6cd5\u7d22\u5f15\uff0c\u987a\u5e8f\u53d6\u51b3\u4e8ehash\u540e\u7d22\u5f15\u7684\u7ed3\u679c \u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u5143\u7d20","title":"Set\u63a5\u53e3"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#hashset","text":"","title":"HashSet"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9B%86%E5%90%88/#_8","text":"HashSet\u5e95\u5c42\u662f HashMap \u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u5148\u5f97\u5230hash\u503c\uff0c\u518d\u8f6c\u6362\u6210\u7d22\u5f15\u503c \u627e\u5230\u5b58\u50a8\u6570\u636e\u8868table\uff0c\u770b\u8fd9\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u662f\u5426\u5df2\u7ecf\u5b58\u653e\u5143\u7d20 \u6ca1\u6709\u5219\u76f4\u63a5\u52a0\u5165 \u6709\u5219\u5bf9\u7528 equals() \u6bd4\u8f83 \u76f8\u540c \u5219\u653e\u5f03\u6dfb\u52a0 \u4e0d\u76f8\u540c \u5219\u6dfb\u52a0\u5230\u6700\u540e \u5982\u679c\u4e00\u6761\u94fe\u8868\u7684\u5143\u7d20\u4e2a\u6570\u8d85\u8fc7 TREEIFY_THRESHOLD (\u9ed8\u8ba4\u4e3a8)\uff0c\u5e76\u4e14table\u7684\u5927\u5c0f >= MIN_TREEIFY_CAPACITY (\u9ed8\u8ba464)\uff0c\u5219\u8fdb\u5316\u4e3a\u7ea2\u9ed1\u6811","title":"\u5e95\u5c42\u673a\u5236"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/","text":"t# \u9762\u5411\u5bf9\u8c61 \u4e00\u3001\u6784\u9020\u5668 \u4e8c\u3001\u4fee\u9970\u7b26 \u56db\u79cd\u8bbf\u95ee\u6743\u9650 default private public protected \u4fee\u9970\u7b26 \u5f53\u524d\u7c7b \u540c\u4e00\u5305\u5185 \u5b50\u5b59\u7c7b\uff08\u540c\u4e00\u5305\uff09 \u5b50\u5b59\u7c7b\uff08\u4e0d\u540c\u5305\uff09 \u5176\u4ed6\u5305 public Y Y Y Y Y protected Y Y Y Y/N N default Y Y Y N N private Y N N N N \u4e09\u3001\u5c01\u88c5 \u8ffd\u6c42\uff1a\u9ad8\u5185\u805a\uff0c\u4f4e\u8026\u5408 \u9ad8\u5185\u805a\uff1a\u7c7b\u7684\u5185\u90e8\u64cd\u4f5c\u7ec6\u8282\u81ea\u5df1\u5b8c\u6210\uff0c\u4e0d\u5141\u8bb8\u5916\u90e8\u5e72\u6d89 \u4f4e\u8026\u5408\uff1a\u4ec5\u66b4\u9732\u5c11\u91cf\u7684\u65b9\u6cd5\u7ed9\u5916\u90e8\u4f7f\u7528 \u56db\u3001\u7ee7\u627f \u5b50\u7c7b\u662f\u7236\u7c7b\u7684\u7ee7\u627f java\u4e2d\u53ea\u6709\u5355\u7ee7\u627f\uff0c\u6ca1\u6709\u591a\u7ee7\u627f \u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb \u7ee7\u627f \u4f9d\u8d56 \u7ec4\u5408 \u805a\u5408 \u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7528\u5173\u952e\u5b57 extends \u6765\u8868\u793a public class Student extends Person (\u6807\u51c6\u58f0\u660e\u7c7b\u540e\u52a0\u4e0a extends \u7236\u7c7b ) \u200b 1. \u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u548c\u5c5e\u6027 object \u7c7b \u6240\u6709\u7c7b\u90fd\u9ed8\u8ba4\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea object \u7c7b \u4e94\u3001super this \u8c03\u7528\u5f53\u524d\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c super \u8c03\u7528\u7236\u7c7b\u7684\u540c\u540dpublic\u65b9\u6cd5 \u5b50\u7c7b\u7684\u6784\u9020\u5668\u4f7f\u7528 super() \u8c03\u7528\u7236\u7c7b\u7684 \u540c\u7c7b\u578b\u6784\u9020\u5668 \uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u7b2c\u4e00\u4e2a\u8bed\u53e5 super \u53ea\u80fd\u51fa\u73b0\u5728\u5b50\u7c7b\u7684\u65b9\u6cd5\u6216\u6784\u9020\u65b9\u6cd5\u4e2d \u4e0e this \u7684\u533a\u522b \u4ee3\u8868\u5bf9\u8c61\u4e0d\u540c this \uff1a\u672c\u8eab\u8c03\u7528\u8005 super \uff1a\u4ee3\u8868\u7236\u7c7b\u7684\u5e94\u7528 \u524d\u63d0 this \uff1a\u65e0\u9700\u7ee7\u627f super \uff1a\u53ea\u6709\u7ee7\u627f\u65f6\u5019\u53ef\u7528 \u6784\u9020\u65b9\u6cd5 this() \uff1a\u672c\u7c7b\u7684\u6784\u9020 super() \uff1a\u7236\u7c7b\u7684\u6784\u9020 final\u5173\u952e\u8bcd final\u7c7b \u4e0d\u80fd\u88ab\u7ee7\u627f final\u65b9\u6cd5 \u4e0d\u5141\u8bb8\u5b50\u7c7b\u91cd\u5199final\u65b9\u6cd5 \u7528\u4e8e\u4fee\u9970\u5e38\u91cf(\u66ff\u4ee3const\u7684\u4f5c\u7528) \u516d\u3001\u65b9\u6cd5\u91cd\u5199 \u9759\u6001\u65b9\u6cd5 \u7236\u7c7b\u7684\u5f15\u7528\u6307\u5411\u5b50\u7c7b \u65b9\u6cd5\u7684\u8c03\u7528\u53ea\u4e0e\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u6709\u5173 java A a = new A(); B b = new A(); \u975e\u9759\u6001\u65b9\u6cd5 \u91cd\u5199\u53ea\u4e0e\u975e\u9759\u6001\u65b9\u6cd5\u6709\u5173 \uff0c\u5e76\u4e14\u9700\u8981\u6709\u7ee7\u627f\u5173\u7cfb \u79c1\u6709\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6 \u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c \u53c2\u6570\u8868\u5fc5\u987b\u76f8\u540c \u4fee\u9970\u7b26\u8303\u56f4\u53ef\u4ee5\u6269\u5927 \u65b9\u6cd5\u4f53\u53ef\u4ee5\u4e0d\u540c \u629b\u51fa\u7684\u5f02\u5e38\uff1a\u8303\u56f4\u53ef\u4ee5\u88ab\u7f29\u5c0f\u4f46\u4e0d\u80fd\u6269\u5927 java B b = new A(); //\u540c\u540d\u65b9\u6cd5\u4e3a\u975e\u9759\u6001\u65b9\u6cd5 //\u8c03\u7528\u540c\u540d\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u7684\u90fd\u662fA\u7c7b\u7684\u65b9\u6cd5 \u4e3a\u4ec0\u4e48\u9700\u8981\u91cd\u5199\uff1a \u7236\u7c7b\u7684\u529f\u80fd\u5b50\u7c7b\u4e0d\u4e00\u5b9a\u9700\u8981\u6216\u4e0d\u4e00\u5b9a\u6ee1\u8db3 \u5feb\u6377\u65b9\u5f0f\uff1aalt+insert : override \u4e0d\u80fd\u88ab\u91cd\u5199\u7684\u65b9\u6cd5 static final private \u4e03\u3001\u591a\u6001 \u5373\u540c\u4e00\u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u53d1\u9001\u5bf9\u8c61\u7684\u4e0d\u540c\u800c\u91c7\u7528\u591a\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u65b9\u5f0f \u4e00\u4e2a\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u662f\u786e\u5b9a\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\u7c7b\u578b\u6709\u5f88\u591a\uff08 \u7236\u7c7b\u3001\u6709\u5173\u7cfb\u7684\u7c7b\uff09 father s = new son(); \u591a\u6001\u5b58\u5728\u7684\u6761\u4ef6 \u6709\u7ee7\u627f\u5173\u7cfb \u5b50\u7c7b\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5 \u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61 father s = new son(); \u6ce8\uff1a\u591a\u6001\u662f\u65b9\u6cd5\u7684\u591a\u6001\uff0c\u5c5e\u6027\u6ca1\u6709\u591a\u6001 \u4f5c\u7528\uff1a \u52a8\u6001\u7f16\u8bd1 \u901a\u8fc7\u7236\u7c7bnew\u5b50\u7c7b //Student\u662fperson\u7684\u5b50\u7c7b //Student\u80fd\u8c03\u7528\u7684\u65b9\u6cd5\u90fd\u662f\u81ea\u5df1\u6216\u8005\u7ee7\u627f\u7236\u7c7b\u7684 Student s1 = new Student(); //Person\u7236\u7c7b\u578b\uff0c\u53ef\u4ee5\u6307\u5411\u5b50\u7c7b\uff0c\u4f46\u662f\u4e0d\u80fd\u8c03\u7528\u5b50\u7c7b\u72ec\u6709\u7684\u65b9\u6cd5 Person s2 = new Person(); //\u60f3\u8981\u8c03\u7528\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316 //\u5c06\u5bf9\u8c61\u7c7b\u578b\u5f3a\u5236\u8f6c\u5316\u4e3a\u76ee\u6807\u7c7b\u578b ((Student)s2).eat(); \u516b\u3001Instanceof\u548c\u7c7b\u578b\u8f6c\u5316 X Instanceof Y \u5b58\u5728\u7236\u5b50\u5173\u7cfb\u624d\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7 \u7528\u4e8e\u6d4b\u8bd5\u5de6\u8fb9\u5bf9\u8c61\u662f\u5426\u662f\u53f3\u8fb9\u7c7b\u7684\u5b9e\u4f8b \u7c7b\u578b\u8f6c\u5316 \u9ad8\u8f6c\u4f4e\uff08\u7236\u8f6c\u5b50\uff09\u9700\u8981\u5f3a\u5236\u8f6c\u5316 \u610f\u4e49 \u65b9\u4fbf\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u51cf\u5c11\u91cd\u590d \u4e5d\u3001static\u5173\u952e\u8bcd \u9759\u6001\u5373 \u56fa\u5b9a\u7684\u4f4d\u7f6e \u9759\u6001\u5b58\u50a8\u7684\u6570\u636e\u5728 \u6574\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u7684\u8fc7\u7a0b \u90fd\u53ef\u4ee5\u8bbf\u95ee \u975e\u9759\u6001\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 \u7c7b.\u65b9\u6cd5 \u6765\u8c03\u7528\u9759\u6001\u65b9\u6cd5 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u4f46\u662f\u5728\u6784\u9020\u65f6\u6700\u5148\u8c03\u7528 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5bf9\u8c61 \u4e0d\u80fd\u7528static\u6765\u4fee\u9970\u6784\u9020\u65b9\u6cd5 \u5341\u3001\u62bd\u8c61\u7c7b abstract \u5173\u952e\u8bcd \u62bd\u8c61\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u7ee7\u627f\u4e86\u5b83\u7684\u975e\u62bd\u8c61\u5b50\u7c7b\uff0c\u90fd\u5fc5\u987b\u5b9e\u73b0\u5b83\u7684\u65b9\u6cd5 java\u4e2d\uff0c\u7c7b\u53ea\u80fd\u5355\u7ee7\u627f\uff0c\u63a5\u53e3\u53ef\u4ee5\u591a\u7ee7\u627f \u4e0d\u80fdnew\u62bd\u8c61\u7c7b\uff08 \u4e0d\u80fd\u8fdb\u884c\u5b9e\u4f8b\u5316 \uff09 \u62bd\u8c61\u7c7b\u53ef\u4ee5\u5199\u666e\u901a\u65b9\u6cd5 \u62bd\u8c61\u65b9\u6cd5\u5fc5\u987b\u5728\u62bd\u8c61\u7c7b\u4e2d \u5341\u4e00\u3001\u63a5\u53e3 \u533a\u522b \u666e\u901a\u7c7b\uff1a\u53ea\u6709\u5177\u4f53\u5b9e\u73b0 \u62bd\u8c61\u7c7b\uff1a\u5177\u4f53\u5b9e\u73b0\u548c\u89c4\u8303\uff08\u62bd\u8c61\u65b9\u6cd5\uff09\u90fd\u6709 \u63a5\u53e3\uff1a \u53ea\u6709\u89c4\u8303 \uff0c\u5b9e\u73b0\u7ea6\u675f\u548c\u5b9e\u73b0\u5206\u79bb \u5173\u952e\u8bcd\uff1a interface \u5b9a\u4e49\u7684\u662f\u4e00\u7ec4\u89c4\u5219 \u63a5\u53e3\u4e2d\u7684\u6240\u6709\u5b9a\u4e49\u90fd\u662f\u62bd\u8c61\u7684 public abstract \u7c7b \u53ef\u4ee5\u5b9e\u73b0\u63a5\u53e3 implements \u63a5\u53e3 \u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u7684\u7c7b\uff0c\u5c31\u9700\u8981\u91cd\u5199\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5 \u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u591a\u7ee7\u627f \u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5c5e\u6027\u662f\u9759\u6001\u5e38\u91cf \u63a5\u53e3\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff08\u63a5\u53e3\u91cc\u6ca1\u6709\u6784\u9020\u65b9\u6cd5\uff09 Lambda\u8868\u8fbe\u5f0f \u533f\u540d\u65b9\u6cd5 \u4e66\u5199\u65b9\u6cd5\uff1a\u53c2\u6570\u5217\u8868\u548c\u65b9\u6cd5\u4f53\u4e4b\u95f4\u7684\u7b26\u53f7\u662f-> Java (\u53c2\u6570\u5217\u8868)->{ \u65b9\u6cd5\u4f53; } \u5fc5\u987b\u6709\u7279\u6b8a\u7684\u4e0a\u4e0b\u6587\uff0c\u7f16\u8bd1\u5668\u624d\u80fd\u63a8\u65ad\u51faLambda\u8868\u8fbe\u5f0f\u662f\u54ea\u4e2a\u65b9\u6cd5\uff0cLambda\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f\u65b9\u6cd5\u7684\u5165\u53e3\u5730\u5740 \u5341\u4e8c\u3001\u5185\u90e8\u7c7b \u5957\u5a03 new\uff1a\u901a\u8fc7\u5916\u90e8\u7c7b\u6765new\u5185\u90e8\u7c7b \u53ef\u4ee5\u83b7\u5f97\u5916\u90e8\u7c7b\u7684\u79c1\u6709\u5c5e\u6027 \u4e00\u4e2ajava\u7c7b\u91cc\u53ef\u4ee5\u6709\u591a\u4e2a class \uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a public class \u533f\u540d\u5185\u90e8\u7c7b \u7528\u6765\u7b80\u5316\u5f00\u53d1 \u524d\u63d0\u6761\u4ef6\uff1a \u5fc5\u987b\u7ee7\u627f \u4e00\u4e2a \u7236\u7c7b\u6216\u5b9e\u73b0 \u4e00\u4e2a \u63a5\u53e3 \u7cfb\u7edf\u5e95\u5c42\u4e3a\u533f\u540d\u5185\u90e8\u7c7b\u5206\u914d\u7684\u540d\u5b57\uff1apublic\u7c7b\u540d+$01 \u5916\u90e8\u5176\u4ed6\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u533f\u540d\u5185\u90e8\u7c7b \u9ed8\u8ba4\u9075\u5faa\u5c31\u8fd1\u539f\u5219\uff0c\u8bbf\u95ee\u5916\u90e8\u7c7b\u7684\u6210\u5458\u53ef\u4ee5\u4f7f\u7528 \u5916\u90e8\u7c7b\u540d.this.\u6210\u5458 \u533f\u540d\u5185\u90e8\u7c7b\u53ef\u4ee5\u5f53\u4f5c\u5b9e\u53c2\u76f4\u63a5\u4f20\u9012 \u5bf9\u8c61\u7684\u7ec4\u5408 \u7ec4\u5408\u548c\u590d\u7528 \u5bf9\u8c61a\u7ec4\u5408\u4e86\u5bf9\u8c61b\uff0c\u5bf9\u8c61a\u5c31\u53ef\u4ee5\u59d4\u6258\u5bf9\u8c61b\u8c03\u7528\u5176\u65b9\u6cd5 \u7279\u70b9 \u5f53\u524d\u5bf9\u8c61\u53ea\u80fd\u59d4\u6258\u6240\u5305\u542b\u7684\u5bf9\u8c61\u8c03\u7528\u5176\u65b9\u6cd5\uff0c\u5373\u5f53\u524d\u5bf9\u8c61\u5bf9\u6240\u5305\u542b\u7684\u65b9\u6cd5\u7684\u7ec6\u8282\u662f\u4e00\u65e0\u6240\u77e5\u7684 \u5f53\u524d\u5bf9\u8c61\u968f\u65f6\u53ef\u4ee5\u66f4\u6362\u6240\u5305\u542b\u7684\u5bf9\u8c61\uff0c\u5373\u5bf9\u8c61\u4e0e\u6240\u5305\u542b\u7684\u5bf9\u8c61\u5c5e\u4e8e \u5f31\u8026\u5408\u5173\u7cfb \u5b8c\u5168\u89e3\u8026\u662f\u5c3d\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u4f7f\u7a0b\u5e8f\u5177\u6709\u5f88\u597d\u7684\u6269\u5c55\u6027\uff0c\u4fbf\u4e8e\u4fee\u6539 \u8026\u5408\uff1a\u7c7b\u548c\u7c7b\u3001\u6a21\u5757\u548c\u6a21\u5757\u4e4b\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u5982\u679c\u4fee\u6539\u4e86\u67d0\u4e2a\u5b9e\u73b0\u5c31\u9700\u8981\u6539\u4e00\u5806\u5df2\u7ecf\u7f16\u5199\u597d\u7684\u4ee3\u7801\uff0c\u8fd9\u5c31\u662f\u4ee3\u7801\u8026\u5408\u5ea6\u8f83\u9ad8\u3002/\u5206\u5c42\u3001\u6ce8\u5165\u3001\u9762\u5411\u63a5\u53e3\u7f16\u7a0b\u90fd\u662f\u89e3\u8026\u7684\u65b9\u5f0f\u3002 \u7c7b\u7684\u5173\u8054\u5173\u7cfb\u548c\u4ee5\u6765\u5173\u7cfb\u7684UML\u56fe \u5173\u8054\u5173\u7cfb\uff08\u4f7f\u7528\u5b9e\u7ebf\u7bad\u5934\u8fde\u63a5\uff09 \u5982\u679c A\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u662f\u7528B\u7c7b\u58f0\u660e\u7684\u5bf9\u8c61 \uff0c\u5219A\u548cB\u7684\u5173\u7cfb\u662f \u5173\u8054\u5173\u7cfb (\u5219\u79f0A\u7c7b\u5bf9\u8c61\u5173\u8054\u4e8eB\u7c7b\u5bf9\u8c61\u6216A\u7c7b\u7684\u5bf9\u8c61 \u7ec4\u5408 \u4e86B\u7c7b\u7684\u5bf9\u8c61) \u4f9d\u8d56\u5173\u7cfb\uff08\u4f7f\u7528\u865a\u7ebf\u7bad\u5934\u8fde\u63a5\uff09 \u5982\u679cA\u7c7b\u4e2d\u67d0\u4e2a \u65b9\u6cd5\u7684\u53c2\u6570\u4f7f\u7528B\u7c7b\u58f0\u660e\u7684\u5bf9\u8c61 \u6216 \u67d0\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662fB\u7c7b\u5bf9\u8c61 \uff0c\u5219A\u4e0eB\u7684\u5173\u7cfb\u662f \u4f9d\u8d56\u5173\u7cfb (\u79f0A\u4f9d\u8d56\u4e8eB) var\u5c40\u90e8\u53d8\u91cf \u4f7f\u7528var\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u5fc5\u987b\u663e\u5f0f\u7684\u6307\u5b9a\u521d\u503c\uff08\u4e0d\u53ef\u4ee5\u662fnull\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fa\u53d8\u91cf\u7684\u7c7b\u578b \u65b9\u6cd5\u7684\u53c2\u6570\u548c\u65b9\u6cd5\u7684\u8fd4\u56de\u4e0d\u80fd\u7528var\u6765\u58f0\u660e \u5bf9\u8c61\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61 \u5373\u4f7f\u7528\u5b50\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a\u7236\u7c7b\u7684\u5bf9\u8c61 \u7279\u70b9 \u4e0d\u80fd\u8bbf\u95ee\u65b0\u589e\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4e0d\u80fd\u8c03\u7528\u5b50\u7c7b\u65b0\u589e\u7684\u65b9\u6cd5 \u53ef\u4ee5\u8bbf\u95ee\u5b50\u7c7b\u7ee7\u627f\u7684\u6210\u5458\u53d8\u91cf \u53ef\u4ee5\u5bf9\u7528\u5b50\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u6216\u5b50\u7c7b\u91cd\u5199\u7684\u5b9e\u4f8b\u65b9\u6cd5 \u53ef\u4ee5\u5c06\u5bf9\u8c61\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u5f3a\u5236\u8f6c\u6362\u4e3a\u4e00\u4e2a \u5b50\u7c7b\u5bf9\u8c61 \u5783\u573e\u56de\u6536\u673a\u5236 \u6807\u8bb0\u2014\u2014\u6e05\u626b\uff1a \u904d\u5386\u6240\u6709\u7684\u5f15\u7528\uff0c\u627e\u51fa\u6240\u6709\u5b58\u6d3b\u7684\u5bf9\u8c61 \u6bcf\u627e\u5230\u4e00\u4e2a\u5b58\u6d3b\u7684\u5bf9\u8c61\uff0c\u5219\u5bf9\u5176\u8fdb\u884c\u6807\u8bb0\uff08\u6b64\u8fc7\u7a0b\u4e0d\u4f1a\u56de\u6536\u4efb\u4f55\u5bf9\u8c61\uff09 \u6807\u8bb0\u7a7a\u95f4\u5168\u90e8\u5b8c\u6210\u540e\uff0c\u624d\u8fdb\u884c\u6e05\u7406 \u5269\u4f59\u7684\u7a7a\u95f4\u4e0d\u8fde\u7eed\uff0c\u9700\u8981\u8fde\u7eed\u7684\u7a7a\u95f4\u5219\u9700\u8981\u91cd\u65b0\u6574\u7406 \u505c\u6b62\u2014\u2014\u590d\u5236\uff1a \u6e05\u7406\u52a8\u4f5c\u53d1\u751f\u65f6\uff0c\u7a0b\u5e8f\u5c06\u88ab\u6682\u505c JVM\u4f1a\u81ea\u52a8\u8ddf\u8e2a\u201c\u6807\u8bb0\u6e05\u626b\u201d\u7684\u6548\u679c\uff0c\u5982\u679c\u5806\u7a7a\u95f4\u51fa\u73b0\u8bb8\u591a\u788e\u7247\uff0c\u5219\u5207\u6362\u81f3\u201c\u505c\u6b62\u590d\u5236\u201d","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_1","text":"","title":"\u4e00\u3001\u6784\u9020\u5668"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_2","text":"\u56db\u79cd\u8bbf\u95ee\u6743\u9650 default private public protected \u4fee\u9970\u7b26 \u5f53\u524d\u7c7b \u540c\u4e00\u5305\u5185 \u5b50\u5b59\u7c7b\uff08\u540c\u4e00\u5305\uff09 \u5b50\u5b59\u7c7b\uff08\u4e0d\u540c\u5305\uff09 \u5176\u4ed6\u5305 public Y Y Y Y Y protected Y Y Y Y/N N default Y Y Y N N private Y N N N N","title":"\u4e8c\u3001\u4fee\u9970\u7b26"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_3","text":"\u8ffd\u6c42\uff1a\u9ad8\u5185\u805a\uff0c\u4f4e\u8026\u5408 \u9ad8\u5185\u805a\uff1a\u7c7b\u7684\u5185\u90e8\u64cd\u4f5c\u7ec6\u8282\u81ea\u5df1\u5b8c\u6210\uff0c\u4e0d\u5141\u8bb8\u5916\u90e8\u5e72\u6d89 \u4f4e\u8026\u5408\uff1a\u4ec5\u66b4\u9732\u5c11\u91cf\u7684\u65b9\u6cd5\u7ed9\u5916\u90e8\u4f7f\u7528","title":"\u4e09\u3001\u5c01\u88c5"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_4","text":"\u5b50\u7c7b\u662f\u7236\u7c7b\u7684\u7ee7\u627f java\u4e2d\u53ea\u6709\u5355\u7ee7\u627f\uff0c\u6ca1\u6709\u591a\u7ee7\u627f \u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u5173\u7cfb \u7ee7\u627f \u4f9d\u8d56 \u7ec4\u5408 \u805a\u5408 \u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7528\u5173\u952e\u5b57 extends \u6765\u8868\u793a public class Student extends Person (\u6807\u51c6\u58f0\u660e\u7c7b\u540e\u52a0\u4e0a extends \u7236\u7c7b ) \u200b 1. \u5b50\u7c7b\u7ee7\u627f\u7236\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\u548c\u5c5e\u6027 object \u7c7b \u6240\u6709\u7c7b\u90fd\u9ed8\u8ba4\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea object \u7c7b","title":"\u56db\u3001\u7ee7\u627f"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#super","text":"this \u8c03\u7528\u5f53\u524d\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c super \u8c03\u7528\u7236\u7c7b\u7684\u540c\u540dpublic\u65b9\u6cd5 \u5b50\u7c7b\u7684\u6784\u9020\u5668\u4f7f\u7528 super() \u8c03\u7528\u7236\u7c7b\u7684 \u540c\u7c7b\u578b\u6784\u9020\u5668 \uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u7b2c\u4e00\u4e2a\u8bed\u53e5 super \u53ea\u80fd\u51fa\u73b0\u5728\u5b50\u7c7b\u7684\u65b9\u6cd5\u6216\u6784\u9020\u65b9\u6cd5\u4e2d \u4e0e this \u7684\u533a\u522b \u4ee3\u8868\u5bf9\u8c61\u4e0d\u540c this \uff1a\u672c\u8eab\u8c03\u7528\u8005 super \uff1a\u4ee3\u8868\u7236\u7c7b\u7684\u5e94\u7528 \u524d\u63d0 this \uff1a\u65e0\u9700\u7ee7\u627f super \uff1a\u53ea\u6709\u7ee7\u627f\u65f6\u5019\u53ef\u7528 \u6784\u9020\u65b9\u6cd5 this() \uff1a\u672c\u7c7b\u7684\u6784\u9020 super() \uff1a\u7236\u7c7b\u7684\u6784\u9020","title":"\u4e94\u3001super"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#final","text":"final\u7c7b \u4e0d\u80fd\u88ab\u7ee7\u627f final\u65b9\u6cd5 \u4e0d\u5141\u8bb8\u5b50\u7c7b\u91cd\u5199final\u65b9\u6cd5 \u7528\u4e8e\u4fee\u9970\u5e38\u91cf(\u66ff\u4ee3const\u7684\u4f5c\u7528)","title":"final\u5173\u952e\u8bcd"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_5","text":"\u9759\u6001\u65b9\u6cd5 \u7236\u7c7b\u7684\u5f15\u7528\u6307\u5411\u5b50\u7c7b \u65b9\u6cd5\u7684\u8c03\u7528\u53ea\u4e0e\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u6709\u5173 java A a = new A(); B b = new A(); \u975e\u9759\u6001\u65b9\u6cd5 \u91cd\u5199\u53ea\u4e0e\u975e\u9759\u6001\u65b9\u6cd5\u6709\u5173 \uff0c\u5e76\u4e14\u9700\u8981\u6709\u7ee7\u627f\u5173\u7cfb \u79c1\u6709\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6 \u65b9\u6cd5\u540d\u5fc5\u987b\u76f8\u540c \u53c2\u6570\u8868\u5fc5\u987b\u76f8\u540c \u4fee\u9970\u7b26\u8303\u56f4\u53ef\u4ee5\u6269\u5927 \u65b9\u6cd5\u4f53\u53ef\u4ee5\u4e0d\u540c \u629b\u51fa\u7684\u5f02\u5e38\uff1a\u8303\u56f4\u53ef\u4ee5\u88ab\u7f29\u5c0f\u4f46\u4e0d\u80fd\u6269\u5927 java B b = new A(); //\u540c\u540d\u65b9\u6cd5\u4e3a\u975e\u9759\u6001\u65b9\u6cd5 //\u8c03\u7528\u540c\u540d\u65b9\u6cd5\u65f6\uff0c\u4f7f\u7528\u7684\u90fd\u662fA\u7c7b\u7684\u65b9\u6cd5 \u4e3a\u4ec0\u4e48\u9700\u8981\u91cd\u5199\uff1a \u7236\u7c7b\u7684\u529f\u80fd\u5b50\u7c7b\u4e0d\u4e00\u5b9a\u9700\u8981\u6216\u4e0d\u4e00\u5b9a\u6ee1\u8db3 \u5feb\u6377\u65b9\u5f0f\uff1aalt+insert : override \u4e0d\u80fd\u88ab\u91cd\u5199\u7684\u65b9\u6cd5 static final private","title":"\u516d\u3001\u65b9\u6cd5\u91cd\u5199"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_6","text":"\u5373\u540c\u4e00\u65b9\u6cd5\u53ef\u4ee5\u6839\u636e\u53d1\u9001\u5bf9\u8c61\u7684\u4e0d\u540c\u800c\u91c7\u7528\u591a\u79cd\u4e0d\u540c\u7684\u884c\u4e3a\u65b9\u5f0f \u4e00\u4e2a\u5bf9\u8c61\u7684\u5b9e\u9645\u7c7b\u578b\u662f\u786e\u5b9a\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u6307\u5411\u5bf9\u8c61\u7684\u5f15\u7528\u7c7b\u578b\u6709\u5f88\u591a\uff08 \u7236\u7c7b\u3001\u6709\u5173\u7cfb\u7684\u7c7b\uff09 father s = new son(); \u591a\u6001\u5b58\u5728\u7684\u6761\u4ef6 \u6709\u7ee7\u627f\u5173\u7cfb \u5b50\u7c7b\u91cd\u5199\u7236\u7c7b\u65b9\u6cd5 \u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61 father s = new son(); \u6ce8\uff1a\u591a\u6001\u662f\u65b9\u6cd5\u7684\u591a\u6001\uff0c\u5c5e\u6027\u6ca1\u6709\u591a\u6001 \u4f5c\u7528\uff1a \u52a8\u6001\u7f16\u8bd1 \u901a\u8fc7\u7236\u7c7bnew\u5b50\u7c7b //Student\u662fperson\u7684\u5b50\u7c7b //Student\u80fd\u8c03\u7528\u7684\u65b9\u6cd5\u90fd\u662f\u81ea\u5df1\u6216\u8005\u7ee7\u627f\u7236\u7c7b\u7684 Student s1 = new Student(); //Person\u7236\u7c7b\u578b\uff0c\u53ef\u4ee5\u6307\u5411\u5b50\u7c7b\uff0c\u4f46\u662f\u4e0d\u80fd\u8c03\u7528\u5b50\u7c7b\u72ec\u6709\u7684\u65b9\u6cd5 Person s2 = new Person(); //\u60f3\u8981\u8c03\u7528\u7684\u8bdd\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316 //\u5c06\u5bf9\u8c61\u7c7b\u578b\u5f3a\u5236\u8f6c\u5316\u4e3a\u76ee\u6807\u7c7b\u578b ((Student)s2).eat();","title":"\u4e03\u3001\u591a\u6001"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#instanceof","text":"X Instanceof Y \u5b58\u5728\u7236\u5b50\u5173\u7cfb\u624d\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7 \u7528\u4e8e\u6d4b\u8bd5\u5de6\u8fb9\u5bf9\u8c61\u662f\u5426\u662f\u53f3\u8fb9\u7c7b\u7684\u5b9e\u4f8b \u7c7b\u578b\u8f6c\u5316 \u9ad8\u8f6c\u4f4e\uff08\u7236\u8f6c\u5b50\uff09\u9700\u8981\u5f3a\u5236\u8f6c\u5316 \u610f\u4e49 \u65b9\u4fbf\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u51cf\u5c11\u91cd\u590d","title":"\u516b\u3001Instanceof\u548c\u7c7b\u578b\u8f6c\u5316"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#static","text":"\u9759\u6001\u5373 \u56fa\u5b9a\u7684\u4f4d\u7f6e \u9759\u6001\u5b58\u50a8\u7684\u6570\u636e\u5728 \u6574\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u7684\u8fc7\u7a0b \u90fd\u53ef\u4ee5\u8bbf\u95ee \u975e\u9759\u6001\u65b9\u6cd5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 \u7c7b.\u65b9\u6cd5 \u6765\u8c03\u7528\u9759\u6001\u65b9\u6cd5 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\u4f46\u662f\u5728\u6784\u9020\u65f6\u6700\u5148\u8c03\u7528 \u9759\u6001\u65b9\u6cd5\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5bf9\u8c61 \u4e0d\u80fd\u7528static\u6765\u4fee\u9970\u6784\u9020\u65b9\u6cd5","title":"\u4e5d\u3001static\u5173\u952e\u8bcd"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_7","text":"abstract \u5173\u952e\u8bcd \u62bd\u8c61\u7c7b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u7ee7\u627f\u4e86\u5b83\u7684\u975e\u62bd\u8c61\u5b50\u7c7b\uff0c\u90fd\u5fc5\u987b\u5b9e\u73b0\u5b83\u7684\u65b9\u6cd5 java\u4e2d\uff0c\u7c7b\u53ea\u80fd\u5355\u7ee7\u627f\uff0c\u63a5\u53e3\u53ef\u4ee5\u591a\u7ee7\u627f \u4e0d\u80fdnew\u62bd\u8c61\u7c7b\uff08 \u4e0d\u80fd\u8fdb\u884c\u5b9e\u4f8b\u5316 \uff09 \u62bd\u8c61\u7c7b\u53ef\u4ee5\u5199\u666e\u901a\u65b9\u6cd5 \u62bd\u8c61\u65b9\u6cd5\u5fc5\u987b\u5728\u62bd\u8c61\u7c7b\u4e2d","title":"\u5341\u3001\u62bd\u8c61\u7c7b"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_8","text":"\u533a\u522b \u666e\u901a\u7c7b\uff1a\u53ea\u6709\u5177\u4f53\u5b9e\u73b0 \u62bd\u8c61\u7c7b\uff1a\u5177\u4f53\u5b9e\u73b0\u548c\u89c4\u8303\uff08\u62bd\u8c61\u65b9\u6cd5\uff09\u90fd\u6709 \u63a5\u53e3\uff1a \u53ea\u6709\u89c4\u8303 \uff0c\u5b9e\u73b0\u7ea6\u675f\u548c\u5b9e\u73b0\u5206\u79bb \u5173\u952e\u8bcd\uff1a interface \u5b9a\u4e49\u7684\u662f\u4e00\u7ec4\u89c4\u5219 \u63a5\u53e3\u4e2d\u7684\u6240\u6709\u5b9a\u4e49\u90fd\u662f\u62bd\u8c61\u7684 public abstract \u7c7b \u53ef\u4ee5\u5b9e\u73b0\u63a5\u53e3 implements \u63a5\u53e3 \u5b9e\u73b0\u4e86\u63a5\u53e3\u4e2d\u7684\u7c7b\uff0c\u5c31\u9700\u8981\u91cd\u5199\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5 \u53ef\u4ee5\u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u591a\u7ee7\u627f \u63a5\u53e3\u4e2d\u5b9a\u4e49\u7684\u5c5e\u6027\u662f\u9759\u6001\u5e38\u91cf \u63a5\u53e3\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff08\u63a5\u53e3\u91cc\u6ca1\u6709\u6784\u9020\u65b9\u6cd5\uff09 Lambda\u8868\u8fbe\u5f0f \u533f\u540d\u65b9\u6cd5 \u4e66\u5199\u65b9\u6cd5\uff1a\u53c2\u6570\u5217\u8868\u548c\u65b9\u6cd5\u4f53\u4e4b\u95f4\u7684\u7b26\u53f7\u662f-> Java (\u53c2\u6570\u5217\u8868)->{ \u65b9\u6cd5\u4f53; } \u5fc5\u987b\u6709\u7279\u6b8a\u7684\u4e0a\u4e0b\u6587\uff0c\u7f16\u8bd1\u5668\u624d\u80fd\u63a8\u65ad\u51faLambda\u8868\u8fbe\u5f0f\u662f\u54ea\u4e2a\u65b9\u6cd5\uff0cLambda\u8868\u8fbe\u5f0f\u7684\u503c\u5c31\u662f\u65b9\u6cd5\u7684\u5165\u53e3\u5730\u5740","title":"\u5341\u4e00\u3001\u63a5\u53e3"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_9","text":"\u5957\u5a03 new\uff1a\u901a\u8fc7\u5916\u90e8\u7c7b\u6765new\u5185\u90e8\u7c7b \u53ef\u4ee5\u83b7\u5f97\u5916\u90e8\u7c7b\u7684\u79c1\u6709\u5c5e\u6027 \u4e00\u4e2ajava\u7c7b\u91cc\u53ef\u4ee5\u6709\u591a\u4e2a class \uff0c\u4f46\u53ea\u80fd\u6709\u4e00\u4e2a public class \u533f\u540d\u5185\u90e8\u7c7b \u7528\u6765\u7b80\u5316\u5f00\u53d1 \u524d\u63d0\u6761\u4ef6\uff1a \u5fc5\u987b\u7ee7\u627f \u4e00\u4e2a \u7236\u7c7b\u6216\u5b9e\u73b0 \u4e00\u4e2a \u63a5\u53e3 \u7cfb\u7edf\u5e95\u5c42\u4e3a\u533f\u540d\u5185\u90e8\u7c7b\u5206\u914d\u7684\u540d\u5b57\uff1apublic\u7c7b\u540d+$01 \u5916\u90e8\u5176\u4ed6\u7c7b\u4e0d\u80fd\u8bbf\u95ee\u533f\u540d\u5185\u90e8\u7c7b \u9ed8\u8ba4\u9075\u5faa\u5c31\u8fd1\u539f\u5219\uff0c\u8bbf\u95ee\u5916\u90e8\u7c7b\u7684\u6210\u5458\u53ef\u4ee5\u4f7f\u7528 \u5916\u90e8\u7c7b\u540d.this.\u6210\u5458 \u533f\u540d\u5185\u90e8\u7c7b\u53ef\u4ee5\u5f53\u4f5c\u5b9e\u53c2\u76f4\u63a5\u4f20\u9012","title":"\u5341\u4e8c\u3001\u5185\u90e8\u7c7b"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_10","text":"\u7ec4\u5408\u548c\u590d\u7528 \u5bf9\u8c61a\u7ec4\u5408\u4e86\u5bf9\u8c61b\uff0c\u5bf9\u8c61a\u5c31\u53ef\u4ee5\u59d4\u6258\u5bf9\u8c61b\u8c03\u7528\u5176\u65b9\u6cd5 \u7279\u70b9 \u5f53\u524d\u5bf9\u8c61\u53ea\u80fd\u59d4\u6258\u6240\u5305\u542b\u7684\u5bf9\u8c61\u8c03\u7528\u5176\u65b9\u6cd5\uff0c\u5373\u5f53\u524d\u5bf9\u8c61\u5bf9\u6240\u5305\u542b\u7684\u65b9\u6cd5\u7684\u7ec6\u8282\u662f\u4e00\u65e0\u6240\u77e5\u7684 \u5f53\u524d\u5bf9\u8c61\u968f\u65f6\u53ef\u4ee5\u66f4\u6362\u6240\u5305\u542b\u7684\u5bf9\u8c61\uff0c\u5373\u5bf9\u8c61\u4e0e\u6240\u5305\u542b\u7684\u5bf9\u8c61\u5c5e\u4e8e \u5f31\u8026\u5408\u5173\u7cfb \u5b8c\u5168\u89e3\u8026\u662f\u5c3d\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e\u7c7b\u4e0e\u7c7b\u4e4b\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u4f7f\u7a0b\u5e8f\u5177\u6709\u5f88\u597d\u7684\u6269\u5c55\u6027\uff0c\u4fbf\u4e8e\u4fee\u6539 \u8026\u5408\uff1a\u7c7b\u548c\u7c7b\u3001\u6a21\u5757\u548c\u6a21\u5757\u4e4b\u95f4\u5b58\u5728\u4f9d\u8d56\u5173\u7cfb\uff0c\u5982\u679c\u4fee\u6539\u4e86\u67d0\u4e2a\u5b9e\u73b0\u5c31\u9700\u8981\u6539\u4e00\u5806\u5df2\u7ecf\u7f16\u5199\u597d\u7684\u4ee3\u7801\uff0c\u8fd9\u5c31\u662f\u4ee3\u7801\u8026\u5408\u5ea6\u8f83\u9ad8\u3002/\u5206\u5c42\u3001\u6ce8\u5165\u3001\u9762\u5411\u63a5\u53e3\u7f16\u7a0b\u90fd\u662f\u89e3\u8026\u7684\u65b9\u5f0f\u3002 \u7c7b\u7684\u5173\u8054\u5173\u7cfb\u548c\u4ee5\u6765\u5173\u7cfb\u7684UML\u56fe \u5173\u8054\u5173\u7cfb\uff08\u4f7f\u7528\u5b9e\u7ebf\u7bad\u5934\u8fde\u63a5\uff09 \u5982\u679c A\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u662f\u7528B\u7c7b\u58f0\u660e\u7684\u5bf9\u8c61 \uff0c\u5219A\u548cB\u7684\u5173\u7cfb\u662f \u5173\u8054\u5173\u7cfb (\u5219\u79f0A\u7c7b\u5bf9\u8c61\u5173\u8054\u4e8eB\u7c7b\u5bf9\u8c61\u6216A\u7c7b\u7684\u5bf9\u8c61 \u7ec4\u5408 \u4e86B\u7c7b\u7684\u5bf9\u8c61) \u4f9d\u8d56\u5173\u7cfb\uff08\u4f7f\u7528\u865a\u7ebf\u7bad\u5934\u8fde\u63a5\uff09 \u5982\u679cA\u7c7b\u4e2d\u67d0\u4e2a \u65b9\u6cd5\u7684\u53c2\u6570\u4f7f\u7528B\u7c7b\u58f0\u660e\u7684\u5bf9\u8c61 \u6216 \u67d0\u4e2a\u65b9\u6cd5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u662fB\u7c7b\u5bf9\u8c61 \uff0c\u5219A\u4e0eB\u7684\u5173\u7cfb\u662f \u4f9d\u8d56\u5173\u7cfb (\u79f0A\u4f9d\u8d56\u4e8eB)","title":"\u5bf9\u8c61\u7684\u7ec4\u5408"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#var","text":"\u4f7f\u7528var\u58f0\u660e\u5c40\u90e8\u53d8\u91cf\u65f6\uff0c\u5fc5\u987b\u663e\u5f0f\u7684\u6307\u5b9a\u521d\u503c\uff08\u4e0d\u53ef\u4ee5\u662fnull\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63a8\u65ad\u51fa\u53d8\u91cf\u7684\u7c7b\u578b \u65b9\u6cd5\u7684\u53c2\u6570\u548c\u65b9\u6cd5\u7684\u8fd4\u56de\u4e0d\u80fd\u7528var\u6765\u58f0\u660e","title":"var\u5c40\u90e8\u53d8\u91cf"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_11","text":"\u5373\u4f7f\u7528\u5b50\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a\u7236\u7c7b\u7684\u5bf9\u8c61 \u7279\u70b9 \u4e0d\u80fd\u8bbf\u95ee\u65b0\u589e\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4e0d\u80fd\u8c03\u7528\u5b50\u7c7b\u65b0\u589e\u7684\u65b9\u6cd5 \u53ef\u4ee5\u8bbf\u95ee\u5b50\u7c7b\u7ee7\u627f\u7684\u6210\u5458\u53d8\u91cf \u53ef\u4ee5\u5bf9\u7528\u5b50\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u6216\u5b50\u7c7b\u91cd\u5199\u7684\u5b9e\u4f8b\u65b9\u6cd5 \u53ef\u4ee5\u5c06\u5bf9\u8c61\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u5f3a\u5236\u8f6c\u6362\u4e3a\u4e00\u4e2a \u5b50\u7c7b\u5bf9\u8c61","title":"\u5bf9\u8c61\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61"},{"location":"Java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/#_12","text":"\u6807\u8bb0\u2014\u2014\u6e05\u626b\uff1a \u904d\u5386\u6240\u6709\u7684\u5f15\u7528\uff0c\u627e\u51fa\u6240\u6709\u5b58\u6d3b\u7684\u5bf9\u8c61 \u6bcf\u627e\u5230\u4e00\u4e2a\u5b58\u6d3b\u7684\u5bf9\u8c61\uff0c\u5219\u5bf9\u5176\u8fdb\u884c\u6807\u8bb0\uff08\u6b64\u8fc7\u7a0b\u4e0d\u4f1a\u56de\u6536\u4efb\u4f55\u5bf9\u8c61\uff09 \u6807\u8bb0\u7a7a\u95f4\u5168\u90e8\u5b8c\u6210\u540e\uff0c\u624d\u8fdb\u884c\u6e05\u7406 \u5269\u4f59\u7684\u7a7a\u95f4\u4e0d\u8fde\u7eed\uff0c\u9700\u8981\u8fde\u7eed\u7684\u7a7a\u95f4\u5219\u9700\u8981\u91cd\u65b0\u6574\u7406 \u505c\u6b62\u2014\u2014\u590d\u5236\uff1a \u6e05\u7406\u52a8\u4f5c\u53d1\u751f\u65f6\uff0c\u7a0b\u5e8f\u5c06\u88ab\u6682\u505c JVM\u4f1a\u81ea\u52a8\u8ddf\u8e2a\u201c\u6807\u8bb0\u6e05\u626b\u201d\u7684\u6548\u679c\uff0c\u5982\u679c\u5806\u7a7a\u95f4\u51fa\u73b0\u8bb8\u591a\u788e\u7247\uff0c\u5219\u5207\u6362\u81f3\u201c\u505c\u6b62\u590d\u5236\u201d","title":"\u5783\u573e\u56de\u6536\u673a\u5236"},{"location":"MachineLearning/Numpy/","text":"Numpy \u6982\u8ff0 \u7279\u70b9 \u5feb\u901f\u8282\u7701\u7a7a\u95f4\u7684\u591a\u7ef4\u6570\u7ec4ndarray\uff0c\u63d0\u4f9b\u6570\u7ec4\u5316\u7684\u7b97\u672f\u8fd0\u7b97\u548c\u9ad8\u7ea7\u7684\u5e7f\u64ad\u529f\u80fd \u4f7f\u7528\u6807\u51c6\u6570\u5b66\u51fd\u6570\u5bf9\u6574\u4e2a\u6570\u7ec4\u7684\u6570\u636e\u8fdb\u884c\u5feb\u901f\u8fd0\u7b97\uff0c\u800c\u65e0\u5e8f\u7f16\u5199\u5faa\u73af \u8bfb\u53d6/\u5199\u5165\u78c1\u76d8\u4e0a\u7684\u9635\u5217\u6570\u636e\u548c\u64cd\u4f5c\u5b58\u50a8\u5668\u6620\u50cf\u7684\u6587\u4ef6\u5de5\u5177 \u7ebf\u6027\u4ee3\u6570\u3001\u968f\u673a\u6570\u751f\u6210\u548c\u5085\u91cc\u53f6\u53d8\u6362\u7684\u80fd\u529b \u96c6\u6210C\u3001C++\u3001Fortran\u4ee3\u7801\u7684\u5de5\u5177 \u751f\u6210Numpy\u6570\u7ec4 1. \u4ece\u5df2\u6709\u7684\u6570\u636e\u4e2d\u521b\u5efa\u6570\u7ec4 \u5c06\u5217\u8868\u8f6c\u6362\u6210ndarray \u5d4c\u5957\u5217\u8868\u53ef\u4ee5\u8f6c\u6362\u4e3a\u591a\u7ef4\u6570\u7ec4 \u5c06\u5217\u8868\u66ff\u6362\u4e3a\u5143\u7ec4\u540c\u6837\u9002\u7528 2. \u5229\u7528random\u6a21\u5757 \u51fd\u6570 \u63cf\u8ff0 random.random \u751f\u62100~1\u4e4b\u95f4\u7684\u968f\u673a\u6570 random.uniform \u751f\u6210\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570 random.randn \u751f\u6210\u6807\u51c6\u6b63\u6001\u7684\u968f\u673a\u6570 random.randint \u751f\u6210\u968f\u673a\u7684\u6574\u6570 random.normal \u751f\u6210\u6b63\u6001\u5206\u5e03 random.shuffle \u968f\u673a\u6253\u4e71\u987a\u5e8f random.seed \u8bbe\u7f6e\u968f\u673a\u79cd\u5b50 random_sample \u751f\u6210\u968f\u673a\u7684\u6d6e\u70b9\u6570 ### 3. \u521b\u5efa\u7279\u5b9a\u5f62\u72b6\u7684\u591a\u7ef4\u6570\u7ec4 \u51fd\u6570 \u63cf\u8ff0 -------------------- ----------------------------- np.zeros((3,4)) \u521b\u5efa3x4\u5168\u4e3a0\u7684\u6570\u7ec4 np.ones((3,4)) \u521b\u5efa3x4\u5168\u4e3a1\u7684\u6570\u7ec4 np.empty((3,4)) \u521b\u5efa\u7a7a\u6570\u7ec4\uff08\u975e0\uff09 np.zeros_like(ndarr) \u521b\u5efa\u76f8\u540c\u7ef4\u5ea6\u76840\u6570\u7ec4 np.ones_like(ndarr) \u540c\u4e0a np.empty_like(ndarr) \u540c\u4e0a np.eye(5) \u521b\u5efa5x5\u77e9\u9635\uff08\u5bf9\u89d2\u4e3a1\uff0c\u5176\u4ed6\u4e3a0 np.full((3,4),666) \u521b\u5efa\u5168\u4e3a666\u76843x4\u6570\u7ec4 ### 4. \u5229\u7528arange\u3001linspace\u51fd\u6570\u751f\u6210\u6570\u7ec4 1. arange([start,] stop[, step,], dtype = None) 1. start \u6307\u5b9a\u8d77\u59cb\uff1a\u9ed8\u8ba40 2. stop \u6307\u5b9a\u7ec8\u672b\uff1a\u4e0d\u53ef\u5c11 3. step \u6307\u5b9a\u6b65\u957f\uff1a\u9ed8\u8ba41 2. linspace(start, stop, num = 50, endpoint = True, retstep = False, dtype = None) - \u6839\u636e\u8f93\u5165\u7684\u6307\u5b9a\u6570\u636e\u8303\u56f4\u4ee5\u53ca\u7b49\u4efd\u6570\u91cf\uff0c\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u7ebf\u6027\u7b49\u5206 \u5411\u91cf import numpy as np print(np.linspace(0, 1, 10)) \u83b7\u53d6\u5143\u7d20 1. [:,:-1] : This will take all rows and all but the last column. 2. [:,-1] : This will take all rows and only the last column. 3. : denotes \"all\", and -1 in indexing means the last row/column. \u7b97\u6570\u8fd0\u7b97 \u9010\u5143\u4e58\u6cd5\uff1a np.multiply() \u70b9\u79ef\uff08\u5185\u79ef\u5143\u7d20\uff09\uff1a np.dot() \u6570\u7ec4\u53d8\u5f62 1. \u66f4\u6539\u6570\u7ec4\u7684\u5f62\u72b6 \u51fd\u6570 \u63cf\u8ff0 arr.reshape \u5bf9\u7ef4\u5ea6\u8fdb\u884c\u6539\u53d8\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u6570\u7ec4 arr.resize \u5bf9\u7ef4\u5ea6\u8fdb\u884c\u6539\u53d8\uff0c\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539 arr.T \u8f6c\u7f6e arr.ravel \u5c55\u5e73\uff0c\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539 arr.flatten \u5c55\u5e73\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 arr.squeeze \u53ea\u80fd\u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4 arr.transpose \u5bf9\u9ad8\u7ef4\u77e9\u9635\u8fdb\u884c\u8f74\u5bf9\u6362 1. reshape - \u6307\u5b9a\u7684\u7ef4\u5ea6\u53ef\u4ee5\u4ec5\u6307\u5b9a\u884c\u6216\u5217\uff0c\u4f46\u884c\u6216\u5217\u6570\u5fc5\u987b\u8981\u88ab\u6574\u9664 2. \u5408\u5e76\u6570\u7ec4 \u51fd\u6570 \u63cf\u8ff0 np.append \u5185\u5b58\u5360\u7528\u5927 np.concatenate \u6ca1\u6709\u5185\u5b58\u95ee\u9898 np.stack \u6cbf\u7740\u65b0\u7684\u8f74\u52a0\u5165\u4e00\u7cfb\u5217\u6570\u7ec4 np.hstack horizon np.vstack vertical np.dstack depth np.vsplit \u5c06\u6570\u7ec4\u5206\u89e3\u6210\u5782\u76f4\u7684\u591a\u4e2a\u5b50\u6570\u7ec4\u7684\u5217\u8868 \u6279\u91cf\u5904\u7406 \u901a\u7528\u51fd\u6570 \u4f7f\u7528C\u8bed\u8a00\u7ea7\u522b\u4e0b\u5b9e\u73b0\uff0c\u76f8\u6bd4math\u5e93\u4e2d\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u901f\u5ea6\u5feb \u64cd\u4f5c\u5bf9\u8c61\u4e3a\u6570\u7ec4 \u5e7f\u64ad\u673a\u5236 \u89c4\u5219 \u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2dshape\u6700\u957f\u7684\u6570\u7ec4\u770b\u9f50\uff0c\u4e0d\u8db3\u7684\u90e8\u5206\u5219\u901a\u8fc7\u5728\u524d\u9762\u52a01\u8865\u9f50 \u8f93\u51fa\u6570\u7ec4\u7684shape\u662f\u8f93\u5165\u6570\u7ec4shape\u7684\u5404\u4e2a\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u548c\u8f93\u51fa\u6570\u7ec4\u7684\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\u6216\u8005\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a1\u65f6\uff0c\u8fd9\u4e2a\u6570\u7ec4\u80fd\u88ab\u62ff\u6765\u8ba1\u7b97\uff0c\u5426\u5219\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\uff08\u6216\u590d\u5236\uff09\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c","title":"Numpy"},{"location":"MachineLearning/Numpy/#numpy","text":"","title":"Numpy"},{"location":"MachineLearning/Numpy/#_1","text":"\u7279\u70b9 \u5feb\u901f\u8282\u7701\u7a7a\u95f4\u7684\u591a\u7ef4\u6570\u7ec4ndarray\uff0c\u63d0\u4f9b\u6570\u7ec4\u5316\u7684\u7b97\u672f\u8fd0\u7b97\u548c\u9ad8\u7ea7\u7684\u5e7f\u64ad\u529f\u80fd \u4f7f\u7528\u6807\u51c6\u6570\u5b66\u51fd\u6570\u5bf9\u6574\u4e2a\u6570\u7ec4\u7684\u6570\u636e\u8fdb\u884c\u5feb\u901f\u8fd0\u7b97\uff0c\u800c\u65e0\u5e8f\u7f16\u5199\u5faa\u73af \u8bfb\u53d6/\u5199\u5165\u78c1\u76d8\u4e0a\u7684\u9635\u5217\u6570\u636e\u548c\u64cd\u4f5c\u5b58\u50a8\u5668\u6620\u50cf\u7684\u6587\u4ef6\u5de5\u5177 \u7ebf\u6027\u4ee3\u6570\u3001\u968f\u673a\u6570\u751f\u6210\u548c\u5085\u91cc\u53f6\u53d8\u6362\u7684\u80fd\u529b \u96c6\u6210C\u3001C++\u3001Fortran\u4ee3\u7801\u7684\u5de5\u5177","title":"\u6982\u8ff0"},{"location":"MachineLearning/Numpy/#numpy_1","text":"","title":"\u751f\u6210Numpy\u6570\u7ec4"},{"location":"MachineLearning/Numpy/#1","text":"\u5c06\u5217\u8868\u8f6c\u6362\u6210ndarray \u5d4c\u5957\u5217\u8868\u53ef\u4ee5\u8f6c\u6362\u4e3a\u591a\u7ef4\u6570\u7ec4 \u5c06\u5217\u8868\u66ff\u6362\u4e3a\u5143\u7ec4\u540c\u6837\u9002\u7528","title":"1. \u4ece\u5df2\u6709\u7684\u6570\u636e\u4e2d\u521b\u5efa\u6570\u7ec4"},{"location":"MachineLearning/Numpy/#2-random","text":"\u51fd\u6570 \u63cf\u8ff0 random.random \u751f\u62100~1\u4e4b\u95f4\u7684\u968f\u673a\u6570 random.uniform \u751f\u6210\u5747\u5300\u5206\u5e03\u7684\u968f\u673a\u6570 random.randn \u751f\u6210\u6807\u51c6\u6b63\u6001\u7684\u968f\u673a\u6570 random.randint \u751f\u6210\u968f\u673a\u7684\u6574\u6570 random.normal \u751f\u6210\u6b63\u6001\u5206\u5e03 random.shuffle \u968f\u673a\u6253\u4e71\u987a\u5e8f random.seed \u8bbe\u7f6e\u968f\u673a\u79cd\u5b50 random_sample \u751f\u6210\u968f\u673a\u7684\u6d6e\u70b9\u6570 ### 3. \u521b\u5efa\u7279\u5b9a\u5f62\u72b6\u7684\u591a\u7ef4\u6570\u7ec4 \u51fd\u6570 \u63cf\u8ff0 -------------------- ----------------------------- np.zeros((3,4)) \u521b\u5efa3x4\u5168\u4e3a0\u7684\u6570\u7ec4 np.ones((3,4)) \u521b\u5efa3x4\u5168\u4e3a1\u7684\u6570\u7ec4 np.empty((3,4)) \u521b\u5efa\u7a7a\u6570\u7ec4\uff08\u975e0\uff09 np.zeros_like(ndarr) \u521b\u5efa\u76f8\u540c\u7ef4\u5ea6\u76840\u6570\u7ec4 np.ones_like(ndarr) \u540c\u4e0a np.empty_like(ndarr) \u540c\u4e0a np.eye(5) \u521b\u5efa5x5\u77e9\u9635\uff08\u5bf9\u89d2\u4e3a1\uff0c\u5176\u4ed6\u4e3a0 np.full((3,4),666) \u521b\u5efa\u5168\u4e3a666\u76843x4\u6570\u7ec4 ### 4. \u5229\u7528arange\u3001linspace\u51fd\u6570\u751f\u6210\u6570\u7ec4 1. arange([start,] stop[, step,], dtype = None) 1. start \u6307\u5b9a\u8d77\u59cb\uff1a\u9ed8\u8ba40 2. stop \u6307\u5b9a\u7ec8\u672b\uff1a\u4e0d\u53ef\u5c11 3. step \u6307\u5b9a\u6b65\u957f\uff1a\u9ed8\u8ba41 2. linspace(start, stop, num = 50, endpoint = True, retstep = False, dtype = None) - \u6839\u636e\u8f93\u5165\u7684\u6307\u5b9a\u6570\u636e\u8303\u56f4\u4ee5\u53ca\u7b49\u4efd\u6570\u91cf\uff0c\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u7ebf\u6027\u7b49\u5206 \u5411\u91cf import numpy as np print(np.linspace(0, 1, 10))","title":"2. \u5229\u7528random\u6a21\u5757"},{"location":"MachineLearning/Numpy/#_2","text":"1. [:,:-1] : This will take all rows and all but the last column. 2. [:,-1] : This will take all rows and only the last column. 3. : denotes \"all\", and -1 in indexing means the last row/column.","title":"\u83b7\u53d6\u5143\u7d20"},{"location":"MachineLearning/Numpy/#_3","text":"\u9010\u5143\u4e58\u6cd5\uff1a np.multiply() \u70b9\u79ef\uff08\u5185\u79ef\u5143\u7d20\uff09\uff1a np.dot()","title":"\u7b97\u6570\u8fd0\u7b97"},{"location":"MachineLearning/Numpy/#_4","text":"","title":"\u6570\u7ec4\u53d8\u5f62"},{"location":"MachineLearning/Numpy/#1_1","text":"\u51fd\u6570 \u63cf\u8ff0 arr.reshape \u5bf9\u7ef4\u5ea6\u8fdb\u884c\u6539\u53d8\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u6570\u7ec4 arr.resize \u5bf9\u7ef4\u5ea6\u8fdb\u884c\u6539\u53d8\uff0c\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539 arr.T \u8f6c\u7f6e arr.ravel \u5c55\u5e73\uff0c\u5728\u539f\u6570\u7ec4\u4e0a\u4fee\u6539 arr.flatten \u5c55\u5e73\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4 arr.squeeze \u53ea\u80fd\u5bf9\u7ef4\u6570\u4e3a1\u7684\u7ef4\u5ea6\u964d\u7ef4 arr.transpose \u5bf9\u9ad8\u7ef4\u77e9\u9635\u8fdb\u884c\u8f74\u5bf9\u6362 1. reshape - \u6307\u5b9a\u7684\u7ef4\u5ea6\u53ef\u4ee5\u4ec5\u6307\u5b9a\u884c\u6216\u5217\uff0c\u4f46\u884c\u6216\u5217\u6570\u5fc5\u987b\u8981\u88ab\u6574\u9664","title":"1. \u66f4\u6539\u6570\u7ec4\u7684\u5f62\u72b6"},{"location":"MachineLearning/Numpy/#2","text":"\u51fd\u6570 \u63cf\u8ff0 np.append \u5185\u5b58\u5360\u7528\u5927 np.concatenate \u6ca1\u6709\u5185\u5b58\u95ee\u9898 np.stack \u6cbf\u7740\u65b0\u7684\u8f74\u52a0\u5165\u4e00\u7cfb\u5217\u6570\u7ec4 np.hstack horizon np.vstack vertical np.dstack depth np.vsplit \u5c06\u6570\u7ec4\u5206\u89e3\u6210\u5782\u76f4\u7684\u591a\u4e2a\u5b50\u6570\u7ec4\u7684\u5217\u8868","title":"2. \u5408\u5e76\u6570\u7ec4"},{"location":"MachineLearning/Numpy/#_5","text":"","title":"\u6279\u91cf\u5904\u7406"},{"location":"MachineLearning/Numpy/#_6","text":"\u4f7f\u7528C\u8bed\u8a00\u7ea7\u522b\u4e0b\u5b9e\u73b0\uff0c\u76f8\u6bd4math\u5e93\u4e2d\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u901f\u5ea6\u5feb \u64cd\u4f5c\u5bf9\u8c61\u4e3a\u6570\u7ec4","title":"\u901a\u7528\u51fd\u6570"},{"location":"MachineLearning/Numpy/#_7","text":"\u89c4\u5219 \u8ba9\u6240\u6709\u8f93\u5165\u6570\u7ec4\u90fd\u5411\u5176\u4e2dshape\u6700\u957f\u7684\u6570\u7ec4\u770b\u9f50\uff0c\u4e0d\u8db3\u7684\u90e8\u5206\u5219\u901a\u8fc7\u5728\u524d\u9762\u52a01\u8865\u9f50 \u8f93\u51fa\u6570\u7ec4\u7684shape\u662f\u8f93\u5165\u6570\u7ec4shape\u7684\u5404\u4e2a\u8f74\u4e0a\u7684\u6700\u5927\u503c \u5982\u679c\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u548c\u8f93\u51fa\u6570\u7ec4\u7684\u5bf9\u5e94\u8f74\u7684\u957f\u5ea6\u76f8\u540c\u6216\u8005\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a1\u65f6\uff0c\u8fd9\u4e2a\u6570\u7ec4\u80fd\u88ab\u62ff\u6765\u8ba1\u7b97\uff0c\u5426\u5219\u51fa\u9519 \u5f53\u8f93\u5165\u6570\u7ec4\u7684\u67d0\u4e2a\u8f74\u7684\u957f\u5ea6\u4e3a1\u65f6\uff0c\u6cbf\u7740\u6b64\u8f74\u8fd0\u7b97\u65f6\u90fd\u7528\uff08\u6216\u590d\u5236\uff09\u6b64\u8f74\u4e0a\u7684\u7b2c\u4e00\u7ec4\u503c","title":"\u5e7f\u64ad\u673a\u5236"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/","text":"Pytorch\u7f16\u5199\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u57fa\u672c\u601d\u8def \u6a21\u578b\u5b66\u4e60\u8fc7\u7a0b \u56db\u5927\u6b65\u9aa4 \u8f93\u5165\u5904\u7406\u6a21\u5757 torch.utils.data.Dataset \u9700\u8981\u91cd\u5199\u7684\u65b9\u6cd5 __init__(self) __getitem__(self, index) __len__(self) torch.utils.data.Dataloader \u6784\u9020\u65b9\u6cd5\uff1a Dataloader(dataset, batch_size = 1, shuffle = False) \u6a21\u578b\u6784\u5efa\u6a21\u5757 \u6240\u6709\u7684\u6a21\u578b\u9700\u8981\u7ee7\u627f torch.nn.Module \u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1a __init__(self) __forward__(self, x) \uff1a\u5411\u524d\u4f20\u64ad\u7684\u8fc7\u7a0b\uff0c\u5728\u5b9e\u73b0\u6a21\u578b\u65f6\uff0c\u65e0\u9700\u8003\u8651\u53cd\u5411\u4f20\u64ad \u5b9a\u4e49\u4ee3\u4ef7\u51fd\u6570\u548c\u4f18\u5316\u5668\u6a21\u5757 criterion = nn.MSELoss(reduction = 'mean') optimizer = torch.optim.SGD(model.parameters(), lr = 0.001, momentum=0.9) \u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b \u5faa\u73af\u5927\u81f4\u5982\u4e0b def train(epoch): # for i, data in enumerate(dataLoader, 0): x, y = data y_pred = model(x) # \u524d\u5411\u4f20\u64ad loss = criterion(y_pred, y) # \u8ba1\u7b97\u4ee3\u4ef7\u51fd\u6570 optimizer.zero_grad() # \u68af\u5ea6\u6e05\u96f6\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\u8ba1\u7b97 loss.backward() # \u53cd\u5411\u4f20\u64ad optimizer.step() # \u66f4\u65b0\u8bad\u7ec3\u53c2\u6570","title":"Pytorch\u7f16\u5199\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u57fa\u672c\u601d\u8def"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#pytorch","text":"\u6a21\u578b\u5b66\u4e60\u8fc7\u7a0b","title":"Pytorch\u7f16\u5199\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u57fa\u672c\u601d\u8def"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#_1","text":"","title":"\u56db\u5927\u6b65\u9aa4"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#_2","text":"torch.utils.data.Dataset \u9700\u8981\u91cd\u5199\u7684\u65b9\u6cd5 __init__(self) __getitem__(self, index) __len__(self) torch.utils.data.Dataloader \u6784\u9020\u65b9\u6cd5\uff1a Dataloader(dataset, batch_size = 1, shuffle = False)","title":"\u8f93\u5165\u5904\u7406\u6a21\u5757"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#_3","text":"\u6240\u6709\u7684\u6a21\u578b\u9700\u8981\u7ee7\u627f torch.nn.Module \u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1a __init__(self) __forward__(self, x) \uff1a\u5411\u524d\u4f20\u64ad\u7684\u8fc7\u7a0b\uff0c\u5728\u5b9e\u73b0\u6a21\u578b\u65f6\uff0c\u65e0\u9700\u8003\u8651\u53cd\u5411\u4f20\u64ad","title":"\u6a21\u578b\u6784\u5efa\u6a21\u5757"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#_4","text":"criterion = nn.MSELoss(reduction = 'mean') optimizer = torch.optim.SGD(model.parameters(), lr = 0.001, momentum=0.9)","title":"\u5b9a\u4e49\u4ee3\u4ef7\u51fd\u6570\u548c\u4f18\u5316\u5668\u6a21\u5757"},{"location":"MachineLearning/Pytorch%E7%BC%96%E5%86%99%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/#_5","text":"\u5faa\u73af\u5927\u81f4\u5982\u4e0b def train(epoch): # for i, data in enumerate(dataLoader, 0): x, y = data y_pred = model(x) # \u524d\u5411\u4f20\u64ad loss = criterion(y_pred, y) # \u8ba1\u7b97\u4ee3\u4ef7\u51fd\u6570 optimizer.zero_grad() # \u68af\u5ea6\u6e05\u96f6\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\u8ba1\u7b97 loss.backward() # \u53cd\u5411\u4f20\u64ad optimizer.step() # \u66f4\u65b0\u8bad\u7ec3\u53c2\u6570","title":"\u6784\u5efa\u8bad\u7ec3\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%89%8D%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/","text":"\u524d\u5411\u4e0e\u53cd\u5411\u4f20\u64ad \u524d\u5411\u4f20\u64ad \u6307\u5bf9\u795e\u7ecf\u7f51\u7edc\u6cbf\u7740\u4ece \u8f93\u5165\u5c42\u5230\u8f93\u51fa\u5c42 \u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u8ba1\u7b97\u5e76\u5b58\u50a8\u6a21\u578b\u7684\u4e2d\u95f4\u53d8\u91cf \u53cd\u5411\u4f20\u64ad \u6307\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u68af\u5ea6\u7684\u65b9\u6cd5 \u4e00\u53e5\u5fae\u79ef\u5206\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\uff0c\u6cbf \u8f93\u51fa\u5c42\u5230\u8f93\u5165\u5c42 \u7684\u987a\u5e8f\uff0c\u4ee5\u6b64\u8ba1\u7b97\u5e76\u5b58\u50a8\u76ee\u6807\u51fd\u6570\u6709\u5173\u795e\u7ecf\u7f51\u7edc\u5404\u5c42\u7684\u4e2d\u95f4\u53d8\u91cf\u53ca\u53c2\u6570\u7684\u68af\u5ea6 \u53c2\u8003\u89c6\u9891\uff1a \u3010\u5b98\u65b9\u53cc\u8bed\u3011\u6df1\u5ea6\u5b66\u4e60\u4e4b\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \u4e0a/\u4e0b Part 3 ver 0.9 beta_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u524d\u5411\u4e0e\u53cd\u5411\u4f20\u64ad"},{"location":"MachineLearning/%E5%89%8D%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/#_1","text":"","title":"\u524d\u5411\u4e0e\u53cd\u5411\u4f20\u64ad"},{"location":"MachineLearning/%E5%89%8D%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/#_2","text":"\u6307\u5bf9\u795e\u7ecf\u7f51\u7edc\u6cbf\u7740\u4ece \u8f93\u5165\u5c42\u5230\u8f93\u51fa\u5c42 \u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u8ba1\u7b97\u5e76\u5b58\u50a8\u6a21\u578b\u7684\u4e2d\u95f4\u53d8\u91cf","title":"\u524d\u5411\u4f20\u64ad"},{"location":"MachineLearning/%E5%89%8D%E5%90%91%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/#_3","text":"\u6307\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u53c2\u6570\u68af\u5ea6\u7684\u65b9\u6cd5 \u4e00\u53e5\u5fae\u79ef\u5206\u4e2d\u7684\u94fe\u5f0f\u6cd5\u5219\uff0c\u6cbf \u8f93\u51fa\u5c42\u5230\u8f93\u5165\u5c42 \u7684\u987a\u5e8f\uff0c\u4ee5\u6b64\u8ba1\u7b97\u5e76\u5b58\u50a8\u76ee\u6807\u51fd\u6570\u6709\u5173\u795e\u7ecf\u7f51\u7edc\u5404\u5c42\u7684\u4e2d\u95f4\u53d8\u91cf\u53ca\u53c2\u6570\u7684\u68af\u5ea6 \u53c2\u8003\u89c6\u9891\uff1a \u3010\u5b98\u65b9\u53cc\u8bed\u3011\u6df1\u5ea6\u5b66\u4e60\u4e4b\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \u4e0a/\u4e0b Part 3 ver 0.9 beta_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"\u53cd\u5411\u4f20\u64ad"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/","text":"\u5206\u7c7b(Classification) \u5206\u7c7b $x \\rightarrow f(x) \\rightarrow Class n$ \u5e94\u7528\uff1a \u4fe1\u7528\u8bc4\u4ef7(Credit Scoring) \u533b\u5b66\u8bca\u65ad(Medical Diagnosis) \u624b\u5199\u4f53\u8bc6\u522b(Handwritten Character Recognition) \u4eba\u8138\u8bc6\u522b(Face Recognition) \u793a\u4f8b\uff1aPokemon Classification(Binary Classification) \u5982\u679c\u4f7f\u7528Regression \u5728\u5206\u7c7b\u805a\u96c6\u65f6\u5019\u53ef\u80fd\u8868\u73b0\u8f83\u597d \u5728\u8fdc\u7aef\u51fa\u73b0\u805a\u96c6\u65f6\uff0cRegression\u4f1a\u4e3a\u4e86\u964d\u4f4eLoss\uff0c\u800c\u51fa\u73b0\u504f\u5dee\uff08\u8fd9\u6837\u7684\u60c5\u51b5\u4e0d\u7b26\u5408\u5206\u7c7b\u7684\u8981\u6c42\uff09 \u7406\u60f3\u7684\u9009\u62e9 \u6a21\u578b\uff1a $$ y = \\begin{cases} class1\\quad g(x) > 0\\ class2 \\qquad else \\end{cases} $$ \u635f\u5931\u51fd\u6570: $$L(f)= \\sum _{n} \\delta(f(x^n) \\neq \\hat y^n)$$ \u5339\u914d\u9519\u8bef\u7684\u6b21\u6570\u548c \u6700\u597d\u7684\u51fd\u6570\uff1aPerceptron, SVM \u8d1d\u53f6\u65af - \u6734\u7d20\u8d1d\u53f6\u65af\uff1a - \u516c\u5f0f\uff1a$$p(C|F_1,\u2026,F_n) = \\frac{p(C)p(F_1,\u2026,F_n|C)}{p(F_1,\u2026,F_n)}$$ - \u7b80\u5355\u8868\u793a\uff1a$$\u540e\u9a8c\u6982\u7387 = \\frac{\u5148\u9a8c\u6982\u7387 \\times \u53ef\u80fd\u6027}{\u5168\u90e8\u53ef\u80fd}$$ - \u5bf9\u4e8e\u6848\u4f8b\uff1a - $x$\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u96c6\u5408\u7684\u6982\u7387\uff1a$$P(C_1|x)=\\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1) + P(x|C_2)P(C_2)}$$ - \u751f\u6210\u6a21\u578b\uff08\u6734\u7d20\u8d1d\u53f6\u65af\uff09\uff1a$P(x)=P(x|C_1)P(C_1) + P(x|C_2)P(C_2)$ \u9ad8\u65af\u5206\u5e03(\u6b63\u6001\u5206\u5e03) \u6b63\u6001\u5206\u5e03 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 $$f_{\\mu, \\Sigma}(x) = \\frac{1}{(2\\pi)^{D/2}} \\frac{1}{\\lvert\\Sigma\\rvert^{1/2}}exp{-\\frac{1}{2}(x-\\mu)^{T}\\Sigma^{-1}(x-\\mu)}$$ - \u8f93\u5165\uff1a\u5411\u91cf$x$ - \u8f93\u51fa\uff1a$x$\u5c5e\u4e8e\u8be5\u7c7b\u7684\u53ef\u80fd\u6027 - \u56fe\u7684\u5f62\u72b6\u53d6\u51b3\u4e8e$\\mu$\u548c$\\Sigma$ \u5982\u4f55\u627e\u5230$\\mu$\u548c$\\Sigma$ $\\rightarrow$ \u6781\u5927\u4f3c\u7136\u4f30\u8ba1(Maximum Likelihood) \u6781\u5927\u4f3c\u7136(Maximum Likelihood) $$\\begin{array} L(\\mu,\\Sigma) = f_{\\mu,\\Sigma}(x^1)f_{\\mu,\\Sigma}(x^2)f_{\\mu,\\Sigma}(x^3)\u2026f_{\\mu,\\Sigma}(x^n) \\ \\Downarrow \\ \\mu^ , \\Sigma^ = arg\\max_{\\mu,\\Sigma}L(\\mu, \\Sigma) \\ \\Downarrow \\ \\mu^ =\\frac{1}{n} \\sum^{n}_{i}x^i\\qquad\\Sigma^ = \\frac{1}{n} \\sum^{n}_{i}(x^n-\\mu^ )(x^n-\\mu^ )^T \\end{array}$$ \u5bf9\u4e8e$\\Sigma$\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u503c\uff0c$\\Sigma$\u7684\u503c\u7531$\\Sigma_1, \\Sigma_2\u2026\\Sigma_n$\u5171\u540c\u51b3\u5b9a","title":"\u5206\u7c7b(Classification)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#classification","text":"","title":"\u5206\u7c7b(Classification)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#_1","text":"$x \\rightarrow f(x) \\rightarrow Class n$ \u5e94\u7528\uff1a \u4fe1\u7528\u8bc4\u4ef7(Credit Scoring) \u533b\u5b66\u8bca\u65ad(Medical Diagnosis) \u624b\u5199\u4f53\u8bc6\u522b(Handwritten Character Recognition) \u4eba\u8138\u8bc6\u522b(Face Recognition)","title":"\u5206\u7c7b"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#pokemon-classificationbinary-classification","text":"","title":"\u793a\u4f8b\uff1aPokemon Classification(Binary Classification)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#regression","text":"\u5728\u5206\u7c7b\u805a\u96c6\u65f6\u5019\u53ef\u80fd\u8868\u73b0\u8f83\u597d \u5728\u8fdc\u7aef\u51fa\u73b0\u805a\u96c6\u65f6\uff0cRegression\u4f1a\u4e3a\u4e86\u964d\u4f4eLoss\uff0c\u800c\u51fa\u73b0\u504f\u5dee\uff08\u8fd9\u6837\u7684\u60c5\u51b5\u4e0d\u7b26\u5408\u5206\u7c7b\u7684\u8981\u6c42\uff09","title":"\u5982\u679c\u4f7f\u7528Regression"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#_2","text":"\u6a21\u578b\uff1a $$ y = \\begin{cases} class1\\quad g(x) > 0\\ class2 \\qquad else \\end{cases} $$ \u635f\u5931\u51fd\u6570: $$L(f)= \\sum _{n} \\delta(f(x^n) \\neq \\hat y^n)$$ \u5339\u914d\u9519\u8bef\u7684\u6b21\u6570\u548c \u6700\u597d\u7684\u51fd\u6570\uff1aPerceptron, SVM","title":"\u7406\u60f3\u7684\u9009\u62e9"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#_3","text":"- \u6734\u7d20\u8d1d\u53f6\u65af\uff1a - \u516c\u5f0f\uff1a$$p(C|F_1,\u2026,F_n) = \\frac{p(C)p(F_1,\u2026,F_n|C)}{p(F_1,\u2026,F_n)}$$ - \u7b80\u5355\u8868\u793a\uff1a$$\u540e\u9a8c\u6982\u7387 = \\frac{\u5148\u9a8c\u6982\u7387 \\times \u53ef\u80fd\u6027}{\u5168\u90e8\u53ef\u80fd}$$ - \u5bf9\u4e8e\u6848\u4f8b\uff1a - $x$\u5c5e\u4e8e\u67d0\u4e00\u4e2a\u96c6\u5408\u7684\u6982\u7387\uff1a$$P(C_1|x)=\\frac{P(x|C_1)P(C_1)}{P(x|C_1)P(C_1) + P(x|C_2)P(C_2)}$$ - \u751f\u6210\u6a21\u578b\uff08\u6734\u7d20\u8d1d\u53f6\u65af\uff09\uff1a$P(x)=P(x|C_1)P(C_1) + P(x|C_2)P(C_2)$","title":"\u8d1d\u53f6\u65af"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#_4","text":"\u6b63\u6001\u5206\u5e03 - \u7ef4\u57fa\u767e\u79d1\uff0c\u81ea\u7531\u7684\u767e\u79d1\u5168\u4e66 $$f_{\\mu, \\Sigma}(x) = \\frac{1}{(2\\pi)^{D/2}} \\frac{1}{\\lvert\\Sigma\\rvert^{1/2}}exp{-\\frac{1}{2}(x-\\mu)^{T}\\Sigma^{-1}(x-\\mu)}$$ - \u8f93\u5165\uff1a\u5411\u91cf$x$ - \u8f93\u51fa\uff1a$x$\u5c5e\u4e8e\u8be5\u7c7b\u7684\u53ef\u80fd\u6027 - \u56fe\u7684\u5f62\u72b6\u53d6\u51b3\u4e8e$\\mu$\u548c$\\Sigma$ \u5982\u4f55\u627e\u5230$\\mu$\u548c$\\Sigma$ $\\rightarrow$ \u6781\u5927\u4f3c\u7136\u4f30\u8ba1(Maximum Likelihood)","title":"\u9ad8\u65af\u5206\u5e03(\u6b63\u6001\u5206\u5e03)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E5%88%86%E7%B1%BB%28Classification%29/#maximum-likelihood","text":"$$\\begin{array} L(\\mu,\\Sigma) = f_{\\mu,\\Sigma}(x^1)f_{\\mu,\\Sigma}(x^2)f_{\\mu,\\Sigma}(x^3)\u2026f_{\\mu,\\Sigma}(x^n) \\ \\Downarrow \\ \\mu^ , \\Sigma^ = arg\\max_{\\mu,\\Sigma}L(\\mu, \\Sigma) \\ \\Downarrow \\ \\mu^ =\\frac{1}{n} \\sum^{n}_{i}x^i\\qquad\\Sigma^ = \\frac{1}{n} \\sum^{n}_{i}(x^n-\\mu^ )(x^n-\\mu^ )^T \\end{array}$$ \u5bf9\u4e8e$\\Sigma$\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u503c\uff0c$\\Sigma$\u7684\u503c\u7531$\\Sigma_1, \\Sigma_2\u2026\\Sigma_n$\u5171\u540c\u51b3\u5b9a","title":"\u6781\u5927\u4f3c\u7136(Maximum Likelihood)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/","text":"\u903b\u8f91\u56de\u5f52(Logistic Regression) \u6a21\u578b Sigmoid(0~1) \u4ee3\u4ef7\u51fd\u6570\uff1a\u4ea4\u53c9\u71b5(Cross Entropy) \u63a8\u5bfc\u8fc7\u7a0b $$L(w,b) = f_{w,b}(x^1)f_{w,b}(x^2)(1-f_{w,b}(x^3))\u2026\u2026f_{w,b}(x^n)$$ $$w^ ,b^ = arg \\max_{w,b}L(w,b)=arg\\min_{w,b}-\\ln{L(w,b)}$$ $$-\\ln{L(w,b)}=\\sum_n -[\\hat{y}\\ln{f_{w,b}(x^n)+(1-\\hat {y}^n)\\ln{1-f_{w,b}(x^n)}}]$$ $-[\\hat{y}\\ln{f_{w,b}(x^n)+(1-\\hat {y}^n)\\ln{(1-f_{w,b}(x^n)})}]$\u4e3a\u4e24\u4e2a \u4f2f\u52aa\u5229\u5206\u5e03\uff08\u4e24\u70b9\u5206\u5e03\uff09 \u7684\u4ea4\u53c9\u71b5 \u610f\u4e49 \u4ea4\u53c9\u71b5 \u8d8a\u5c0f \u4ee3\u8868\u4e24\u4e2aDistribution \u8d8a\u63a5\u8fd1 \uff0c\u5b8c\u5168\u76f8\u540c\u65f6\u4e3a0\uff0c\u7528\u4e8e\u9010\u6e10\u903c\u8fd1\u771f\u5b9e\u6982\u7387\u3001\u8bc4\u5224\u53c2\u6570\u7684\u597d\u574f \u76ee\u7684 \u901a\u8fc7\u4f18\u5316\uff0c\u4e0d\u65ad\u51cf\u5c0f\u4ea4\u53c9\u71b5(Cross Entropy) \u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528Square Error - \u5bf9\u4e8eSquare Error\uff1a\u5728\u8fdc\u79bb\u6700\u4f18\u70b9\u548c\u6700\u4f18\u70b9\u5904\u7684\u53d8\u5316\u7387\u90fd\u76f8\u5bf9\u8f83\u5c0f - \u56fa\u5b9a\u5b66\u4e60\u7387\uff1a\u5728\u8fdc\u79bb\u6700\u4f18\u70b9\u65f6\uff0c\u5b66\u4e60\u6162 - \u81ea\u9002\u5e94\u5b66\u4e60\u7387\uff1a\u65e0\u6cd5\u5224\u65ad\u5f53\u524d\u4e0e\u6700\u4f18\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u91c7\u7528\u4e86\u9519\u8bef\u7684\u5b66\u4e60\u7387 \u4f18\u5316(Optimizer) BP \u4f7f\u7528\u68af\u5ea6\u4e0b\u964d $$w_i \\leftarrow w_i - \\eta\\sum_n-(\\hat y^n -f_{w,b}(x^n))x_i^n$$ \u533a\u522b \u5224\u522b\u6a21\u578b\u4e0e\u751f\u6210\u6a21\u578b(Discriminative and Generative) $$P(C_1|x)=\\sigma(w\u00b7x+b)$$ \u540c\u6837\u7684\u6a21\u578b\uff0c\u9009\u62e9\u4e0d\u540c\u7684\u51fd\u6570\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u679c \u5224\u522b\u6a21\u578b(Discriminative) \u76f4\u63a5\u627e\u5230$w$\u548c$b$ \u4e00\u822c\u6765\u8bf4\uff0c\u66f4\u597d\uff08\u5148\u9a8c\u6982\u7387\u5bf9\u751f\u6210\u6a21\u578b\u7684\u5f71\u54cd\uff09 \u751f\u6210\u6a21\u578b(Generative) \u901a\u8fc7\u9ad8\u65af\u5206\u5e03\uff0c\u627e$\\mu^1\u3001\\mu^2\u3001\\Sigma^{-1}$\uff0c$$\\begin{array}{ll} w^T=(\\mu^1-\\mu^2)^T\\Sigma^{-1} \\ b=-\\frac{1}{2}(\\mu^1)^T(\\Sigma^1)^{-1}\\mu^1+\\frac{1}{2}(\\mu^2)^T(\\Sigma^2)^{-1}\\mu^2+\\ln{\\frac{N_1}{N_2}}\\ \\end{array}$$ \u591a\u4e2a\u7c7b\u522b\u5206\u7c7b(Multi-class Clasification) $$\\begin{array}{ll} \\mathrm{C} {1}: w^{1}, b {1} & z_{1}=w^{1} \\cdot x+b_{1} \\ \\mathrm{C} {2}: w^{2}, b {2} & z_{2}=w^{2} \\cdot x+b_{2} \\ \\mathrm{C} {3}: w^{3}, b {3} & z_{3}=w^{3} \\cdot x+b_{3} \\end{array}$$ Softmax \u529f\u80fd\uff1a \u5f52\u4e00\u5316 \u653e\u5927\u5dee\u5f02 Logistic Regression\u7684\u9650\u5236 - \u65b9\u6848\uff1a\u9009\u62e9\u5176\u4ed6\u7279\u5f81","title":"\u903b\u8f91\u56de\u5f52(Logistic Regression)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#logistic-regression","text":"","title":"\u903b\u8f91\u56de\u5f52(Logistic Regression)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#_1","text":"Sigmoid(0~1)","title":"\u6a21\u578b"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#cross-entropy","text":"","title":"\u4ee3\u4ef7\u51fd\u6570\uff1a\u4ea4\u53c9\u71b5(Cross Entropy)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#_2","text":"$$L(w,b) = f_{w,b}(x^1)f_{w,b}(x^2)(1-f_{w,b}(x^3))\u2026\u2026f_{w,b}(x^n)$$ $$w^ ,b^ = arg \\max_{w,b}L(w,b)=arg\\min_{w,b}-\\ln{L(w,b)}$$ $$-\\ln{L(w,b)}=\\sum_n -[\\hat{y}\\ln{f_{w,b}(x^n)+(1-\\hat {y}^n)\\ln{1-f_{w,b}(x^n)}}]$$ $-[\\hat{y}\\ln{f_{w,b}(x^n)+(1-\\hat {y}^n)\\ln{(1-f_{w,b}(x^n)})}]$\u4e3a\u4e24\u4e2a \u4f2f\u52aa\u5229\u5206\u5e03\uff08\u4e24\u70b9\u5206\u5e03\uff09 \u7684\u4ea4\u53c9\u71b5","title":"\u63a8\u5bfc\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#_3","text":"\u4ea4\u53c9\u71b5 \u8d8a\u5c0f \u4ee3\u8868\u4e24\u4e2aDistribution \u8d8a\u63a5\u8fd1 \uff0c\u5b8c\u5168\u76f8\u540c\u65f6\u4e3a0\uff0c\u7528\u4e8e\u9010\u6e10\u903c\u8fd1\u771f\u5b9e\u6982\u7387\u3001\u8bc4\u5224\u53c2\u6570\u7684\u597d\u574f","title":"\u610f\u4e49"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#_4","text":"\u901a\u8fc7\u4f18\u5316\uff0c\u4e0d\u65ad\u51cf\u5c0f\u4ea4\u53c9\u71b5(Cross Entropy)","title":"\u76ee\u7684"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#square-error","text":"- \u5bf9\u4e8eSquare Error\uff1a\u5728\u8fdc\u79bb\u6700\u4f18\u70b9\u548c\u6700\u4f18\u70b9\u5904\u7684\u53d8\u5316\u7387\u90fd\u76f8\u5bf9\u8f83\u5c0f - \u56fa\u5b9a\u5b66\u4e60\u7387\uff1a\u5728\u8fdc\u79bb\u6700\u4f18\u70b9\u65f6\uff0c\u5b66\u4e60\u6162 - \u81ea\u9002\u5e94\u5b66\u4e60\u7387\uff1a\u65e0\u6cd5\u5224\u65ad\u5f53\u524d\u4e0e\u6700\u4f18\u70b9\u7684\u8ddd\u79bb\uff0c\u800c\u91c7\u7528\u4e86\u9519\u8bef\u7684\u5b66\u4e60\u7387","title":"\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528Square Error"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#optimizer","text":"BP \u4f7f\u7528\u68af\u5ea6\u4e0b\u964d $$w_i \\leftarrow w_i - \\eta\\sum_n-(\\hat y^n -f_{w,b}(x^n))x_i^n$$","title":"\u4f18\u5316(Optimizer)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#_5","text":"","title":"\u533a\u522b"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#discriminative-and-generative","text":"$$P(C_1|x)=\\sigma(w\u00b7x+b)$$ \u540c\u6837\u7684\u6a21\u578b\uff0c\u9009\u62e9\u4e0d\u540c\u7684\u51fd\u6570\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u679c","title":"\u5224\u522b\u6a21\u578b\u4e0e\u751f\u6210\u6a21\u578b(Discriminative and Generative)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#discriminative","text":"\u76f4\u63a5\u627e\u5230$w$\u548c$b$ \u4e00\u822c\u6765\u8bf4\uff0c\u66f4\u597d\uff08\u5148\u9a8c\u6982\u7387\u5bf9\u751f\u6210\u6a21\u578b\u7684\u5f71\u54cd\uff09","title":"\u5224\u522b\u6a21\u578b(Discriminative)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#generative","text":"\u901a\u8fc7\u9ad8\u65af\u5206\u5e03\uff0c\u627e$\\mu^1\u3001\\mu^2\u3001\\Sigma^{-1}$\uff0c$$\\begin{array}{ll} w^T=(\\mu^1-\\mu^2)^T\\Sigma^{-1} \\ b=-\\frac{1}{2}(\\mu^1)^T(\\Sigma^1)^{-1}\\mu^1+\\frac{1}{2}(\\mu^2)^T(\\Sigma^2)^{-1}\\mu^2+\\ln{\\frac{N_1}{N_2}}\\ \\end{array}$$","title":"\u751f\u6210\u6a21\u578b(Generative)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#multi-class-clasification","text":"$$\\begin{array}{ll} \\mathrm{C} {1}: w^{1}, b {1} & z_{1}=w^{1} \\cdot x+b_{1} \\ \\mathrm{C} {2}: w^{2}, b {2} & z_{2}=w^{2} \\cdot x+b_{2} \\ \\mathrm{C} {3}: w^{3}, b {3} & z_{3}=w^{3} \\cdot x+b_{3} \\end{array}$$","title":"\u591a\u4e2a\u7c7b\u522b\u5206\u7c7b(Multi-class Clasification)"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#softmax","text":"\u529f\u80fd\uff1a \u5f52\u4e00\u5316 \u653e\u5927\u5dee\u5f02","title":"Softmax"},{"location":"MachineLearning/%E5%88%86%E7%B1%BB%28Classification%29/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%28Logistic%20Regression%29/#logistic-regression_1","text":"- \u65b9\u6848\uff1a\u9009\u62e9\u5176\u4ed6\u7279\u5f81","title":"Logistic Regression\u7684\u9650\u5236"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/","text":"\u56de\u5f52\u95ee\u9898 \u673a\u5668\u5b66\u4e60 \u8ba9\u673a\u5668\u5177\u5907\u627e\u4e00\u4e2a\u51fd\u6570\u7684\u80fd\u529b \u56de\u5f52\u95ee\u9898 \u5b9a\u4e49\u6a21\u578b \u5e26\u6709\u672a\u77e5\u53c2\u6570\u7684\u51fd\u6570\uff1a$$eg:y=b+w*x_1$$ $y$\u662f\u8981\u9884\u6d4b\u7684\u4e1c\u897f $x_1$\u662f\u5df2\u77e5\u4fe1\u606f $b$\u4e0e$w$\u662f\u672a\u77e5\u7684\u53c2\u6570\uff0c\u673a\u5668\u5b66\u4e60\u5373\u627e\u53c2\u6570 \u96be\u70b9\u5728\u4e8e\u6a21\u578b\u7684\u8bbe\u8ba1 \u4f7f\u7528\u5927\u91cf\u7684\u51fd\u6570\u53e0\u52a0\uff0c\u7ec4\u5408\u6210\u4efb\u610f\u51fd\u6570\uff1a$$y = b + \\sum i c_isigmoid(b_i+\\sum _j w {ij}x_{j})$$ Sigmoid $$y=c\\frac {1}{1 + e^{-(b + wx_1)}}$$ ReLU $$y=c*max(0,b+wx_1)$$ Sigmoid\u548cReLU\u8fd9\u6837\u7684\u51fd\u6570\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u79f0\u4e3a \u6fc0\u6d3b\u51fd\u6570 (Activation Function) \u5b9a\u4e49\u4ee3\u4ef7\u51fd\u6570 \u7528\u4e8e\u8bc4\u5224\u6a21\u578b\u4e2d\u53c2\u6570\u7684\u597d\u574f MSE(mean square error)\uff1a$${ L(f) =\\sum ^{i}_{n = 1}(\\hat{y}^n - f(x^n))^2 }$$ MAE(mean absolute error)\uff1a$${ L(f) =\\sum ^{i}_{n = 1}\\lvert \\hat{y}^n - f(x^n)\\rvert }$$ \u9009\u62e9\u4f18\u5316\u5668 \u68af\u5ea6\u4e0b\u964d(Gradient Descent) \u53c2\u8003\u89c6\u9891\uff1a \u3010\u5b98\u65b9\u53cc\u8bed\u3011\u6df1\u5ea6\u5b66\u4e60\u4e4b\u68af\u5ea6\u4e0b\u964d\u6cd5 Part 2 ver 0.9 beta_\u54d4\u54e9\u54d4\u54e9_bilibili \u5b66\u4e60\u7387 \uff1a\u4f18\u5316\u5668\u5373\u5bf9\u5b66\u4e60\u7387\u7684\u8c03\u6574\u65b9\u5f0f\u4e0d\u540c [[\u524d\u5411\u4e0e\u53cd\u5411\u4f20\u64ad#\u53cd\u5411\u4f20\u64ad|\u53cd\u5411\u4f20\u64adBackPropagation]]","title":"\u56de\u5f52\u95ee\u9898"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_1","text":"","title":"\u56de\u5f52\u95ee\u9898"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_2","text":"\u8ba9\u673a\u5668\u5177\u5907\u627e\u4e00\u4e2a\u51fd\u6570\u7684\u80fd\u529b","title":"\u673a\u5668\u5b66\u4e60"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_3","text":"","title":"\u56de\u5f52\u95ee\u9898"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_4","text":"\u5e26\u6709\u672a\u77e5\u53c2\u6570\u7684\u51fd\u6570\uff1a$$eg:y=b+w*x_1$$ $y$\u662f\u8981\u9884\u6d4b\u7684\u4e1c\u897f $x_1$\u662f\u5df2\u77e5\u4fe1\u606f $b$\u4e0e$w$\u662f\u672a\u77e5\u7684\u53c2\u6570\uff0c\u673a\u5668\u5b66\u4e60\u5373\u627e\u53c2\u6570 \u96be\u70b9\u5728\u4e8e\u6a21\u578b\u7684\u8bbe\u8ba1 \u4f7f\u7528\u5927\u91cf\u7684\u51fd\u6570\u53e0\u52a0\uff0c\u7ec4\u5408\u6210\u4efb\u610f\u51fd\u6570\uff1a$$y = b + \\sum i c_isigmoid(b_i+\\sum _j w {ij}x_{j})$$","title":"\u5b9a\u4e49\u6a21\u578b"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#sigmoid","text":"$$y=c\\frac {1}{1 + e^{-(b + wx_1)}}$$","title":"Sigmoid"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#relu","text":"$$y=c*max(0,b+wx_1)$$ Sigmoid\u548cReLU\u8fd9\u6837\u7684\u51fd\u6570\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u79f0\u4e3a \u6fc0\u6d3b\u51fd\u6570 (Activation Function)","title":"ReLU"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_5","text":"\u7528\u4e8e\u8bc4\u5224\u6a21\u578b\u4e2d\u53c2\u6570\u7684\u597d\u574f MSE(mean square error)\uff1a$${ L(f) =\\sum ^{i}_{n = 1}(\\hat{y}^n - f(x^n))^2 }$$ MAE(mean absolute error)\uff1a$${ L(f) =\\sum ^{i}_{n = 1}\\lvert \\hat{y}^n - f(x^n)\\rvert }$$","title":"\u5b9a\u4e49\u4ee3\u4ef7\u51fd\u6570"},{"location":"MachineLearning/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%28Regression%29/%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98/#_6","text":"\u68af\u5ea6\u4e0b\u964d(Gradient Descent) \u53c2\u8003\u89c6\u9891\uff1a \u3010\u5b98\u65b9\u53cc\u8bed\u3011\u6df1\u5ea6\u5b66\u4e60\u4e4b\u68af\u5ea6\u4e0b\u964d\u6cd5 Part 2 ver 0.9 beta_\u54d4\u54e9\u54d4\u54e9_bilibili \u5b66\u4e60\u7387 \uff1a\u4f18\u5316\u5668\u5373\u5bf9\u5b66\u4e60\u7387\u7684\u8c03\u6574\u65b9\u5f0f\u4e0d\u540c [[\u524d\u5411\u4e0e\u53cd\u5411\u4f20\u64ad#\u53cd\u5411\u4f20\u64ad|\u53cd\u5411\u4f20\u64adBackPropagation]]","title":"\u9009\u62e9\u4f18\u5316\u5668"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/","text":"\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b \u4e0d\u786e\u5b9a\u641c\u7d22\u95ee\u9898\uff1a\u4e16\u754c\u4e2d\u5b58\u5728\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4e0d\u786e\u5b9a\u6027\u7684\u95ee\u9898\u88ab\u79f0\u4e3a\u4e0d\u786e\u5b9a\u641c\u7d22\u95ee\u9898$\\rightarrow$\u4f7f\u7528 \u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b \u89e3\u51b3 \u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b \u5c5e\u6027\uff1a \u4e00\u4e2a \u72b6\u6001 \u96c6$S$ \u4e00\u4e2a \u64cd\u4f5c \u96c6$A$ \u4e00\u4e2a\u8d77\u59cb\u72b6\u6001 \u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6700\u7ec8\u72b6\u6001 \u4e00\u4e2a \u8f6c\u6362\u51fd\u6570(transition function) $T(state, action, state')$\uff1a \u8868\u793a\u4efb\u610f\u72b6\u6001\u6267\u884c\u4efb\u610f\u884c\u52a8\u540e\u5f97\u5230\u7684\u5404\u79cd\u8f93\u51fa\u7684\u53ef\u80fd\u6027 \u4e00\u4e2a \u5956\u52b1\u51fd\u6570(reward function) $R(state, action, state')$\uff1a\uff1a \u8868\u793a\u4efb\u610f\u72b6\u6001\u6267\u884c\u4efb\u610f\u884c\u52a8\u540e\u5f97\u5230\u7684\u5404\u79cd\u8f93\u51fa\u7684\u5956\u52b1 \u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6700\u7ec8\u72b6\u6001 \u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a \u6298\u6263\u56e0\u5b50(discount factor) $\\gamma$ eg: - \u4e09\u79cd\u72b6\u6001\uff1a$S={cool, warm, overheated}$ - \u4e24\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\uff1a$A={slow, fast}$ - \u4e00\u4e2a\u6700\u7ec8\u72b6\u6001\uff1aOverheated - \u8f6c\u79fb\u51fd\u6570\uff1a$T(state, action, state')$ - $T(cool, slow, cool) = 1$ - $T(warm, slow, cool) = 0.5$ - $T(warm, slow, warm) = 0.5$ - $T(cool, fast, cool) = 0.5$ - $T(cool, slow, warm) = 0.5$ - $T(warm, fast, overheated) = 1$ - \u5956\u52b1\u51fd\u6570\uff1a$R(state, action, state')$ - $R(cool, slow, cool) = 1$ - $R(warm, slow, cool) = 1$ - $R(warm, slow, warm) = 1$ - $R(cool, fast, cool) = 2$ - $R(cool, slow, warm) = 2$ - $R(warm, fast, overheated) = -10$ - \u4e00\u4e2aagent\u7684\u884c\u52a8\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a$s_0 \\overset{a_0} \\rightarrow s_{1} \\overset{a_1} \\rightarrow s_{2}\\overset{a_2} \\rightarrow s_{3}\u2026\u2026$ - \u5176\u6548\u76ca\u4e3a\uff1a$U([s_0, a_0,s_1, ,a_1,s_2,a_2,s_3\u2026]) = R\\left(s_{0}, a_{0}, s_{1}\\right)+R\\left(s_{1}, a_{1}, s_{2}\\right) \\+R\\left(s_{2}, a_{2}, s_{3}\\right)+\\ldots$ \u65e0\u9650\u6548\u76ca \u6298\u6263\u56e0\u5b50(Discount Factors) \u6298\u6263\u56e0\u5b50$\\gamma(0<\\gamma<1)$\u8868\u793a\u5956\u52b1\u503c\u968f\u65f6\u95f4\u53d8\u5316\u7684 \u6307\u6570 \u8870\u51cf \u73b0\u6298\u6263\u540e\u6548\u76ca\uff1a$U\\left(\\left[s_{0}, a_{0}, s_{1}, a_{1}, s_{2}, \\ldots\\right]\\right)=R\\left(s_{0}, a_{0}, s_{1}\\right)+\\gamma R\\left(s_{1}, a_{1}, s_{2}\\right)+\\gamma^{2} R\\left(s_{2}, a_{2}, s_{3}\\right)+\\ldots$ eg\uff1a$\\gamma = 0.1$ \u6709\u9650\u754c\uff08Finite Horizon\uff09 \u7c7b\u4f3c\u4e8e\u6df1\u5ea6\u9650\u5236\u641c\u7d22(Depth-Limited Search) \u5728\u56fa\u5b9a\u6b65\u6570\u540e\u7ed3\u675f\u201c\u751f\u547d\u201d \u5fc5\u7136\u6700\u7ec8\u6001(Absorbing State) \u65e0\u8bba\u9009\u62e9\u4f55\u79cd\u7b56\u7565\uff0c\u6700\u540e\u5fc5\u7136\u8fbe\u5230\u4e00\u4e2a\u6700\u7ec8\u72b6\u6001(Terminal State) \u6700\u4f18\u91cf(Optimal Quantities) 1. state s\uff1a$V^ (s)=$ \u4ece\u72b6\u6001s\u5f00\u59cb\uff0c\u5269\u4f59\u5bff\u547d\u4e2d\u9009\u62e9\u6267\u884c \u6700\u4f18\u884c\u4e3a \u6240\u83b7\u5f97\u7684 \u671f\u671b\u6548\u76ca 2. q-state(s,a)\uff1a$Q^ \uff08s,a)=$ \u72b6\u6001s\u4e0b\u9009\u62e9\u6267\u884c \u884c\u4e3aa \uff0c\u5e76\u4e14\u83b7\u5f97 \u6700\u4f18\u7ed3\u679c \u7684 \u671f\u671b\u6548\u76ca \uff0c\u5e76\u4e14\u4ece\u6b64\u540e\u91c7\u53d6\u7684\u90fd\u662f\u6700\u4f18\u884c\u52a8 3. optimal policy\uff1a$\\pi^ (s)=$ \u72b6\u6001s\u4e0b\u7684 \u6700\u4f18\u884c\u4e3a 4. \u4ef7\u503c(Value)\u7684\u9012\u5f52\u5b9a\u4e49\uff1a $$ \\begin{array}{l} V^{ }(s)=\\max {a} Q^{ }(s, a) \\ Q^{ }(s, a)=\\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{ }\\left(s^{\\prime}\\right)\\right] \\ V^{ }(s)=\\max {a} \\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{*}\\left(s^{\\prime}\\right)\\right] \\end{array} $$ - egs: \u9a6c\u5c14\u53ef\u592b\u6027\uff08Markovianess\uff09 \u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u8fc7\u53bb\u4e0e\u672a\u6765\u662f\u6761\u4ef6\u72ec\u7acb\u7684$\\rightarrow S_{t+1}$ \u4e0e $S_{t}$\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\uff0c\u4e0e\u5148\u524d\u65e0\u5173\uff0c\u5373\u53ea\u4e0e\u6700\u8fd1\u7684\u72b6\u6001\u6709\u5173 $P\\left(S_{t+1}=s_{t+1} \\mid S_{t}=s_{t}, A_{t}=a_{t}, S_{t-1}=s_{t-1}, A_{t-1}=a_{t-1}, \\ldots, S_{0}=s_{0}\\right)=P\\left(S_{t+1}=s_{t+1} \\mid S_{t}=s_{t}, A_{t}=a_{t}\\right)$ \u8d1d\u5c14\u66fc\u65b9\u7a0b(Bellman Equations) \u5b9a\u4e49$$V^{ }(s)=\\max {a} \\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{ }\\left(s^{\\prime}\\right)\\right]$$ Bellman Equation\u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u79cd\u65b9\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5176\u5185\u5728\u7684\u9012\u5f52\u7ed3\u6784\u5c06\u95ee\u9898\u62c6\u5206\u6210\u4e00\u4e2a\u4e2a\u5c0f\u95ee\u9898 \u503c\u8fed\u4ee3(Value Iteration) \u5982\u4f55\u8ba1\u7b97\u51fa\u6700\u4f18\u503c->\u9650\u65f6\u503c(time-limited value) \u9650\u65f6\u503c(Time-limited Value) \u9650\u65f6\u503c\uff1a\u5f3a\u5316\u6709\u9650\u754c\u5f97\u5230\u7684\u7ed3\u679c \u9650\u5236\u65f6\u95f4\u6b65\u6570\u4e3a$k$\u7684\u4e00\u4e2a\u72b6\u6001$s$\u7684\u9650\u65f6\u503c\u4e3a$V_k(s)$\uff0c\u4ee3\u8868\u5728\u5df2\u77e5\u5f53\u524dMDP\u4f1a\u5728$k$\u65f6\u95f4\u6b65\u540e\u7ec8\u6b62\u7684\u60c5\u51b5\u4e0b\uff0c\u4eces\u51fa\u53d1\u80fd\u5f97\u5230\u7684\u6700\u5927\u671f\u671b\u6548\u76ca \u6267\u884c\u6d41\u7a0b\uff1a \u521d\u59cb\u5316\uff1a$\\forall s \\in S, V_0(s) = 0$ \u91cd\u590d\u5982\u4e0b\u66f4\u65b0\u64cd\u4f5c\uff1a$\\forall s \\in S, V_{k + 1}(s)=\\max_{a}\\sum_{s\\prime}T(s,a,s\\prime)[R(s,a,s\\prime)+\\gamma V_k(S\\prime)]$ \u901a\u8fc7\u8ba1\u7b97\u5b50\u95ee\u9898\u7684\u89e3(\u6240\u6709$V_k(s)$)\u6765\u8fed\u4ee3\u5f97\u5230\u66f4\u9ad8\u4e00\u7ea7\u7684\u89e3(\u6240\u6709$V_{k+1}(s)$)-> \u52a8\u6001\u89c4\u5212 \u7b97\u6cd5 \u4e0eBellman\u65b9\u7a0b\u7684\u533a\u522b Bellman\uff1a\u7ed9\u51fa\u6700\u4f18\u5316\u7684\u6761\u4ef6 \u66f4\u65b0\u89c4\u5219\u7ed9\u51fa\u7684\u662f\u8fed\u4ee3\u66f4\u65b0\u503c\u76f4\u81f3\u6536\u655b\u7684\u65b9\u6cd5 \u8fbe\u5230\u6536\u655b\u65f6\uff0c\u6bcf\u4e2a\u72b6\u6001\u7684Bellman\u65b9\u7a0b\u90fd\u4e0d\u4f1a\u6539\u53d8<-$\\forall s \\in S, V(s)=V_{k+1}(s)=V^*(s)$ eg $\\gamma = 0.5$ 1. \u521d\u59cb\u5316\uff1a | | cool | warm | overheated | | :-----: | :----: | :----: | :----------: | | $V_0$ | 0 | 0 | 0 | 2. \u8ba1\u7b97\uff1a | | cool | warm | overheated | |:-----:|:----:|:----:|:----------:| | $V_0$ | 0 | 0 | 0 | | $V_1$ | 2 | 1 | 0 | | $V_2$ | 2.75 | 1.75 | 0 | \u7b56\u7565\u63d0\u53d6 \u89e3\u51b3\uff1a\u5982\u4f55\u786e\u5b9a\u6700\u4f18\u7b56\u7565\uff1f \u8868\u8fbe\u5f0f\uff1a$$\\forall s \\in S, \\pi^ (s) = arg\\max_aQ^ (s,a)\\ =arg\\max_a\\sum_{s\\prime}T(s,a,s^\\prime)[R(s,a,s\\prime)+\\gamma V^*(s^\\prime)$$ \u5176\u4e2d$a$\u5373\u4e3a\u5c06\u6211\u4eec\u5e26\u5230\u5177\u6709\u6700\u5927Q-value\u7684$q$\u72b6\u6001\u64cd\u4f5c \u7b56\u7565\u8fed\u4ee3 \u503c\u8fed\u4ee3\u5b58\u5728\u7684\u95ee\u9898\uff1a \u65f6\u95f4\u6210\u672c\u9ad8 \uff1a\u5bf9\u6bcf\u4e2aq\u503c\u5f97\u8ba1\u7b97\uff0c\u9700\u8981\u8f6e\u6d41\u5bf9|S|\u4e2a\u72b6\u6001\u518d\u6b21\u8fdb\u884c\u8fed\u4ee3 \u8fdb\u884c\u4e86\u5927\u91cf \u591a\u4f59\u7684\u8ba1\u7b97 <- \u7b56\u7565\u63d0\u53d6\u5f97\u5230\u7684\u7b56\u7565\u901a\u5e38\u4f1a\u6bd4\u503c\u672c\u8eab\u66f4\u5feb\u7684\u6536\u655b \u7b56\u7565\u8fed\u4ee3\u5f97\u64cd\u4f5c\uff1a \u5b9a\u4e49\u4e00\u4e2a\u521d\u59cb\u7b56\u7565 \u53ef\u4ee5\u968f\u610f\u786e\u5b9a\uff0c\u4f46\u662f\u521d\u59cb\u7b56\u7565\u8d8a\u63a5\u8fd1\u6700\u4f18\u7b56\u7565\uff0c\u7b56\u5217\u8fed\u4ee3\u6536\u655b\u5f97\u8d8a\u5feb \u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8bc4\u4f30\uff1a\u4f7f\u7528\u7b56\u7565\u8bc4\u4f30\u5bf9\u5f53\u524d\u5f97\u7b56\u7565\u8fdb\u884c\u8bc4\u4f30\uff1a$V^\\pi(s)$\u8868\u793a\u671f\u671b\u6548\u76ca $$V^\\pi(s)=\\sum_{s^\\prime}T(s,\\pi(s),s^\\prime)[R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)]$$ \u8bc4\u4f30\uff1a\u5229\u7528\u4ee5\u4e0b\u66f4\u65b0\u89c4\u5219\uff0c\u76f4\u81f3\u6536\u655b\uff1a$$V_{k+1}^{\\pi_{i}}(s) \\leftarrow\\sum_{s^{\\prime}} T\\left(s, \\pi(s), s^{\\prime}\\right)\\left[R\\left(s, \\pi_{i}(s), s^{\\prime}\\right)+\\gamma V_{k}^{\\pi_{i}}\\left(s^{\\prime}\\right)\\right]$$ \u63d0\u5347\uff1a\u4f7f\u7528\u7b56\u7565\u63d0\u53d6\u83b7\u5f97\u4e00\u4e2a\u66f4\u597d\u5f97\u7b56\u7565\uff1a$$\\pi_{i+1}(s)=arg\\max_a\\sum_{s\\prime}T(s,a,s^\\prime)[R(s,a,s\\prime)+\\gamma V^{\\pi_i}(s^\\prime)]$$ eg\uff1a $\\gamma = 0.5$ - \u4efb\u610f\u786e\u5b9a\u521d\u59cb\u72b6\u6001\uff1a | | cool | warm | overheated | | :-------: | :----: | :----: | :----------: | | $\\pi_0$ | slow | slow | - | - \u7b2c\u4e00\u8f6e\u503c\u8fed\u4ee3\uff1a | | cool | warm | overheated | | :-----------: | :----: | :----: | :----------: | | $V^{\\pi_0}$ | 2 | 2 | 0 | - \u7b56\u7565\u63d0\u53d6\uff1a - \u7b2c\u4e8c\u8f6e\u7b56\u7565\u8fed\u4ee3\u53ef\u5f97$\\pi_2(cool)=fast,\\pi_2(warm)=slow$ - \u4e0e$\\pi_1$\u7b56\u7565\u76f8\u540c\uff0c\u5219$\\pi_1=\\pi_2=\\pi^*$ | | cool | warm | |:-------:|:----:|:----:| | $\\pi_0$ | slow | slow | | $\\pi_1$ | fast | slow | | $\\pi_2$ | fast | slow |","title":"\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_1","text":"\u4e0d\u786e\u5b9a\u641c\u7d22\u95ee\u9898\uff1a\u4e16\u754c\u4e2d\u5b58\u5728\u4e00\u5b9a\u7a0b\u5ea6\u7684\u4e0d\u786e\u5b9a\u6027\u7684\u95ee\u9898\u88ab\u79f0\u4e3a\u4e0d\u786e\u5b9a\u641c\u7d22\u95ee\u9898$\\rightarrow$\u4f7f\u7528 \u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b \u89e3\u51b3","title":"\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_2","text":"","title":"\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_3","text":"\u4e00\u4e2a \u72b6\u6001 \u96c6$S$ \u4e00\u4e2a \u64cd\u4f5c \u96c6$A$ \u4e00\u4e2a\u8d77\u59cb\u72b6\u6001 \u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6700\u7ec8\u72b6\u6001 \u4e00\u4e2a \u8f6c\u6362\u51fd\u6570(transition function) $T(state, action, state')$\uff1a \u8868\u793a\u4efb\u610f\u72b6\u6001\u6267\u884c\u4efb\u610f\u884c\u52a8\u540e\u5f97\u5230\u7684\u5404\u79cd\u8f93\u51fa\u7684\u53ef\u80fd\u6027 \u4e00\u4e2a \u5956\u52b1\u51fd\u6570(reward function) $R(state, action, state')$\uff1a\uff1a \u8868\u793a\u4efb\u610f\u72b6\u6001\u6267\u884c\u4efb\u610f\u884c\u52a8\u540e\u5f97\u5230\u7684\u5404\u79cd\u8f93\u51fa\u7684\u5956\u52b1 \u53ef\u80fd\u5b58\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6700\u7ec8\u72b6\u6001 \u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a \u6298\u6263\u56e0\u5b50(discount factor) $\\gamma$","title":"\u5c5e\u6027\uff1a"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#eg","text":"- \u4e09\u79cd\u72b6\u6001\uff1a$S={cool, warm, overheated}$ - \u4e24\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\uff1a$A={slow, fast}$ - \u4e00\u4e2a\u6700\u7ec8\u72b6\u6001\uff1aOverheated - \u8f6c\u79fb\u51fd\u6570\uff1a$T(state, action, state')$ - $T(cool, slow, cool) = 1$ - $T(warm, slow, cool) = 0.5$ - $T(warm, slow, warm) = 0.5$ - $T(cool, fast, cool) = 0.5$ - $T(cool, slow, warm) = 0.5$ - $T(warm, fast, overheated) = 1$ - \u5956\u52b1\u51fd\u6570\uff1a$R(state, action, state')$ - $R(cool, slow, cool) = 1$ - $R(warm, slow, cool) = 1$ - $R(warm, slow, warm) = 1$ - $R(cool, fast, cool) = 2$ - $R(cool, slow, warm) = 2$ - $R(warm, fast, overheated) = -10$ - \u4e00\u4e2aagent\u7684\u884c\u52a8\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a$s_0 \\overset{a_0} \\rightarrow s_{1} \\overset{a_1} \\rightarrow s_{2}\\overset{a_2} \\rightarrow s_{3}\u2026\u2026$ - \u5176\u6548\u76ca\u4e3a\uff1a$U([s_0, a_0,s_1, ,a_1,s_2,a_2,s_3\u2026]) = R\\left(s_{0}, a_{0}, s_{1}\\right)+R\\left(s_{1}, a_{1}, s_{2}\\right) \\+R\\left(s_{2}, a_{2}, s_{3}\\right)+\\ldots$","title":"eg:"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_4","text":"","title":"\u65e0\u9650\u6548\u76ca"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#discount-factors","text":"\u6298\u6263\u56e0\u5b50$\\gamma(0<\\gamma<1)$\u8868\u793a\u5956\u52b1\u503c\u968f\u65f6\u95f4\u53d8\u5316\u7684 \u6307\u6570 \u8870\u51cf \u73b0\u6298\u6263\u540e\u6548\u76ca\uff1a$U\\left(\\left[s_{0}, a_{0}, s_{1}, a_{1}, s_{2}, \\ldots\\right]\\right)=R\\left(s_{0}, a_{0}, s_{1}\\right)+\\gamma R\\left(s_{1}, a_{1}, s_{2}\\right)+\\gamma^{2} R\\left(s_{2}, a_{2}, s_{3}\\right)+\\ldots$ eg\uff1a$\\gamma = 0.1$","title":"\u6298\u6263\u56e0\u5b50(Discount Factors)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#finite-horizon","text":"\u7c7b\u4f3c\u4e8e\u6df1\u5ea6\u9650\u5236\u641c\u7d22(Depth-Limited Search) \u5728\u56fa\u5b9a\u6b65\u6570\u540e\u7ed3\u675f\u201c\u751f\u547d\u201d","title":"\u6709\u9650\u754c\uff08Finite Horizon\uff09"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#absorbing-state","text":"\u65e0\u8bba\u9009\u62e9\u4f55\u79cd\u7b56\u7565\uff0c\u6700\u540e\u5fc5\u7136\u8fbe\u5230\u4e00\u4e2a\u6700\u7ec8\u72b6\u6001(Terminal State)","title":"\u5fc5\u7136\u6700\u7ec8\u6001(Absorbing State)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#optimal-quantities","text":"1. state s\uff1a$V^ (s)=$ \u4ece\u72b6\u6001s\u5f00\u59cb\uff0c\u5269\u4f59\u5bff\u547d\u4e2d\u9009\u62e9\u6267\u884c \u6700\u4f18\u884c\u4e3a \u6240\u83b7\u5f97\u7684 \u671f\u671b\u6548\u76ca 2. q-state(s,a)\uff1a$Q^ \uff08s,a)=$ \u72b6\u6001s\u4e0b\u9009\u62e9\u6267\u884c \u884c\u4e3aa \uff0c\u5e76\u4e14\u83b7\u5f97 \u6700\u4f18\u7ed3\u679c \u7684 \u671f\u671b\u6548\u76ca \uff0c\u5e76\u4e14\u4ece\u6b64\u540e\u91c7\u53d6\u7684\u90fd\u662f\u6700\u4f18\u884c\u52a8 3. optimal policy\uff1a$\\pi^ (s)=$ \u72b6\u6001s\u4e0b\u7684 \u6700\u4f18\u884c\u4e3a 4. \u4ef7\u503c(Value)\u7684\u9012\u5f52\u5b9a\u4e49\uff1a $$ \\begin{array}{l} V^{ }(s)=\\max {a} Q^{ }(s, a) \\ Q^{ }(s, a)=\\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{ }\\left(s^{\\prime}\\right)\\right] \\ V^{ }(s)=\\max {a} \\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{*}\\left(s^{\\prime}\\right)\\right] \\end{array} $$ - egs:","title":"\u6700\u4f18\u91cf(Optimal Quantities)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#markovianess","text":"\u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u8fc7\u53bb\u4e0e\u672a\u6765\u662f\u6761\u4ef6\u72ec\u7acb\u7684$\\rightarrow S_{t+1}$ \u4e0e $S_{t}$\u4e4b\u95f4\u5b58\u5728\u5173\u7cfb\uff0c\u4e0e\u5148\u524d\u65e0\u5173\uff0c\u5373\u53ea\u4e0e\u6700\u8fd1\u7684\u72b6\u6001\u6709\u5173 $P\\left(S_{t+1}=s_{t+1} \\mid S_{t}=s_{t}, A_{t}=a_{t}, S_{t-1}=s_{t-1}, A_{t-1}=a_{t-1}, \\ldots, S_{0}=s_{0}\\right)=P\\left(S_{t+1}=s_{t+1} \\mid S_{t}=s_{t}, A_{t}=a_{t}\\right)$","title":"\u9a6c\u5c14\u53ef\u592b\u6027\uff08Markovianess\uff09"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#bellman-equations","text":"\u5b9a\u4e49$$V^{ }(s)=\\max {a} \\sum {s^{\\prime}} T\\left(s, a, s^{\\prime}\\right)\\left[R\\left(s, a, s^{\\prime}\\right)+\\gamma V^{ }\\left(s^{\\prime}\\right)\\right]$$ Bellman Equation\u662f\u52a8\u6001\u89c4\u5212\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u79cd\u65b9\u7a0b\u53ef\u4ee5\u901a\u8fc7\u5176\u5185\u5728\u7684\u9012\u5f52\u7ed3\u6784\u5c06\u95ee\u9898\u62c6\u5206\u6210\u4e00\u4e2a\u4e2a\u5c0f\u95ee\u9898","title":"\u8d1d\u5c14\u66fc\u65b9\u7a0b(Bellman Equations)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#value-iteration","text":"\u5982\u4f55\u8ba1\u7b97\u51fa\u6700\u4f18\u503c->\u9650\u65f6\u503c(time-limited value)","title":"\u503c\u8fed\u4ee3(Value Iteration)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#time-limited-value","text":"\u9650\u65f6\u503c\uff1a\u5f3a\u5316\u6709\u9650\u754c\u5f97\u5230\u7684\u7ed3\u679c \u9650\u5236\u65f6\u95f4\u6b65\u6570\u4e3a$k$\u7684\u4e00\u4e2a\u72b6\u6001$s$\u7684\u9650\u65f6\u503c\u4e3a$V_k(s)$\uff0c\u4ee3\u8868\u5728\u5df2\u77e5\u5f53\u524dMDP\u4f1a\u5728$k$\u65f6\u95f4\u6b65\u540e\u7ec8\u6b62\u7684\u60c5\u51b5\u4e0b\uff0c\u4eces\u51fa\u53d1\u80fd\u5f97\u5230\u7684\u6700\u5927\u671f\u671b\u6548\u76ca \u6267\u884c\u6d41\u7a0b\uff1a \u521d\u59cb\u5316\uff1a$\\forall s \\in S, V_0(s) = 0$ \u91cd\u590d\u5982\u4e0b\u66f4\u65b0\u64cd\u4f5c\uff1a$\\forall s \\in S, V_{k + 1}(s)=\\max_{a}\\sum_{s\\prime}T(s,a,s\\prime)[R(s,a,s\\prime)+\\gamma V_k(S\\prime)]$ \u901a\u8fc7\u8ba1\u7b97\u5b50\u95ee\u9898\u7684\u89e3(\u6240\u6709$V_k(s)$)\u6765\u8fed\u4ee3\u5f97\u5230\u66f4\u9ad8\u4e00\u7ea7\u7684\u89e3(\u6240\u6709$V_{k+1}(s)$)-> \u52a8\u6001\u89c4\u5212 \u7b97\u6cd5 \u4e0eBellman\u65b9\u7a0b\u7684\u533a\u522b Bellman\uff1a\u7ed9\u51fa\u6700\u4f18\u5316\u7684\u6761\u4ef6 \u66f4\u65b0\u89c4\u5219\u7ed9\u51fa\u7684\u662f\u8fed\u4ee3\u66f4\u65b0\u503c\u76f4\u81f3\u6536\u655b\u7684\u65b9\u6cd5 \u8fbe\u5230\u6536\u655b\u65f6\uff0c\u6bcf\u4e2a\u72b6\u6001\u7684Bellman\u65b9\u7a0b\u90fd\u4e0d\u4f1a\u6539\u53d8<-$\\forall s \\in S, V(s)=V_{k+1}(s)=V^*(s)$","title":"\u9650\u65f6\u503c(Time-limited Value)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#eg_1","text":"$\\gamma = 0.5$ 1. \u521d\u59cb\u5316\uff1a | | cool | warm | overheated | | :-----: | :----: | :----: | :----------: | | $V_0$ | 0 | 0 | 0 | 2. \u8ba1\u7b97\uff1a | | cool | warm | overheated | |:-----:|:----:|:----:|:----------:| | $V_0$ | 0 | 0 | 0 | | $V_1$ | 2 | 1 | 0 | | $V_2$ | 2.75 | 1.75 | 0 |","title":"eg"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_5","text":"\u89e3\u51b3\uff1a\u5982\u4f55\u786e\u5b9a\u6700\u4f18\u7b56\u7565\uff1f \u8868\u8fbe\u5f0f\uff1a$$\\forall s \\in S, \\pi^ (s) = arg\\max_aQ^ (s,a)\\ =arg\\max_a\\sum_{s\\prime}T(s,a,s^\\prime)[R(s,a,s\\prime)+\\gamma V^*(s^\\prime)$$ \u5176\u4e2d$a$\u5373\u4e3a\u5c06\u6211\u4eec\u5e26\u5230\u5177\u6709\u6700\u5927Q-value\u7684$q$\u72b6\u6001\u64cd\u4f5c","title":"\u7b56\u7565\u63d0\u53d6"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#_6","text":"\u503c\u8fed\u4ee3\u5b58\u5728\u7684\u95ee\u9898\uff1a \u65f6\u95f4\u6210\u672c\u9ad8 \uff1a\u5bf9\u6bcf\u4e2aq\u503c\u5f97\u8ba1\u7b97\uff0c\u9700\u8981\u8f6e\u6d41\u5bf9|S|\u4e2a\u72b6\u6001\u518d\u6b21\u8fdb\u884c\u8fed\u4ee3 \u8fdb\u884c\u4e86\u5927\u91cf \u591a\u4f59\u7684\u8ba1\u7b97 <- \u7b56\u7565\u63d0\u53d6\u5f97\u5230\u7684\u7b56\u7565\u901a\u5e38\u4f1a\u6bd4\u503c\u672c\u8eab\u66f4\u5feb\u7684\u6536\u655b \u7b56\u7565\u8fed\u4ee3\u5f97\u64cd\u4f5c\uff1a \u5b9a\u4e49\u4e00\u4e2a\u521d\u59cb\u7b56\u7565 \u53ef\u4ee5\u968f\u610f\u786e\u5b9a\uff0c\u4f46\u662f\u521d\u59cb\u7b56\u7565\u8d8a\u63a5\u8fd1\u6700\u4f18\u7b56\u7565\uff0c\u7b56\u5217\u8fed\u4ee3\u6536\u655b\u5f97\u8d8a\u5feb \u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u8bc4\u4f30\uff1a\u4f7f\u7528\u7b56\u7565\u8bc4\u4f30\u5bf9\u5f53\u524d\u5f97\u7b56\u7565\u8fdb\u884c\u8bc4\u4f30\uff1a$V^\\pi(s)$\u8868\u793a\u671f\u671b\u6548\u76ca $$V^\\pi(s)=\\sum_{s^\\prime}T(s,\\pi(s),s^\\prime)[R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)]$$ \u8bc4\u4f30\uff1a\u5229\u7528\u4ee5\u4e0b\u66f4\u65b0\u89c4\u5219\uff0c\u76f4\u81f3\u6536\u655b\uff1a$$V_{k+1}^{\\pi_{i}}(s) \\leftarrow\\sum_{s^{\\prime}} T\\left(s, \\pi(s), s^{\\prime}\\right)\\left[R\\left(s, \\pi_{i}(s), s^{\\prime}\\right)+\\gamma V_{k}^{\\pi_{i}}\\left(s^{\\prime}\\right)\\right]$$ \u63d0\u5347\uff1a\u4f7f\u7528\u7b56\u7565\u63d0\u53d6\u83b7\u5f97\u4e00\u4e2a\u66f4\u597d\u5f97\u7b56\u7565\uff1a$$\\pi_{i+1}(s)=arg\\max_a\\sum_{s\\prime}T(s,a,s^\\prime)[R(s,a,s\\prime)+\\gamma V^{\\pi_i}(s^\\prime)]$$","title":"\u7b56\u7565\u8fed\u4ee3"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/MDP%EF%BC%88%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E5%86%B3%E7%AD%96%E8%BF%87%E7%A8%8B%EF%BC%89/#eg_2","text":"$\\gamma = 0.5$ - \u4efb\u610f\u786e\u5b9a\u521d\u59cb\u72b6\u6001\uff1a | | cool | warm | overheated | | :-------: | :----: | :----: | :----------: | | $\\pi_0$ | slow | slow | - | - \u7b2c\u4e00\u8f6e\u503c\u8fed\u4ee3\uff1a | | cool | warm | overheated | | :-----------: | :----: | :----: | :----------: | | $V^{\\pi_0}$ | 2 | 2 | 0 | - \u7b56\u7565\u63d0\u53d6\uff1a - \u7b2c\u4e8c\u8f6e\u7b56\u7565\u8fed\u4ee3\u53ef\u5f97$\\pi_2(cool)=fast,\\pi_2(warm)=slow$ - \u4e0e$\\pi_1$\u7b56\u7565\u76f8\u540c\uff0c\u5219$\\pi_1=\\pi_2=\\pi^*$ | | cool | warm | |:-------:|:----:|:----:| | $\\pi_0$ | slow | slow | | $\\pi_1$ | fast | slow | | $\\pi_2$ | fast | slow |","title":"eg\uff1a"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/","text":"\u51b3\u7b56\u7f51\u7edc(Decision Network) \u51b3\u7b56\u7f51\u7edc \u51b3\u7b56\u7f51\u7edc\uff1a\u8d1d\u53f6\u65af\u7f51\u7edc\u4e0e\u6700\u5927\u671f\u671b(Expectimax)\u7ed3\u5408 \u5305\u542b\uff1a \u6982\u7387\u8282\u70b9(Chances nodes)(\u4e0e\u8d1d\u53f6\u65af\u7f51\u7edc\u4e2d\u76f8\u540c) \u52a8\u4f5c\u8282\u70b9(Actions) \u4e3a\u77e9\u5f62 \u65e0\u7236\u8282\u70b9 \u62e5\u6709\u5b8c\u5168\u7684\u638c\u63a7\u6743 \u6548\u7528\u8282\u70b9(Utility node) \u83f1\u5f62 \u53d6\u51b3\u4e8eaction\u548cchance node MEU (Maximum Expected Utility)\uff1a\u5728\u7ed9\u5b9aevidence\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u5408\u9002\u7684action\u8ba9\u671f\u671b\u6548\u76ca(Expected Utility)\u6700\u5927\u5316$$MEU(e)=\\max_a\\sum_sP(s|e)U(s,a)$$ \u76ee\u7684\uff1a\u9009\u62e9\u80fd\u591f\u83b7\u5f97MEU\u7684\u884c\u52a8 \u8fc7\u7a0b \u5b9e\u4f8b\u5316\u6240\u6709\u8bc1\u636e\u53d8\u91cf \u904d\u5386\u52a8\u4f5c\u8282\u70b9\u7684\u6bcf\u4e00\u79cd\u53ef\u80fd\u65b9\u5f0f \u9488\u5bf9\u6240\u6709\u7684\u6548\u7528\u8282\u70b9\u8ba1\u7b97\u540e\u9a8c\u6982\u7387 \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u884c\u52a8\u4e0b\u7684\u671f\u671b\u6548\u76ca \u9009\u62e9\u6700\u5927\u671f\u671b\u6548\u76ca \u7ed3\u679c\u6811(Outcome Trees) - \u9876\u90e8\u7684\u8282\u70b9\u662f\u6700\u5927\u5316\u8282\u70b9\uff0c\u5e76\u4e14\u7531\u6211\u4eec\u63a7\u5236 \u5b8c\u7f8e\u4fe1\u606f\u4ef7\u503c(VPI-The Value of Perfect Information) VPI\uff1a\u4f7f\u7528\u6570\u503c\u6765\u8861\u91cf\u89c2\u6d4b\u4e00\u4e2a\u65b0\u7684evidence\u7684\u63d0\u5347\u4ef7\u503c \u4e00\u822c\u516c\u5f0f\uff08\u63a8\u5bfc\uff09 \u5bf9\u4e8e\u5df2\u6709\u7684evdience\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a$$MEU(e)=\\max_a\\sum_sP(s|e)U(s,a)$$ \u5982\u679c\u7ee7\u7eed\u5bf9\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u8fdb\u884c\u89c2\u5bdf\uff0c\u518d\u83b7\u5f97\u4e00\u4e2aevidence\uff0c\u53ef\u4ee5\u81ea\u7136\u800c\u7136\u7684\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a$$MEU(e,e^\\prime)=\\max_a\\sum_sP(s|e,e^\\prime)U(s,a)$$ \u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u786e\u5207\u77e5\u9053\u63a5\u4e0b\u6765\u83b7\u5f97\u7684evidence\uff0c\u56e0\u6b64\u4f7f\u7528$E^\\prime$\u6765\u4ee3\u8868$e^\\prime$\uff0c\u90a3\u4e48\u4f7f\u7528\u52a0\u6743\u5e73\u5747\u7684\u65b9\u5f0f\u6765\u8868\u793aMEU$$MEU(e,E^\\prime)=\\sum_{e^\\prime}P(e^\\prime|e)MEU(e,e^\\prime)$$ \u53ef\u4ee5\u63d0\u5347\u7684\u4ef7\u503c\u4e3a\uff1a$$VPI(E^\\prime|e)=MEU(e,e^\\prime)-MEU(e)$$ \u6848\u4f8b\uff1a \u6027\u8d28\uff1a \u975e\u8d1f\u6027\uff1a$\\forall E^\\prime, e:VPI(E^\\prime |e) \\geq 0$ \u4e0d\u53ef\u52a0\u6027\uff1a$VPI(E_j,E_k|e)\\ne VPI(E_j|e)+VPI(E_k|e)$ \u987a\u5e8f\u72ec\u7acb\u6027\uff1a$VPI(E_j,E_k|e)= VPI(E_j|e)+VPI(E_k|e,E_j)=VPI(E_k|e)+VPI(E_j|e,E_k)$","title":"\u51b3\u7b56\u7f51\u7edc(Decision Network)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/#decision-network","text":"","title":"\u51b3\u7b56\u7f51\u7edc(Decision Network)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/#_1","text":"\u51b3\u7b56\u7f51\u7edc\uff1a\u8d1d\u53f6\u65af\u7f51\u7edc\u4e0e\u6700\u5927\u671f\u671b(Expectimax)\u7ed3\u5408 \u5305\u542b\uff1a \u6982\u7387\u8282\u70b9(Chances nodes)(\u4e0e\u8d1d\u53f6\u65af\u7f51\u7edc\u4e2d\u76f8\u540c) \u52a8\u4f5c\u8282\u70b9(Actions) \u4e3a\u77e9\u5f62 \u65e0\u7236\u8282\u70b9 \u62e5\u6709\u5b8c\u5168\u7684\u638c\u63a7\u6743 \u6548\u7528\u8282\u70b9(Utility node) \u83f1\u5f62 \u53d6\u51b3\u4e8eaction\u548cchance node MEU (Maximum Expected Utility)\uff1a\u5728\u7ed9\u5b9aevidence\u7684\u60c5\u51b5\u4e0b\uff0c\u9009\u62e9\u5408\u9002\u7684action\u8ba9\u671f\u671b\u6548\u76ca(Expected Utility)\u6700\u5927\u5316$$MEU(e)=\\max_a\\sum_sP(s|e)U(s,a)$$ \u76ee\u7684\uff1a\u9009\u62e9\u80fd\u591f\u83b7\u5f97MEU\u7684\u884c\u52a8","title":"\u51b3\u7b56\u7f51\u7edc"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/#_2","text":"\u5b9e\u4f8b\u5316\u6240\u6709\u8bc1\u636e\u53d8\u91cf \u904d\u5386\u52a8\u4f5c\u8282\u70b9\u7684\u6bcf\u4e00\u79cd\u53ef\u80fd\u65b9\u5f0f \u9488\u5bf9\u6240\u6709\u7684\u6548\u7528\u8282\u70b9\u8ba1\u7b97\u540e\u9a8c\u6982\u7387 \u8ba1\u7b97\u6bcf\u4e00\u4e2a\u884c\u52a8\u4e0b\u7684\u671f\u671b\u6548\u76ca \u9009\u62e9\u6700\u5927\u671f\u671b\u6548\u76ca","title":"\u8fc7\u7a0b"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/#outcome-trees","text":"- \u9876\u90e8\u7684\u8282\u70b9\u662f\u6700\u5927\u5316\u8282\u70b9\uff0c\u5e76\u4e14\u7531\u6211\u4eec\u63a7\u5236","title":"\u7ed3\u679c\u6811(Outcome Trees)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%86%B3%E7%AD%96%E7%BD%91%E7%BB%9C%28Decision%20Network%29/#vpi-the-value-of-perfect-information","text":"VPI\uff1a\u4f7f\u7528\u6570\u503c\u6765\u8861\u91cf\u89c2\u6d4b\u4e00\u4e2a\u65b0\u7684evidence\u7684\u63d0\u5347\u4ef7\u503c \u4e00\u822c\u516c\u5f0f\uff08\u63a8\u5bfc\uff09 \u5bf9\u4e8e\u5df2\u6709\u7684evdience\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a$$MEU(e)=\\max_a\\sum_sP(s|e)U(s,a)$$ \u5982\u679c\u7ee7\u7eed\u5bf9\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u8fdb\u884c\u89c2\u5bdf\uff0c\u518d\u83b7\u5f97\u4e00\u4e2aevidence\uff0c\u53ef\u4ee5\u81ea\u7136\u800c\u7136\u7684\u5f97\u5230\u5982\u4e0b\u516c\u5f0f\uff1a$$MEU(e,e^\\prime)=\\max_a\\sum_sP(s|e,e^\\prime)U(s,a)$$ \u4f46\u662f\u6211\u4eec\u65e0\u6cd5\u786e\u5207\u77e5\u9053\u63a5\u4e0b\u6765\u83b7\u5f97\u7684evidence\uff0c\u56e0\u6b64\u4f7f\u7528$E^\\prime$\u6765\u4ee3\u8868$e^\\prime$\uff0c\u90a3\u4e48\u4f7f\u7528\u52a0\u6743\u5e73\u5747\u7684\u65b9\u5f0f\u6765\u8868\u793aMEU$$MEU(e,E^\\prime)=\\sum_{e^\\prime}P(e^\\prime|e)MEU(e,e^\\prime)$$ \u53ef\u4ee5\u63d0\u5347\u7684\u4ef7\u503c\u4e3a\uff1a$$VPI(E^\\prime|e)=MEU(e,e^\\prime)-MEU(e)$$ \u6848\u4f8b\uff1a \u6027\u8d28\uff1a \u975e\u8d1f\u6027\uff1a$\\forall E^\\prime, e:VPI(E^\\prime |e) \\geq 0$ \u4e0d\u53ef\u52a0\u6027\uff1a$VPI(E_j,E_k|e)\\ne VPI(E_j|e)+VPI(E_k|e)$ \u987a\u5e8f\u72ec\u7acb\u6027\uff1a$VPI(E_j,E_k|e)= VPI(E_j|e)+VPI(E_k|e,E_j)=VPI(E_k|e)+VPI(E_j|e,E_k)$","title":"\u5b8c\u7f8e\u4fe1\u606f\u4ef7\u503c(VPI-The Value of Perfect Information)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/","text":"\u5f3a\u5316\u5b66\u4e60(Reinforce Learning) Offline planning/Online planning Offline planning \u9a6c\u5c14\u53ef\u592b\u95ee\u9898\u5f97\u89e3\u51b3\u5c31\u662f\u4e00\u4e2aoffline planning\u7684\u4f8b\u5b50 informed\uff1a\u5728\u89e3\u51b3\u9a6c\u5c14\u53ef\u592b\u95ee\u9898\u65f6\uff0c \u77e5\u9053 \u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u548c\u5956\u52b1\u51fd\u6570 Online planning \u5728\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0c\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662fOnline planning agent\u4e0d\u77e5\u9053\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u548c\u5956\u52b1\u51fd\u6570 \u5fc5\u987b\u901a\u8fc7\u63a2\u7d22\u3001\u6267\u884c\u7684\u8fc7\u7a0b\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f \u5728Online planning\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u6b65\uff0cagent\u5728\u72b6\u6001$s$\u4e0b\u91c7\u53d6$a$\u884c\u52a8\u8f6c\u79fb\u5230\u4e86\u540e\u7ee7\u72b6\u6001$s^\\prime$\uff0c\u5e76\u4e14\u83b7\u5f97\u4e86\u5956\u52b1$r$\uff0c\u5c06\u6bcf\u4e00\u4e2a$(s,a,s^\\prime,r)$\u7ec4\u5408\u79f0\u4e3a\u4e00\u4e2a \u6837\u672c(sample) \u4e00\u4e2a\u4ece \u5f00\u59cb\u72b6\u6001\u4e0d\u65ad\u8f6c\u79fb\u5230\u7ec8\u6b62\u72b6\u6001 \u7684\u8fc7\u7a0b\u79f0\u4e3a\u4e00\u4e2a episode \u5f3a\u5316\u5b66\u4e60\u7684\u4e24\u4e2a\u5206\u7c7b\uff1a model-based learning model-free learning Model-Based Learning \u5728\u57fa\u4e8e\u6a21\u578b\u7684\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0cagent\u901a\u8fc7\u591a\u6b21\u5c1d\u8bd5\uff0c\u751f\u6210\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u7684\u4f30\u8ba1->$\\hat T(s,a,s^\\prime)$\uff0c\u7136\u540e\u518d\u5229\u7528[[MDP\uff08\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff09]]\u627e\u5230\u6700\u4f18\u89e3 eg\uff1a$\\gamma=1, noise = 0.2$ \u5730\u56fe \u63a2\u7d22\uff1a \u7ed3\u679c\uff1a Model-Free Learning \u4e09\u79cd\u6a21\u578b\uff1a \u88ab\u52a8\u5f3a\u5316\u5b66\u4e60(Passive Reinforcement Learning)\uff1a \u5728\u88ab\u52a8\u5f3a\u5316\u5b66\u4e60\u7684\u4e00\u4e2aepisode\u4e2d\uff0cagent\u6267\u884c\u6240\u7ed9\u7684\u7b56\u7565\uff0c\u5e76\u4e14\u83b7\u5f97\u6267\u884c\u7b56\u7565\u540e\u7684\u72b6\u6001\u7684\u4ef7\u503c<-\u8fd9\u6b63\u662f\u5728T\u548cR\u5df2\u77e5\u60c5\u51b5\u4e0b\uff0cMDPs\u6240\u505a\u7684\u4e8b\u60c5 \u76f4\u63a5\u4f30\u8ba1(Direct Evaluation) \u65f6\u95f4\u5dee\u5206\u5b66\u4e60(Tempora Difference Learning) \u4e3b\u52a8\u5f3a\u5316\u5b66\u4e60(Active Reinforcement Learning)\uff1a agent\u53ef\u4ee5\u5728\u5b66\u4e60\u65f6\uff0c\u4f7f\u7528\u63a5\u6536\u5230\u7684\u53cd\u9988\u6765\u66f4\u65b0\u7b56\u7565\uff0c\u76f4\u5230\u5728\u8db3\u591f\u591a\u7684\u63a2\u7d22\u540e\uff0c\u6700\u7ec8\u51b3\u5b9a\u6700\u4f18\u7b56\u7565 Q-learning \u76f4\u63a5\u8bc4\u4f30(Direct Evaluation) \u6839\u636e$\\pi$\u6267\u884c \u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u72b6\u6001\uff0c\u8bb0\u4e0b\u6536\u76ca\u548c\u5230\u8fbe\u7684\u6b21\u6570 \u6c42\u5e73\u5747\u503c \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u6613\u4e8e\u7406\u89e3 \u65e0\u9700T\uff0cR \u4ec5\u4f7f\u7528\u6837\u672c\u4e2d\u7684\u6570\u636e\uff0c\u5c31\u80fd\u8ba1\u7b97\u51fa\u6b63\u786e\u7684\u5e73\u5747\u4ef7\u503c \u7f3a\u70b9\uff1a \u6d6a\u8d39\u4e86\u72b6\u6001\u4e4b\u95f4\u7684\u5173\u7cfb <-\u4f7f\u7528[[MDP\uff08\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff09#\u8d1d\u5c14\u66fc\u65b9\u7a0b Bellman Equations|Bellman\u65b9\u7a0b]]\uff0c\u5c31\u53ef\u4ee5\u5c06\u5404\u4e2astate\u8054\u7cfb\u8d77\u6765->\u5982\u4f55\u5728\u4e0d\u77e5\u9053T\u3001R\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528Bellman\u66f4\u65b0\uff1f\uff1f->[[\u5f3a\u5316\u5b66\u4e60(Reinforce Learning)#\u65f6\u95f4\u5dee\u5206\u5b66\u4e60 Temporal Difference Learning|TD Learning]] \u6bcf\u4e00\u4e2a\u72b6\u6001\u5fc5\u987b\u72ec\u7acb\u5b66\u4e60 \u82b1\u8d39 \u65f6\u95f4\u957f \u65f6\u95f4\u5dee\u5206\u5b66\u4e60(Temporal Difference Learning) \u601d\u8def\uff1a \u5bf9\u4e8e\u6bcf\u6b21$(s,a,s^\\prime,r)$\u90fd\u66f4\u65b0\u4e00\u6b21$V(s)$ \u53ef\u80fd\u7684\u7ed3\u679c$s^\\prime$\u5c06\u4f1a\u66f4\u52a0\u9891\u7e41\u7684\u63d0\u4f9b\u66f4\u65b0 \u5982\u4f55\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u6c42\u51fa\u6bcf\u4e2a\u72b6\u6001\u7684\u5e73\u5747\u4ef7\u503c\uff1f\uff1f->Exponential Moving Average Exponential Moving Average \u8ba9\u6700\u8fd1\u7684sample\u66f4\u52a0\u91cd\u8981 \uff1a $$\\bar x_n =\\frac{x_n+(1-\\alpha)x_{n-1}+(1-\\alpha)^{2}x_{n-2}+\u2026\u2026}{1+(1-\\alpha)+(1-\\alpha)^2+\u2026\u2026}$$ \u6bcf\u4e00\u6b21\u72b6\u6001\u8f6c\u79fb sample of V(s)\uff1a$sample=R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)$ \u5bf9\u4e8e$V^\\pi(s)$\u7684\u65b0\u7684\u65b9\u5f0f\uff1aUpdate to V(s)\uff1a$V^\\pi(s)\\leftarrow(1-\\alpha)V^\\pi(s)+(\\alpha)sample$ \u5b66\u4e60\u7387\uff1a$\\alpha$ $1-\\alpha$\uff1a\u6307\u5b9a\u5df2\u5b58\u5728\u7684\u6a21\u578b\u5bf9$V^\\pi(s)$\u7684\u5f71\u54cd \u8fc7\u53bb\u7684\u5f71\u54cd\u5219\u9010\u6e10\u6536\u655b\u81f30 $\\alpha$\uff1a\u6307\u5b9a\u65b0\u7684sample\u5bf9$V^\\pi(s)$\u7684\u5f71\u54cd Same update\uff1a$V^\\pi(s)\\leftarrow V^\\pi(s)+\\alpha(sample-V^\\pi(s))$ \u539f\u8bc4\u4f30\u65b9\u5f0f\uff08\u52a0\u6743\u5e73\u5747\uff09\uff1a$V^\\pi(s)=\\sum_{s^\\prime}T(s,\\pi(s),s^\\prime)[R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)]$ \u793a\u4f8b\uff1a Q-Learning \u88ab\u52a8\u5f3a\u5316\u5b66\u4e60\u4e2d\u7684\u95ee\u9898\uff1a\u8981\u627e\u5230\u6700\u4f18\u7684\u7b56\u7565\uff0c\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u72b6\u6001\u7684q-values Q-Learning\uff1a\u76f4\u63a5\u5b66\u4e60\u72b6\u6001\u7684q-values\uff08\u65e0\u9700\u5176\u4ed6\u4efb\u4f55values, T, R)\uff0c\u4e3a\u6bcf\u4e00\u4e2aq-state\u627e\u5230\u6700\u4f73\u7684q-value q-value iteration\uff1a$$Q_{k+1}(s,a)\\leftarrow\\sum_{s^\\prime}T(s,a,s^\\prime)[R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q_k(s^\\prime,a^\\prime)]$$ q-value samples \uff1a$$sample=R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q(s^\\prime,a^\\prime)$$ \u6307\u6570 \u5e73\u5747\u6548\u76ca\u8ba1\u7b97 \uff1a$$Q(s,a)\\leftarrow(1-\\alpha)Q(s,a)+\\alpha\u00b7sample$$ \u5373\u4f7f\u4e00\u5f00\u59cb\u9009\u62e9\u4e86\u5176\u4ed6\u7b56\u7565\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\u5230\u6700\u4f18\u7b56\u7565-> off-policy learning \u4f8b\u5b50\uff1a \u8b66\u544a \uff1a \u5fc5\u987b\u6709 \u8db3\u591f\u591a\u7684\u63a2\u7d22 \u6700\u540e\u8981\u8ba9learning rate\u8db3\u591f\u5c0f\u4f46\u4e0d\u80fd\u4e0b\u964d\u8fc7\u5feb ==Approximate Q-Learning== Q-learning\u5fc5\u987b\u5b58\u50a8\u6240\u6709\u7684\u72b6\u6001-> \u6570\u636e\u91cf\u8fc7\u5927 \u5728Approximate Q-Learning\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u5b66\u4e60\u4e00\u4e9b\u901a\u7528\u7684\u60c5\u51b5 \u5173\u952e\uff1a\u5b66\u4e60\u4e0d\u540c\u73af\u5883\u4e4b\u95f4\u7684\u76f8\u4f3c\u70b9 \u4f8b\u5982\uff1a \u4e0e\u6700\u8fd1\u9b3c\u7684\u8ddd\u79bb \u4e0e\u6700\u8fd1\u7684\u836f\u4e38\u7684\u8ddd\u79bb \u9b3c\u7684\u6570\u91cf \u662f\u5426\u88ab\u56f0\u4f4f \u4f18\u70b9\uff1a \u9002\u7528\u8303\u56f4\u66f4\u52a0\u5e7f \u5b58\u50a8\u9ad8\u6548 \u7ebf\u6027\u4ef7\u503c\u51fd\u6570\uff1a$$\\begin{aligned} V(s) &=w_{1} \\cdot f_{1}(s)+w_{2} \\cdot f_{2}(s)+\\ldots+w_{n} \\cdot f_{n}(s)=\\vec{w} \\cdot \\vec{f}(s) \\ Q(s, a) &=w_{1} \\cdot f_{1}(s, a)+w_{2} \\cdot f_{2}(s, a)+\\ldots+w_{n} \\cdot f_{n}(s, a)=\\vec{w} \\cdot \\vec{f}(s, a) \\end{aligned}$$ $\\vec{f}(s)$\uff1a\u4ee3\u8868\u72b6\u6001\u7684\u7279\u5f81$$\\vec{f}(s)=\\left[\\begin{matrix} f_{1}(s) & f_{2}(s) & \\ldots & f_{n}(s) \\end{matrix}\\right]^{T}$$ $\\vec f(s,a)$\uff1a$$\\vec{f}(s, a)=\\left[\\begin{matrix} f_{1}(s, a) & f_{2}(s, a) & \\ldots & f_{n}(s, a) \\end{matrix}\\right]^{T}$$ $\\vec w$\uff1a$$\\vec w=\\left[\\begin{matrix} w_{1} & w_{2} & \\ldots & w_{n}\\end{matrix}\\right]^{T}$$ difference\uff1a$$difference = [R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q(s^\\prime,a^\\prime)]-Q(s,a)$$ $w_i$\uff1a$$w_i\\leftarrow w_i+\\alpha\u00b7difference\u00b7f_i(s,a)$$ $Q(s,a)$\uff1a$$Q(s,a)\\leftarrow Q(s,a)+\\alpha\u00b7difference$$ eg: Exploration or Exploitation \u8db3\u591f\u7684\u63a2\u7d22\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u662f\u5fc5\u8981\u7684 $\u03b5$-Greedy Policies \u6bcf\u4e00\u6b65\u90fd\u6295\u63b7\u4e00\u679a\u201c\u786c\u5e01\u201d $\u03b5$\uff1aexploration $1-\u03b5$\uff1aact on current policy Exploration Function modified update function\uff1a$$Q(s,a)\\leftarrow (1-\\alpha)Q(s,a)+\\alpha\u00b7[R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}f(s^\\prime,a^\\prime)]$$ exploration function\uff1a$$f(s,a)=Q(s,a)+\\frac{k}{N(s,a)}$$ $k$\uff1a\u9884\u5148\u51b3\u5b9a\u7684\u503c $N(s,a)$\uff1aq-state(s,a)\u88ab\u8bbf\u95ee\u7684\u6b21\u6570 \u968f\u65f6\u95f4\u63a8\u79fb\uff0c\u63a2\u7d22\u7684\u6b21\u6570\u9010\u6e10\u51cf\u5c11\uff0c\u66f4\u591a\u6267\u884c\u4ee5\u786e\u5b9a\u7684\u7b56\u7565","title":"\u5f3a\u5316\u5b66\u4e60(Reinforce Learning)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#reinforce-learning","text":"","title":"\u5f3a\u5316\u5b66\u4e60(Reinforce Learning)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#offline-planningonline-planning","text":"","title":"Offline planning/Online planning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#offline-planning","text":"\u9a6c\u5c14\u53ef\u592b\u95ee\u9898\u5f97\u89e3\u51b3\u5c31\u662f\u4e00\u4e2aoffline planning\u7684\u4f8b\u5b50 informed\uff1a\u5728\u89e3\u51b3\u9a6c\u5c14\u53ef\u592b\u95ee\u9898\u65f6\uff0c \u77e5\u9053 \u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u548c\u5956\u52b1\u51fd\u6570","title":"Offline planning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#online-planning","text":"\u5728\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0c\u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662fOnline planning agent\u4e0d\u77e5\u9053\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u548c\u5956\u52b1\u51fd\u6570 \u5fc5\u987b\u901a\u8fc7\u63a2\u7d22\u3001\u6267\u884c\u7684\u8fc7\u7a0b\u83b7\u5f97\u8fd9\u4e9b\u4fe1\u606f \u5728Online planning\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u6b65\uff0cagent\u5728\u72b6\u6001$s$\u4e0b\u91c7\u53d6$a$\u884c\u52a8\u8f6c\u79fb\u5230\u4e86\u540e\u7ee7\u72b6\u6001$s^\\prime$\uff0c\u5e76\u4e14\u83b7\u5f97\u4e86\u5956\u52b1$r$\uff0c\u5c06\u6bcf\u4e00\u4e2a$(s,a,s^\\prime,r)$\u7ec4\u5408\u79f0\u4e3a\u4e00\u4e2a \u6837\u672c(sample) \u4e00\u4e2a\u4ece \u5f00\u59cb\u72b6\u6001\u4e0d\u65ad\u8f6c\u79fb\u5230\u7ec8\u6b62\u72b6\u6001 \u7684\u8fc7\u7a0b\u79f0\u4e3a\u4e00\u4e2a episode \u5f3a\u5316\u5b66\u4e60\u7684\u4e24\u4e2a\u5206\u7c7b\uff1a model-based learning model-free learning","title":"Online planning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#model-based-learning","text":"\u5728\u57fa\u4e8e\u6a21\u578b\u7684\u5f3a\u5316\u5b66\u4e60\u4e2d\uff0cagent\u901a\u8fc7\u591a\u6b21\u5c1d\u8bd5\uff0c\u751f\u6210\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u7684\u4f30\u8ba1->$\\hat T(s,a,s^\\prime)$\uff0c\u7136\u540e\u518d\u5229\u7528[[MDP\uff08\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff09]]\u627e\u5230\u6700\u4f18\u89e3 eg\uff1a$\\gamma=1, noise = 0.2$ \u5730\u56fe \u63a2\u7d22\uff1a \u7ed3\u679c\uff1a","title":"Model-Based Learning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#model-free-learning","text":"\u4e09\u79cd\u6a21\u578b\uff1a \u88ab\u52a8\u5f3a\u5316\u5b66\u4e60(Passive Reinforcement Learning)\uff1a \u5728\u88ab\u52a8\u5f3a\u5316\u5b66\u4e60\u7684\u4e00\u4e2aepisode\u4e2d\uff0cagent\u6267\u884c\u6240\u7ed9\u7684\u7b56\u7565\uff0c\u5e76\u4e14\u83b7\u5f97\u6267\u884c\u7b56\u7565\u540e\u7684\u72b6\u6001\u7684\u4ef7\u503c<-\u8fd9\u6b63\u662f\u5728T\u548cR\u5df2\u77e5\u60c5\u51b5\u4e0b\uff0cMDPs\u6240\u505a\u7684\u4e8b\u60c5 \u76f4\u63a5\u4f30\u8ba1(Direct Evaluation) \u65f6\u95f4\u5dee\u5206\u5b66\u4e60(Tempora Difference Learning) \u4e3b\u52a8\u5f3a\u5316\u5b66\u4e60(Active Reinforcement Learning)\uff1a agent\u53ef\u4ee5\u5728\u5b66\u4e60\u65f6\uff0c\u4f7f\u7528\u63a5\u6536\u5230\u7684\u53cd\u9988\u6765\u66f4\u65b0\u7b56\u7565\uff0c\u76f4\u5230\u5728\u8db3\u591f\u591a\u7684\u63a2\u7d22\u540e\uff0c\u6700\u7ec8\u51b3\u5b9a\u6700\u4f18\u7b56\u7565 Q-learning","title":"Model-Free Learning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#direct-evaluation","text":"\u6839\u636e$\\pi$\u6267\u884c \u6bcf\u7ecf\u8fc7\u4e00\u4e2a\u72b6\u6001\uff0c\u8bb0\u4e0b\u6536\u76ca\u548c\u5230\u8fbe\u7684\u6b21\u6570 \u6c42\u5e73\u5747\u503c \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u6613\u4e8e\u7406\u89e3 \u65e0\u9700T\uff0cR \u4ec5\u4f7f\u7528\u6837\u672c\u4e2d\u7684\u6570\u636e\uff0c\u5c31\u80fd\u8ba1\u7b97\u51fa\u6b63\u786e\u7684\u5e73\u5747\u4ef7\u503c \u7f3a\u70b9\uff1a \u6d6a\u8d39\u4e86\u72b6\u6001\u4e4b\u95f4\u7684\u5173\u7cfb <-\u4f7f\u7528[[MDP\uff08\u9a6c\u5c14\u53ef\u592b\u51b3\u7b56\u8fc7\u7a0b\uff09#\u8d1d\u5c14\u66fc\u65b9\u7a0b Bellman Equations|Bellman\u65b9\u7a0b]]\uff0c\u5c31\u53ef\u4ee5\u5c06\u5404\u4e2astate\u8054\u7cfb\u8d77\u6765->\u5982\u4f55\u5728\u4e0d\u77e5\u9053T\u3001R\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528Bellman\u66f4\u65b0\uff1f\uff1f->[[\u5f3a\u5316\u5b66\u4e60(Reinforce Learning)#\u65f6\u95f4\u5dee\u5206\u5b66\u4e60 Temporal Difference Learning|TD Learning]] \u6bcf\u4e00\u4e2a\u72b6\u6001\u5fc5\u987b\u72ec\u7acb\u5b66\u4e60 \u82b1\u8d39 \u65f6\u95f4\u957f","title":"\u76f4\u63a5\u8bc4\u4f30(Direct Evaluation)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#temporal-difference-learning","text":"\u601d\u8def\uff1a \u5bf9\u4e8e\u6bcf\u6b21$(s,a,s^\\prime,r)$\u90fd\u66f4\u65b0\u4e00\u6b21$V(s)$ \u53ef\u80fd\u7684\u7ed3\u679c$s^\\prime$\u5c06\u4f1a\u66f4\u52a0\u9891\u7e41\u7684\u63d0\u4f9b\u66f4\u65b0 \u5982\u4f55\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u6c42\u51fa\u6bcf\u4e2a\u72b6\u6001\u7684\u5e73\u5747\u4ef7\u503c\uff1f\uff1f->Exponential Moving Average Exponential Moving Average \u8ba9\u6700\u8fd1\u7684sample\u66f4\u52a0\u91cd\u8981 \uff1a $$\\bar x_n =\\frac{x_n+(1-\\alpha)x_{n-1}+(1-\\alpha)^{2}x_{n-2}+\u2026\u2026}{1+(1-\\alpha)+(1-\\alpha)^2+\u2026\u2026}$$ \u6bcf\u4e00\u6b21\u72b6\u6001\u8f6c\u79fb sample of V(s)\uff1a$sample=R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)$ \u5bf9\u4e8e$V^\\pi(s)$\u7684\u65b0\u7684\u65b9\u5f0f\uff1aUpdate to V(s)\uff1a$V^\\pi(s)\\leftarrow(1-\\alpha)V^\\pi(s)+(\\alpha)sample$ \u5b66\u4e60\u7387\uff1a$\\alpha$ $1-\\alpha$\uff1a\u6307\u5b9a\u5df2\u5b58\u5728\u7684\u6a21\u578b\u5bf9$V^\\pi(s)$\u7684\u5f71\u54cd \u8fc7\u53bb\u7684\u5f71\u54cd\u5219\u9010\u6e10\u6536\u655b\u81f30 $\\alpha$\uff1a\u6307\u5b9a\u65b0\u7684sample\u5bf9$V^\\pi(s)$\u7684\u5f71\u54cd Same update\uff1a$V^\\pi(s)\\leftarrow V^\\pi(s)+\\alpha(sample-V^\\pi(s))$ \u539f\u8bc4\u4f30\u65b9\u5f0f\uff08\u52a0\u6743\u5e73\u5747\uff09\uff1a$V^\\pi(s)=\\sum_{s^\\prime}T(s,\\pi(s),s^\\prime)[R(s,\\pi(s),s^\\prime)+\\gamma V^\\pi(s^\\prime)]$ \u793a\u4f8b\uff1a","title":"\u65f6\u95f4\u5dee\u5206\u5b66\u4e60(Temporal Difference Learning)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#q-learning","text":"\u88ab\u52a8\u5f3a\u5316\u5b66\u4e60\u4e2d\u7684\u95ee\u9898\uff1a\u8981\u627e\u5230\u6700\u4f18\u7684\u7b56\u7565\uff0c\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u72b6\u6001\u7684q-values Q-Learning\uff1a\u76f4\u63a5\u5b66\u4e60\u72b6\u6001\u7684q-values\uff08\u65e0\u9700\u5176\u4ed6\u4efb\u4f55values, T, R)\uff0c\u4e3a\u6bcf\u4e00\u4e2aq-state\u627e\u5230\u6700\u4f73\u7684q-value q-value iteration\uff1a$$Q_{k+1}(s,a)\\leftarrow\\sum_{s^\\prime}T(s,a,s^\\prime)[R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q_k(s^\\prime,a^\\prime)]$$ q-value samples \uff1a$$sample=R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q(s^\\prime,a^\\prime)$$ \u6307\u6570 \u5e73\u5747\u6548\u76ca\u8ba1\u7b97 \uff1a$$Q(s,a)\\leftarrow(1-\\alpha)Q(s,a)+\\alpha\u00b7sample$$ \u5373\u4f7f\u4e00\u5f00\u59cb\u9009\u62e9\u4e86\u5176\u4ed6\u7b56\u7565\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5b66\u4e60\u5230\u6700\u4f18\u7b56\u7565-> off-policy learning \u4f8b\u5b50\uff1a \u8b66\u544a \uff1a \u5fc5\u987b\u6709 \u8db3\u591f\u591a\u7684\u63a2\u7d22 \u6700\u540e\u8981\u8ba9learning rate\u8db3\u591f\u5c0f\u4f46\u4e0d\u80fd\u4e0b\u964d\u8fc7\u5feb","title":"Q-Learning"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#approximate-q-learning","text":"Q-learning\u5fc5\u987b\u5b58\u50a8\u6240\u6709\u7684\u72b6\u6001-> \u6570\u636e\u91cf\u8fc7\u5927 \u5728Approximate Q-Learning\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u5b66\u4e60\u4e00\u4e9b\u901a\u7528\u7684\u60c5\u51b5 \u5173\u952e\uff1a\u5b66\u4e60\u4e0d\u540c\u73af\u5883\u4e4b\u95f4\u7684\u76f8\u4f3c\u70b9 \u4f8b\u5982\uff1a \u4e0e\u6700\u8fd1\u9b3c\u7684\u8ddd\u79bb \u4e0e\u6700\u8fd1\u7684\u836f\u4e38\u7684\u8ddd\u79bb \u9b3c\u7684\u6570\u91cf \u662f\u5426\u88ab\u56f0\u4f4f \u4f18\u70b9\uff1a \u9002\u7528\u8303\u56f4\u66f4\u52a0\u5e7f \u5b58\u50a8\u9ad8\u6548 \u7ebf\u6027\u4ef7\u503c\u51fd\u6570\uff1a$$\\begin{aligned} V(s) &=w_{1} \\cdot f_{1}(s)+w_{2} \\cdot f_{2}(s)+\\ldots+w_{n} \\cdot f_{n}(s)=\\vec{w} \\cdot \\vec{f}(s) \\ Q(s, a) &=w_{1} \\cdot f_{1}(s, a)+w_{2} \\cdot f_{2}(s, a)+\\ldots+w_{n} \\cdot f_{n}(s, a)=\\vec{w} \\cdot \\vec{f}(s, a) \\end{aligned}$$ $\\vec{f}(s)$\uff1a\u4ee3\u8868\u72b6\u6001\u7684\u7279\u5f81$$\\vec{f}(s)=\\left[\\begin{matrix} f_{1}(s) & f_{2}(s) & \\ldots & f_{n}(s) \\end{matrix}\\right]^{T}$$ $\\vec f(s,a)$\uff1a$$\\vec{f}(s, a)=\\left[\\begin{matrix} f_{1}(s, a) & f_{2}(s, a) & \\ldots & f_{n}(s, a) \\end{matrix}\\right]^{T}$$ $\\vec w$\uff1a$$\\vec w=\\left[\\begin{matrix} w_{1} & w_{2} & \\ldots & w_{n}\\end{matrix}\\right]^{T}$$ difference\uff1a$$difference = [R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}Q(s^\\prime,a^\\prime)]-Q(s,a)$$ $w_i$\uff1a$$w_i\\leftarrow w_i+\\alpha\u00b7difference\u00b7f_i(s,a)$$ $Q(s,a)$\uff1a$$Q(s,a)\\leftarrow Q(s,a)+\\alpha\u00b7difference$$ eg:","title":"==Approximate Q-Learning=="},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#exploration-or-exploitation","text":"\u8db3\u591f\u7684\u63a2\u7d22\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u662f\u5fc5\u8981\u7684","title":"Exploration or Exploitation"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#-greedy-policies","text":"\u6bcf\u4e00\u6b65\u90fd\u6295\u63b7\u4e00\u679a\u201c\u786c\u5e01\u201d $\u03b5$\uff1aexploration $1-\u03b5$\uff1aact on current policy","title":"$\u03b5$-Greedy Policies"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%28Reinforce%20Learning%29/#exploration-function","text":"modified update function\uff1a$$Q(s,a)\\leftarrow (1-\\alpha)Q(s,a)+\\alpha\u00b7[R(s,a,s^\\prime)+\\gamma\\max_{a^\\prime}f(s^\\prime,a^\\prime)]$$ exploration function\uff1a$$f(s,a)=Q(s,a)+\\frac{k}{N(s,a)}$$ $k$\uff1a\u9884\u5148\u51b3\u5b9a\u7684\u503c $N(s,a)$\uff1aq-state(s,a)\u88ab\u8bbf\u95ee\u7684\u6b21\u6570 \u968f\u65f6\u95f4\u63a8\u79fb\uff0c\u63a2\u7d22\u7684\u6b21\u6570\u9010\u6e10\u51cf\u5c11\uff0c\u66f4\u591a\u6267\u884c\u4ee5\u786e\u5b9a\u7684\u7b56\u7565","title":"Exploration Function"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/","text":"\u6982\u7387(Probabilistic) \u5728\u4eba\u5de5\u667a\u80fd\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u57fa\u4e8e\u5404\u79cd\u5404\u6837\u7684\u4e0d\u786e\u5b9a\u65f6\u95f4\u8fdb\u884c\u5efa\u6a21 \u968f\u673a\u53d8\u91cf(Random Variables) \u4e0d\u786e\u5b9a\u7684\u53d8\u91cf \u4e00\u822c\u6765\u8bf4\uff0c\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u6765\u6307\u660e\u968f\u673a\u53d8\u91cf \u6982\u7387\u5206\u5e03(probability Distributions) \u8054\u5408\u6982\u7387\u5206\u5e03(Joint Distributions) \u9075\u5b88\uff1a $P(x_1,x_2,...,x_n)\\geq 0$ $\\sum P(x_1,x_2,...,x_n)=1$ \u4e8b\u4ef6(Event)\uff1a\u7ed3\u679c\u7684\u4e00\u4e2a\u96c6\u5408<-$P(E)=\\sum_{({x_1,x_2,...,x_n}\\in E)}P(x_1,x_2,...,x_n)$ \u901a\u8fc7\u8054\u5408\u6982\u7387\u5206\u5e03\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4efb\u610f\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387 \u8fb9\u7f18\u5206\u5e03(Marginal Distributions) \u8fb9\u7f18\u5206\u5e03\u662f\u5254\u9664\u5176\u4ed6\u53d8\u91cf\u540e\u7684\u5b50\u5206\u5e03 \u6761\u4ef6\u6982\u7387\u5206\u5e03 $$P(a|b)=\\frac{P(a,b)}{P(b)}$$ \u5f52\u4e00\u5316(Normalize) \u6982\u7387\u63a8\u7406(Probabilistic Inference) \u4ece\u5df2\u77e5\u7684\u6982\u7387\u4e2d\u63a8\u7b97\u51fa\u60f3\u8981\u7684\u6982\u7387 \u679a\u4e3e\u63a8\u7406 \u4e3a\u4e86\u5f97\u5230\u76ee\u6807\u6982\u7387\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\uff1a \u67e5\u8be2\u53d8\u91cf(Query variables $Q_i$)\uff1a\u672a\u77e5\uff0c\u5e76\u4e14\u5c1d\u8bd5\u8ba1\u7b97\u6982\u7387\u7684\u53d8\u91cf \u8bc1\u636e\u53d8\u91cf(Evidence variables $e_i$)\uff1a\u5df2\u77e5\uff0c\u5e76\u4e14\u7528\u4e8e\u8ba1\u7b97\u76ee\u6807\u6982\u7387\uff08\u88ab\u89c2\u6d4b\uff0c\u5df2\u786e\u5b9a\uff09 \u9690\u85cf\u53d8\u91cf(Hidden variables)\uff1a\u5176\u4ed6\u65e0\u7528\u7684\u53d8\u91cf \u6b65\u9aa4\uff1a Select the entries consistent with the evidence Sum out H to get joint of Query and evidence Normalize","title":"\u6982\u7387(Probabilistic)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#probabilistic","text":"\u5728\u4eba\u5de5\u667a\u80fd\u4e2d\uff0c\u5e38\u5e38\u9700\u8981\u57fa\u4e8e\u5404\u79cd\u5404\u6837\u7684\u4e0d\u786e\u5b9a\u65f6\u95f4\u8fdb\u884c\u5efa\u6a21","title":"\u6982\u7387(Probabilistic)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#random-variables","text":"\u4e0d\u786e\u5b9a\u7684\u53d8\u91cf \u4e00\u822c\u6765\u8bf4\uff0c\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u6765\u6307\u660e\u968f\u673a\u53d8\u91cf","title":"\u968f\u673a\u53d8\u91cf(Random Variables)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#probability-distributions","text":"","title":"\u6982\u7387\u5206\u5e03(probability Distributions)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#joint-distributions","text":"\u9075\u5b88\uff1a $P(x_1,x_2,...,x_n)\\geq 0$ $\\sum P(x_1,x_2,...,x_n)=1$ \u4e8b\u4ef6(Event)\uff1a\u7ed3\u679c\u7684\u4e00\u4e2a\u96c6\u5408<-$P(E)=\\sum_{({x_1,x_2,...,x_n}\\in E)}P(x_1,x_2,...,x_n)$ \u901a\u8fc7\u8054\u5408\u6982\u7387\u5206\u5e03\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4efb\u610f\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387","title":"\u8054\u5408\u6982\u7387\u5206\u5e03(Joint Distributions)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#marginal-distributions","text":"\u8fb9\u7f18\u5206\u5e03\u662f\u5254\u9664\u5176\u4ed6\u53d8\u91cf\u540e\u7684\u5b50\u5206\u5e03","title":"\u8fb9\u7f18\u5206\u5e03(Marginal Distributions)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#_1","text":"$$P(a|b)=\\frac{P(a,b)}{P(b)}$$","title":"\u6761\u4ef6\u6982\u7387\u5206\u5e03"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#normalize","text":"","title":"\u5f52\u4e00\u5316(Normalize)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#probabilistic-inference","text":"\u4ece\u5df2\u77e5\u7684\u6982\u7387\u4e2d\u63a8\u7b97\u51fa\u60f3\u8981\u7684\u6982\u7387","title":"\u6982\u7387\u63a8\u7406(Probabilistic Inference)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E6%A6%82%E7%8E%87%28Probabilistic%29/#_2","text":"\u4e3a\u4e86\u5f97\u5230\u76ee\u6807\u6982\u7387\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\uff1a \u67e5\u8be2\u53d8\u91cf(Query variables $Q_i$)\uff1a\u672a\u77e5\uff0c\u5e76\u4e14\u5c1d\u8bd5\u8ba1\u7b97\u6982\u7387\u7684\u53d8\u91cf \u8bc1\u636e\u53d8\u91cf(Evidence variables $e_i$)\uff1a\u5df2\u77e5\uff0c\u5e76\u4e14\u7528\u4e8e\u8ba1\u7b97\u76ee\u6807\u6982\u7387\uff08\u88ab\u89c2\u6d4b\uff0c\u5df2\u786e\u5b9a\uff09 \u9690\u85cf\u53d8\u91cf(Hidden variables)\uff1a\u5176\u4ed6\u65e0\u7528\u7684\u53d8\u91cf \u6b65\u9aa4\uff1a Select the entries consistent with the evidence Sum out H to get joint of Query and evidence Normalize","title":"\u679a\u4e3e\u63a8\u7406"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/","text":"\u8d1d\u53f6\u65af\u7f51\u7edc(Bayesian Network) \u72ec\u7acb(Indenpendence) \u4e24\u8005\uff08\u968f\u673a\u53d8\u91cf\uff09\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd $$\\forall x,y:P(x,y)=P(x)P(y)\\Longrightarrow X \\perp Y$$ $$\\forall x,y:P(x|y)=P(x)\\Longrightarrow x \\perp y$$ $$\\forall x,y:P(y|x)=P(y)\\Longrightarrow x \\perp y$$ \u53ef\u4ee5\u5c06\u6295\u63b7\u786c\u5e01\u7684\u60c5\u51b5\u5199\u6210\u5982\u4e0b\uff0c\u6781\u5927\u51cf\u5c11\u4e86\u6570\u636e\u91cf \u6761\u4ef6\u72ec\u7acb(Conditional Independence) \u5bf9\u4e8e\u672a\u77e5\u7684\u73af\u5883\uff0c\u6761\u4ef6\u72ec\u7acb\u662f\u6211\u4eec\u6700\u57fa\u7840\u7684\u548c\u6700\u76f4\u63a5\u7684\u4e86\u89e3\u5f62\u5f0f $X$\u4e0e$Y|Z$\u6761\u4ef6\u72ec\u7acb\uff1a$X \\perp !!! \\perp Y|Z$ \u5f53\u4e14\u4ec5\u5f53Z\u53d1\u751f\u65f6\uff0c\u77e5\u9053X\u53d1\u751f\u662f\u5426\u65e0\u52a9\u4e8e\u77e5\u9053Y\u53d1\u751f\u4e0e\u5426 $$\\forall x,y,z:P(x,y|z)=P(x|z)P(y|z) \\Longrightarrow X\\perp !!! \\perp Y|Z$$ $$\\forall x,y,z:P(x|z,y)=P(x|z)$$ \u94fe\u5f0f\u6cd5\u5219\uff1a$P(X_1,X_2,...,X_n)=P(X_1)P(X_2|X_1)P(X_3|X_1,X_2)...$ $P(Traffic, Rain, Umbrella)$ \u94fe\u5f0f\u6cd5\u5219\uff1a$P(Traffic, Rain, Umbrella) = P(Rain)P(Traffic|Rain)P(Umbrella|Rain, Traffic)$ \u7531\u4e8e$Traffic\\perp !!! \\perp Umbrella|Rain$\uff1a$P(Traffic, Rain, Umbrella) = P(rain)P(Traffic|Rain)P(Umbrella|Rain)$ \u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u8868\u793a(Bayesian Network:Representation) \u8054\u5408\u5206\u5e03\u7684\u7f3a\u70b9 \u5728\u968f\u673a\u53d8\u91cf\u8f83\u591a\u7684\u65f6\u5019\uff0c\u6570\u636e\u91cf\u5927 \u96be\u4ee5\u4e00\u6b21\u4ece\u7ecf\u9a8c\u4e0a\u5b66\u4e60\u5173\u4e8e\u591a\u4e2a\u53d8\u91cf\u7684\u4efb\u4f55\u4e1c\u897f \u8d1d\u53f6\u65af\u7f51\u7edc \u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u4f7f\u7528\u7b80\u5355\u7684\u65b9\u5f0f\uff08\u6709\u5411\u65e0\u73af\u56fe(DAG)\uff09\u8868\u8fbe\u590d\u6742\u7684\u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b \u56fe \u7ed3\u70b9\uff1a\u968f\u673a\u53d8\u91cf \u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u4e00\u4e2a\u6761\u4ef6\u6982\u7387\u5206\u5e03 Each node is conditionally independent of all its ancestor nodes in the graph, given all of its parents \u8ba9$A_1,A_2,...,A_N$\u4e3aX\u7684\u53cc\u4eb2\u4ee5\u5b58\u50a8$P(X|A_1,A_2,...,A_N)$ \u5f27\uff1a\u56e0\u679c\u5173\u7cfb\u6216\u975e\u6761\u4ef6\u72ec\u7acb \u8d1d\u53f6\u65af\u7f51\u7edc\u4e0e\u6761\u4ef6\u72ec\u7acb\uff1a$$P(x_1,x_2,...,x_n)=\\prod^{n}_{i=1}P(x_i|parents(X_i))$$ \u6848\u4f8b\uff1a$P(+cavity,+catch,-toothache)=P(+cavity)\u00b7P(+catch|+cavity)\u00b7P(-toochache|+cavity)$ \u5927\u5c0f \u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b\uff1a$2^n$ n\u4e2a\u8282\u70b9\u4e14\u6bcf\u4e2a\u8282\u70b9\u6700\u591ak\u4e2a\u53cc\u4eb2\u7684\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a$n*2^{k+1}$ \u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u6761\u4ef6\u72ec\u7acb(Conditional Indenpendence) D-separation \u7814\u7a76\u4e09\u5143\u7ec4\u7684 \u72ec\u7acb\u6027 \u901a\u8fc7\u591a\u4e2a\u4e09\u5143\u7ec4\u7814\u7a76\u590d\u6742\u7684\u60c5\u51b5 \u5206\u7c7b\uff1a Causal Chains $X\\perp!!!\\perp Y|Z$ Common Cause $X\\perp!!!\\perp Y|Z$ Common Effect $X\\perp!!!!!!!!\\not\\perp Y|Z,X\\perp Y$ Active/Inactive Paths ^84522f \u53ef\u8fbe\u6027 \u65b9\u6cd5\uff1a\u5c06\u8bc1\u636e\u8282\u70b9\u6d82\u4e0a\u9634\u5f71\uff0c\u518d\u67e5\u770b\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 \u5224\u65ad\uff1a\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684 \u6240\u6709\u4e09\u5143\u7ec4\u5747\u4e3aInactive Paths\uff0c\u5219\u4e24\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u968f\u673a\u53d8\u91cf\u6761\u4ef6\u72ec\u7acb \u793a\u4f8b\uff1a \u4e0d\u540c\u7684\u8d1d\u53f6\u65af\u7f51\u7edc\u53ef\u80fd\u6307\u5411\u76f8\u540c\u7684\u72ec\u7acb\u6027\uff1a \u4e00\u4e2a\u8d1d\u53f6\u65af\u7f51\u7edc\u53ef\u80fd \u4e0d\u5b58\u5728\u4efb\u4f55\u72ec\u7acb\u6027 \uff1a \u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u63a8\u5bfc(Probabilistic Inference) Inference\uff1a\u4ece\u4e00\u4e2a\u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b\u4e2d\u8ba1\u7b97\u5176\u4ed6\u60f3\u8981\u7684\u6982\u7387 \u679a\u4e3e\u63a8\u7406(Inference by Enumeration) - \u6b65\u9aa4\uff1a - Select the entries consistent with the evidence - Sum out H to get joint of Query and evidence\uff08 Marginalize ) - Normalize - \u6848\u4f8b\uff1a \u53d8\u91cf\u5254\u9664\uff08Variable Elimination\uff09 \u5728\u679a\u4e3e\u63a8\u7406\u4e2d\uff0c\u5728\u53bb\u9664\u5176\u4ed6\u9690\u53d8\u91cf\u4e4b\u524d\uff0c\u52a0\u5165\u4e86\u5b8c\u6574\u7684\u8054\u5408\u5206\u5e03\u6982\u7387\uff0c\u5bfc\u81f4 \u679a\u4e3e\u63a8\u7406\u8fd0\u884c\u6548\u7387\u4f4e \u53d8\u91cf\u5254\u9664\uff1a\u4ea4\u53c9\u52a0\u5165\u5e76\u4e14\u5373\u65f6\u8fdb\u884c\u8fb9\u7f18\u5316\u64cd\u4f5c \u56e0\u5b50\uff08Factors\uff09 Joint Distribution :$P(X,Y)$ \u548c\u4e3a1 \u5305\u542b\u4e86x\uff0cy\u7684\u6240\u6709\u6761\u76ee Selected Joint \uff1a$P(x,Y)$ \u8054\u5408\u6982\u7387\u5206\u5e03\u7684\u4e00\u90e8\u5206 \u5305\u542b\u56fa\u5b9a\u7684x\uff0c\u6240\u6709\u7684y\u7684\u6761\u76ee \u548c\u4e3a$P(x)$ \u5927\u5199\u5b57\u6bcd\u7684\u6570\u91cf=\u8868\u7684\u7ef4\u5ea6\u6570 Single Conditional \uff1a$P(Y|x)$ $x$\u6761\u4ef6\u4e0b\u7684\u6240\u6709$P(y|x)$ \u548c\u4e3a1 Family of conditionals \uff1a$P(Y|X)$ \u6240\u6709\u7684$P(y|x)$\u6761\u76ee \u548c\u4e3a$|X|$ Specified Family \uff1a$P(y|X)$ \u56fa\u5b9a$y$\u7684\u6240\u6709$P(y|x)$\u6761\u76ee \u4e24\u79cd\u65b9\u6848\u5bf9\u6bd4 Inference by Enumeration Join all factors $$\\forall r,t:P(r,t)=P(r)\u00b7P(t|r)$$ - Eliminate Variable Elimination - \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u5254\u9664\u7684\u987a\u5e8f\u4f1a\u6781\u5927\u5f71\u54cd\u8ba1\u7b97\u7684\u590d\u6742\u5ea6 - \u6848\u4f8b\uff1a 1. \u6cd5\u4e00\uff1a \u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u53d6\u6837(Sampling) \u53d6\u6837(Sampling)\uff1a\u53d6\u6837\u662f\u4e00\u4e2a\u91cd\u590d\u6a21\u62df\u7684\u8fc7\u7a0b \u57fa\u672c\u601d\u8def\uff1a \u4ece\u53d6\u6837\u7684\u5206\u5e03S\u4e2d\u62bd\u53d6N\u4e2a\u6837\u672c \u8ba1\u7b97 \u8fd1\u4f3c \u7684\u6982\u7387 \u6536\u655b\u81f3\u6b63\u786e\u7684\u6982\u7387 \u610f\u4e49\uff1a \u5b66\u4e60\uff1a\u4ece\u4e0d\u77e5\u9053\u7684\u5206\u5e03\u4e2d\u83b7\u5f97\u6837\u672c \u63a8\u65ad\uff1a\u83b7\u5f97\u6837\u672c\u6bd4\u76f4\u63a5\u8ba1\u7b97\u6b63\u786e\u7684\u6982\u7387\u8981\u5feb Prior Sampling - \u4ea7\u751f\u5404\u4e2a\u6837\u672c\u7684\u6982\u7387\u4e3a\uff1a$$S_{PS}(x_1...x_n)=\\prod^n_{i=1}P(x_i|Parents(X_i))=P(x_1...x_n)$$ - \u5f53\u6837\u672c\u6570\u91cf\u8db3\u591f\u591a\u540e\uff0c\u83b7\u5f97\u7684\u6982\u7387\u5c31\u4f1a\u6536\u655b\u4e8e\u771f\u5b9e\u503c - \u6848\u4f8b\uff1a Rejection Sampling \u5982\u679c\u6709\u4e00\u4e2a\u9884\u5148\u786e\u5b9a\u597d\u7684evidence\uff0c\u5728\u9009\u62e9\u91c7\u6837\u7ed3\u679c\u65f6\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u7b26\u5408evidence\u7684\u6837\u672c \u95ee\u9898\uff1a \u5f53evidence\u51e0\u4e4e\u4e0d\u53ef\u80fd\u65f6\uff0c\u4f1a\u62d2\u7edd\u5927\u91cf\u7684\u6837\u672c\uff0c\u4ea7\u751f\u5927\u91cf\u65e0\u7528\u7684\u6837\u672c \u5728\u53d6\u6837\u65f6\uff0cevidence\u5e76\u6ca1\u6709\u88ab\u5229\u7528 Likelihood Weighting \u601d\u8def\uff1a\u5904\u7406evidence\uff0c\u8ba9\u6240\u6709\u7684\u6837\u672c\u90fd\u7b26\u5408evidence weight bt probability of evidence given parents \u9488\u5bf9z\u53d6\u6837\uff0ce\u4e3aevidence$$\\begin{aligned} S_{WS}(z,e)=\\prod^l_{i=1}P(z_i|Parents(Z_i)) \\ w(z,e)=\\prod^m_{i=1}P(e_i|Parents(E_i)) \\ P(z,e)=S_{WS}(z,e)\u00b7w(z,e) \\end{aligned}$$ \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u8003\u8651\u4e86evidence \u66f4\u597d\u7684\u53cd\u6620\u4e86\u5728evidence\u5f71\u54cd\u4e0b\u7684\u4e16\u754c \u7f3a\u70b9\uff1a evidence\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e0b\u6e38\u7684\u968f\u673a\u53d8\u91cf\u7684\u9009\u62e9\uff0c\u5bfc\u81f4\u51fa\u73b0\u9519\u8bef\u7684\u7ed3\u679c Gibbs Sampling \u6b65\u9aa4\uff1a \u786e\u5b9aevidence \u521d\u59cb\u5316\u5176\u4ed6\u968f\u673a\u53d8\u91cf\uff08\u968f\u673a\u521d\u59cb\u5316\uff09 \u91cd\u590d\uff1a \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u975eevidence\u53d8\u91cf$X$ \u4ece$P(X|all\\ other\\ variables)$\u4e2d\u53d6\u6837","title":"\u8d1d\u53f6\u65af\u7f51\u7edc(Bayesian Network)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#bayesian-network","text":"","title":"\u8d1d\u53f6\u65af\u7f51\u7edc(Bayesian Network)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#indenpendence","text":"\u4e24\u8005\uff08\u968f\u673a\u53d8\u91cf\uff09\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd $$\\forall x,y:P(x,y)=P(x)P(y)\\Longrightarrow X \\perp Y$$ $$\\forall x,y:P(x|y)=P(x)\\Longrightarrow x \\perp y$$ $$\\forall x,y:P(y|x)=P(y)\\Longrightarrow x \\perp y$$ \u53ef\u4ee5\u5c06\u6295\u63b7\u786c\u5e01\u7684\u60c5\u51b5\u5199\u6210\u5982\u4e0b\uff0c\u6781\u5927\u51cf\u5c11\u4e86\u6570\u636e\u91cf","title":"\u72ec\u7acb(Indenpendence)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#conditional-independence","text":"\u5bf9\u4e8e\u672a\u77e5\u7684\u73af\u5883\uff0c\u6761\u4ef6\u72ec\u7acb\u662f\u6211\u4eec\u6700\u57fa\u7840\u7684\u548c\u6700\u76f4\u63a5\u7684\u4e86\u89e3\u5f62\u5f0f $X$\u4e0e$Y|Z$\u6761\u4ef6\u72ec\u7acb\uff1a$X \\perp !!! \\perp Y|Z$ \u5f53\u4e14\u4ec5\u5f53Z\u53d1\u751f\u65f6\uff0c\u77e5\u9053X\u53d1\u751f\u662f\u5426\u65e0\u52a9\u4e8e\u77e5\u9053Y\u53d1\u751f\u4e0e\u5426 $$\\forall x,y,z:P(x,y|z)=P(x|z)P(y|z) \\Longrightarrow X\\perp !!! \\perp Y|Z$$ $$\\forall x,y,z:P(x|z,y)=P(x|z)$$ \u94fe\u5f0f\u6cd5\u5219\uff1a$P(X_1,X_2,...,X_n)=P(X_1)P(X_2|X_1)P(X_3|X_1,X_2)...$ $P(Traffic, Rain, Umbrella)$ \u94fe\u5f0f\u6cd5\u5219\uff1a$P(Traffic, Rain, Umbrella) = P(Rain)P(Traffic|Rain)P(Umbrella|Rain, Traffic)$ \u7531\u4e8e$Traffic\\perp !!! \\perp Umbrella|Rain$\uff1a$P(Traffic, Rain, Umbrella) = P(rain)P(Traffic|Rain)P(Umbrella|Rain)$","title":"\u6761\u4ef6\u72ec\u7acb(Conditional Independence)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#bayesian-networkrepresentation","text":"","title":"\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u8868\u793a(Bayesian Network:Representation)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#_1","text":"\u5728\u968f\u673a\u53d8\u91cf\u8f83\u591a\u7684\u65f6\u5019\uff0c\u6570\u636e\u91cf\u5927 \u96be\u4ee5\u4e00\u6b21\u4ece\u7ecf\u9a8c\u4e0a\u5b66\u4e60\u5173\u4e8e\u591a\u4e2a\u53d8\u91cf\u7684\u4efb\u4f55\u4e1c\u897f","title":"\u8054\u5408\u5206\u5e03\u7684\u7f3a\u70b9"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#_2","text":"\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u4f7f\u7528\u7b80\u5355\u7684\u65b9\u5f0f\uff08\u6709\u5411\u65e0\u73af\u56fe(DAG)\uff09\u8868\u8fbe\u590d\u6742\u7684\u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b \u56fe \u7ed3\u70b9\uff1a\u968f\u673a\u53d8\u91cf \u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u4e00\u4e2a\u6761\u4ef6\u6982\u7387\u5206\u5e03 Each node is conditionally independent of all its ancestor nodes in the graph, given all of its parents \u8ba9$A_1,A_2,...,A_N$\u4e3aX\u7684\u53cc\u4eb2\u4ee5\u5b58\u50a8$P(X|A_1,A_2,...,A_N)$ \u5f27\uff1a\u56e0\u679c\u5173\u7cfb\u6216\u975e\u6761\u4ef6\u72ec\u7acb \u8d1d\u53f6\u65af\u7f51\u7edc\u4e0e\u6761\u4ef6\u72ec\u7acb\uff1a$$P(x_1,x_2,...,x_n)=\\prod^{n}_{i=1}P(x_i|parents(X_i))$$ \u6848\u4f8b\uff1a$P(+cavity,+catch,-toothache)=P(+cavity)\u00b7P(+catch|+cavity)\u00b7P(-toochache|+cavity)$ \u5927\u5c0f \u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b\uff1a$2^n$ n\u4e2a\u8282\u70b9\u4e14\u6bcf\u4e2a\u8282\u70b9\u6700\u591ak\u4e2a\u53cc\u4eb2\u7684\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a$n*2^{k+1}$","title":"\u8d1d\u53f6\u65af\u7f51\u7edc"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#conditional-indenpendence","text":"D-separation \u7814\u7a76\u4e09\u5143\u7ec4\u7684 \u72ec\u7acb\u6027 \u901a\u8fc7\u591a\u4e2a\u4e09\u5143\u7ec4\u7814\u7a76\u590d\u6742\u7684\u60c5\u51b5 \u5206\u7c7b\uff1a Causal Chains $X\\perp!!!\\perp Y|Z$ Common Cause $X\\perp!!!\\perp Y|Z$ Common Effect $X\\perp!!!!!!!!\\not\\perp Y|Z,X\\perp Y$ Active/Inactive Paths ^84522f \u53ef\u8fbe\u6027 \u65b9\u6cd5\uff1a\u5c06\u8bc1\u636e\u8282\u70b9\u6d82\u4e0a\u9634\u5f71\uff0c\u518d\u67e5\u770b\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84 \u5224\u65ad\uff1a\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684 \u6240\u6709\u4e09\u5143\u7ec4\u5747\u4e3aInactive Paths\uff0c\u5219\u4e24\u4e2a\u8282\u70b9\u4ee3\u8868\u7684\u968f\u673a\u53d8\u91cf\u6761\u4ef6\u72ec\u7acb \u793a\u4f8b\uff1a \u4e0d\u540c\u7684\u8d1d\u53f6\u65af\u7f51\u7edc\u53ef\u80fd\u6307\u5411\u76f8\u540c\u7684\u72ec\u7acb\u6027\uff1a \u4e00\u4e2a\u8d1d\u53f6\u65af\u7f51\u7edc\u53ef\u80fd \u4e0d\u5b58\u5728\u4efb\u4f55\u72ec\u7acb\u6027 \uff1a","title":"\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u6761\u4ef6\u72ec\u7acb(Conditional Indenpendence)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#probabilistic-inference","text":"Inference\uff1a\u4ece\u4e00\u4e2a\u8054\u5408\u5206\u5e03\u6982\u7387\u6a21\u578b\u4e2d\u8ba1\u7b97\u5176\u4ed6\u60f3\u8981\u7684\u6982\u7387","title":"\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u63a8\u5bfc(Probabilistic Inference)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#inference-by-enumeration","text":"- \u6b65\u9aa4\uff1a - Select the entries consistent with the evidence - Sum out H to get joint of Query and evidence\uff08 Marginalize ) - Normalize - \u6848\u4f8b\uff1a","title":"\u679a\u4e3e\u63a8\u7406(Inference by Enumeration)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#variable-elimination","text":"\u5728\u679a\u4e3e\u63a8\u7406\u4e2d\uff0c\u5728\u53bb\u9664\u5176\u4ed6\u9690\u53d8\u91cf\u4e4b\u524d\uff0c\u52a0\u5165\u4e86\u5b8c\u6574\u7684\u8054\u5408\u5206\u5e03\u6982\u7387\uff0c\u5bfc\u81f4 \u679a\u4e3e\u63a8\u7406\u8fd0\u884c\u6548\u7387\u4f4e \u53d8\u91cf\u5254\u9664\uff1a\u4ea4\u53c9\u52a0\u5165\u5e76\u4e14\u5373\u65f6\u8fdb\u884c\u8fb9\u7f18\u5316\u64cd\u4f5c","title":"\u53d8\u91cf\u5254\u9664\uff08Variable Elimination\uff09"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#factors","text":"Joint Distribution :$P(X,Y)$ \u548c\u4e3a1 \u5305\u542b\u4e86x\uff0cy\u7684\u6240\u6709\u6761\u76ee Selected Joint \uff1a$P(x,Y)$ \u8054\u5408\u6982\u7387\u5206\u5e03\u7684\u4e00\u90e8\u5206 \u5305\u542b\u56fa\u5b9a\u7684x\uff0c\u6240\u6709\u7684y\u7684\u6761\u76ee \u548c\u4e3a$P(x)$ \u5927\u5199\u5b57\u6bcd\u7684\u6570\u91cf=\u8868\u7684\u7ef4\u5ea6\u6570 Single Conditional \uff1a$P(Y|x)$ $x$\u6761\u4ef6\u4e0b\u7684\u6240\u6709$P(y|x)$ \u548c\u4e3a1 Family of conditionals \uff1a$P(Y|X)$ \u6240\u6709\u7684$P(y|x)$\u6761\u76ee \u548c\u4e3a$|X|$ Specified Family \uff1a$P(y|X)$ \u56fa\u5b9a$y$\u7684\u6240\u6709$P(y|x)$\u6761\u76ee","title":"\u56e0\u5b50\uff08Factors\uff09"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#_3","text":"","title":"\u4e24\u79cd\u65b9\u6848\u5bf9\u6bd4"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#inference-by-enumeration_1","text":"Join all factors $$\\forall r,t:P(r,t)=P(r)\u00b7P(t|r)$$ - Eliminate","title":"Inference by Enumeration"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#variable-elimination_1","text":"- \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u5254\u9664\u7684\u987a\u5e8f\u4f1a\u6781\u5927\u5f71\u54cd\u8ba1\u7b97\u7684\u590d\u6742\u5ea6 - \u6848\u4f8b\uff1a 1. \u6cd5\u4e00\uff1a","title":"Variable Elimination"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#sampling","text":"\u53d6\u6837(Sampling)\uff1a\u53d6\u6837\u662f\u4e00\u4e2a\u91cd\u590d\u6a21\u62df\u7684\u8fc7\u7a0b \u57fa\u672c\u601d\u8def\uff1a \u4ece\u53d6\u6837\u7684\u5206\u5e03S\u4e2d\u62bd\u53d6N\u4e2a\u6837\u672c \u8ba1\u7b97 \u8fd1\u4f3c \u7684\u6982\u7387 \u6536\u655b\u81f3\u6b63\u786e\u7684\u6982\u7387 \u610f\u4e49\uff1a \u5b66\u4e60\uff1a\u4ece\u4e0d\u77e5\u9053\u7684\u5206\u5e03\u4e2d\u83b7\u5f97\u6837\u672c \u63a8\u65ad\uff1a\u83b7\u5f97\u6837\u672c\u6bd4\u76f4\u63a5\u8ba1\u7b97\u6b63\u786e\u7684\u6982\u7387\u8981\u5feb","title":"\u8d1d\u53f6\u65af\u7f51\u7edc\uff1a\u53d6\u6837(Sampling)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#prior-sampling","text":"- \u4ea7\u751f\u5404\u4e2a\u6837\u672c\u7684\u6982\u7387\u4e3a\uff1a$$S_{PS}(x_1...x_n)=\\prod^n_{i=1}P(x_i|Parents(X_i))=P(x_1...x_n)$$ - \u5f53\u6837\u672c\u6570\u91cf\u8db3\u591f\u591a\u540e\uff0c\u83b7\u5f97\u7684\u6982\u7387\u5c31\u4f1a\u6536\u655b\u4e8e\u771f\u5b9e\u503c - \u6848\u4f8b\uff1a","title":"Prior Sampling"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#rejection-sampling","text":"\u5982\u679c\u6709\u4e00\u4e2a\u9884\u5148\u786e\u5b9a\u597d\u7684evidence\uff0c\u5728\u9009\u62e9\u91c7\u6837\u7ed3\u679c\u65f6\uff0c\u53ef\u4ee5\u5ffd\u7565\u4e0d\u7b26\u5408evidence\u7684\u6837\u672c \u95ee\u9898\uff1a \u5f53evidence\u51e0\u4e4e\u4e0d\u53ef\u80fd\u65f6\uff0c\u4f1a\u62d2\u7edd\u5927\u91cf\u7684\u6837\u672c\uff0c\u4ea7\u751f\u5927\u91cf\u65e0\u7528\u7684\u6837\u672c \u5728\u53d6\u6837\u65f6\uff0cevidence\u5e76\u6ca1\u6709\u88ab\u5229\u7528","title":"Rejection Sampling"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#likelihood-weighting","text":"\u601d\u8def\uff1a\u5904\u7406evidence\uff0c\u8ba9\u6240\u6709\u7684\u6837\u672c\u90fd\u7b26\u5408evidence weight bt probability of evidence given parents \u9488\u5bf9z\u53d6\u6837\uff0ce\u4e3aevidence$$\\begin{aligned} S_{WS}(z,e)=\\prod^l_{i=1}P(z_i|Parents(Z_i)) \\ w(z,e)=\\prod^m_{i=1}P(e_i|Parents(E_i)) \\ P(z,e)=S_{WS}(z,e)\u00b7w(z,e) \\end{aligned}$$ \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u8003\u8651\u4e86evidence \u66f4\u597d\u7684\u53cd\u6620\u4e86\u5728evidence\u5f71\u54cd\u4e0b\u7684\u4e16\u754c \u7f3a\u70b9\uff1a evidence\u53ef\u80fd\u4f1a\u5f71\u54cd\u4e0b\u6e38\u7684\u968f\u673a\u53d8\u91cf\u7684\u9009\u62e9\uff0c\u5bfc\u81f4\u51fa\u73b0\u9519\u8bef\u7684\u7ed3\u679c","title":"Likelihood Weighting"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C%28Bayesian%20Network%29/#gibbs-sampling","text":"\u6b65\u9aa4\uff1a \u786e\u5b9aevidence \u521d\u59cb\u5316\u5176\u4ed6\u968f\u673a\u53d8\u91cf\uff08\u968f\u673a\u521d\u59cb\u5316\uff09 \u91cd\u590d\uff1a \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u975eevidence\u53d8\u91cf$X$ \u4ece$P(X|all\\ other\\ variables)$\u4e2d\u53d6\u6837","title":"Gibbs Sampling"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/","text":"\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Hidden Markov Models-HMMs) \u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Markov Models-MMs) \u5f15\u5165\u4e86\u65f6\u95f4\uff08\u6216\u7a7a\u95f4\uff09\u7684\u6982\u5ff5 \u5c5e\u6027\uff1a \u72b6\u6001(State)\uff1a\u5728\u65f6\u95f4$t$\u65f6$X$\u7684\u503c$X_t$ \u53c2\u6570(Parameters)\uff1a\u72b6\u6001\u8f6c\u79fb\u7684\u6982\u7387 \u7a33\u5b9a\u6027\u5047\u8bbe(Stationary assumption)\uff1a\u5728\u4efb\u610f\u65f6\u95f4\uff0c\u8f6c\u53f0\u8f6c\u79fb\u51fd\u6570\u603b\u662f\u76f8\u540c\u7684 \u4e0eMDP\u76f8\u6bd4\uff0c\u6ca1\u6709\u884c\u52a8(Action)\u7684\u9009\u62e9 \u6761\u4ef6\u72ec\u7acb\u6027\uff1a $Past\\perp!!!\\perp Future | Present$ \u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u53ea\u53d6\u51b3\u4e8e\u524d\u4e00\u4e2a\u72b6\u6001\uff08\u4e00\u9636\u9a6c\u5c14\u53ef\u592b\u6027\uff09 \u6848\u4f8b\uff1a \u521d\u59cb\u5316\u5206\u5e03\uff1a sun\uff1a1.0 rain\uff1a0.0 \u4e0b\u4e00\u6b65\u7684\u8ba1\u7b97$P(X_2=sun)=P(X_2=sun|X_1=sun)P(X_1=sun)+P(X_2=sun|X_1=rain)P(X_1=rain)=0.9\u00b71.0+0.1\u00b70.0=0.9$ $P(X_2=rain)=P(X_2=rain|X_1=sun)P(X_1=sun)+P(X_2=rain|X_1=rain)P(X_1=rain)=0.1\u00b71+0.7\u00b70.0=0.1$ Mini-Forward Algorithm \uff1a$P(x_t)=\\sum_{w_i}Pr(w_i,W_{i+1})=\\sum_{x_t-1}P(x_t|x_{t-1})P(x_{t-1})$ \u9010\u6e10\u6536\u655b\u81f3\u6b63\u786e\u7684\u503c Staionary Distribution\uff1a \u5bf9\u4e8e\u5927\u591a\u6570\u7684\u9a6c\u5c14\u53ef\u592b\u94fe\uff0c\u521d\u59cb\u72b6\u6001\u7684\u5f71\u54cd\u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u5e76\u4e14\u6700\u7ec8\u72b6\u6001\u4e0e\u521d\u59cb\u72b6\u6001\u65e0\u5173\uff0c\u6ee1\u8db3$P_\\infty(X)=P_{\\infty+1}(X)=\\sum_xP(X|x)P_\\infty(x)$ \u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Hidden Markov Models-HMMs) \u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\uff1a \u72b6\u6001X\u4e0a\u7684\u57fa\u7840\u9a6c\u5c14\u53ef\u592b\u94fe \u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u4ec5\u80fd \u89c2\u5bdf\u5230\u8f93\u51fa \uff08\u5f71\u54cd\uff09 \u5305\u542b\uff1a \u521d\u59cb\u5206\u5e03$P(X_1)$ \u72b6\u6001\u8f6c\u79fb$P(X_t|X_{t-1})$ \u4e0e\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u4e00\u6837\uff0c\u662f\u7a33\u5b9a\u7684 \u5f71\u54cd$P(E_t|X_t)$ \u7a33\u5b9a\u7684 \u6761\u4ef6\u72ec\u7acb\u6027\uff1a \u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u672a\u6765\u53ea\u53d6\u51b3\u4e8e\u73b0\u5728 \u89c2\u6d4b\u7684\u7ed3\u679c\u53ea\u53d6\u51b3\u4e8e\u5f53\u524d\u7684\u72b6\u6001 \u4e0d\u540c\u65f6\u95f4\u6b65\u83b7\u5f97\u7684\u89c2\u6d4b\u7ed3\u679c(evidence)\u4e4b\u95f4\u5e76\u975e\u72ec\u7acb<-\u4e4b\u95f4\u7531\u9690\u542b\u7684\u72b6\u6001\u76f8\u5173\u8054 \u5e94\u7528\uff1a \u8bed\u97f3\u8bc6\u522b \u7ffb\u8bd1 \u673a\u5668\u4eba\u8ffd\u8e2a Belief Distribution time i with all evidence $f_1,f_2,...,f_i$\uff1a$B(W_i)=Pr(W_i|f_1,f_2,...,f_i)=Pr(W_i|f_{1:i})$ time i with all evidence $f_1,f_2,...,f_{i-1}$\uff1a$B^\\prime(W_i)=Pr(W_i|f_1,f_2,...,f_{i-1})=Pr(W_i|f_{1:i-1})$ \u524d\u5411\u7b97\u6cd5(The Forward Algorithm) Time Elapse Update(\u7531$B(W_i)$\u786e\u5b9a$B^\\prime(W_{i+1})$) \u5173\u952e\uff1a\u65f6\u95f4\u6b65 \u63a8\u5bfc\uff1a $B(W_i)$\u4e0e$B(W_{i+1})$\u7684\u5173\u7cfb(\u65b9\u6cd5\uff1amini-forward algorithm)$$B^\\prime(W_{i+1})=Pr(W_{i+1}|f_{1:i})=\\sum_{w_i}Pr(W_{i+1}|w_i,f_{1:i})Pr(w_i|f_{1:i})$$ $B(W_i)=Pr(W_i|f_1,f_2,...,f_i)=Pr(W_i|f_{1:i})$ && $W_{i+1}\\perp!!!\\perp f_{1:i}|W_i$\uff1a$$B^\\prime(W_{i+1})=\\sum_{w_i}Pr(W_{i+1}|w_i)B(w_i)$$ \u6848\u4f8b\uff1a Observation Update(\u7531$B^\\prime(W_{i+1})$\u786e\u5b9a$B(W_{i+1})$) \u5173\u952e\uff1a\u89c2\u5bdfevidence\u524d\u540e \u63a8\u5bfc\uff1a $B(W_{i+1})$(\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af)$$B(W_{i+1})=Pr(W_{i+1}|f_{1:i+1})=\\frac{Pr(W_{i+1},f_{i+1}|f_{1:i})}{Pr(f_{i+1}|f_{1:i})}$$ \u5bf9\u4e8e\u4efb\u610f\u7684$B(W_{i+1})$\uff0c$Pr(f_{i+1}|f_{1:i})$\u4e3a\u5e38\u6570$$B(W_{i+1})\\propto Pr(W_{i+1},f_{i+1}|f_{1:i})$$ \u94fe\u5f0f\u6cd5\u5219\uff1a$$B(W_{i+1})\\propto Pr(W_{i+1},f_{i+1}|f_{1:i})=Pr(f_{i+1}|W_{i+1},f_{1:i})Pr(W_{i+1}|f_{1:i})$$ $B^\\prime(W_i)=Pr(W_i|f_1,f_2,...,f_{i-1})=Pr(W_i|f_{1:i-1})$ $$B(W_{i+1})\\propto Pr(f_{i+1}|W_{i+1})B^\\prime(W_{i+1})$$ \u6839\u636e\u524d\u5411\u7b97\u6cd5\uff1a$$B(W_{i+1})\\propto Pr(f_{i+1}|W_{i+1})\\sum_{w_i}Pr(W_{i+1}|w_i)B(w_i)$$ \u6848\u4f8b\uff1a \u7ed3\u5408\uff1a \u5e94\u7528\uff1a\u7c92\u5b50\u6ee4\u6ce2(Particle Filtering) \u6ee4\u6ce2(Filtering)\uff1a\u8fd1\u4f3c\u7684\u89e3\u51b3\u65b9\u6cd5 \u7c92\u5b50(Particle)\uff1a\u5373\u6837\u672c\u7684\u53e6\u4e00\u79cd\u79f0\u547c \u7cbe\u786e\u63a8\u7406\u5b58\u5728\u7684\u7f3a\u9677\uff1a \u72b6\u6001\u6570\u91cf\u8fc7\u591a\u800c\u96be\u4ee5\u5b58\u50a8B(X) \u89e3\u51b3\u65b9\u6cd5\uff1a\u8fd1\u4f3c\u63a8\u7406(Approximate Inference) \u5b58\u50a8\u7c92\u5b50\u800c\u975e\u72b6\u6001\uff0c\u5e76\u4e14\u5b58\u50a8\u5927\u91cf\u7684\u7c92\u5b50\uff0c\u6bcf\u4e00\u4e2a\u7c92\u5b50\u4ee3\u8868\u4e00\u4e2a\u72b6\u6001 $n\\ll d$ n\uff1athe number of particles d\uff1athe number of possible states \u4f7f\u7528$P(x)$\u8fd1\u4f3c\u7684\u4ee3\u8868\u503c\u4e3ax\u7684\u7c92\u5b50\u6570\uff0c\u5373$B(x)$\u5b8c\u5168\u53d6\u51b3\u4e8e\u72b6\u6001x\u4e0a\u7c92\u5b50\u7684\u6570\u91cf \u7c92\u5b50\u6ee4\u6ce2\u6a21\u62df(Particle Filtering Simulation) \u521d\u59cb\u5316\u65b9\u6cd5\uff1a \u4efb\u610f\u521d\u59cb\u5316 \u7edf\u4e00\u521d\u59cb\u5316 \u6839\u636e\u521d\u59cb\u5316\u6982\u7387\u8fdb\u884c\u521d\u59cb\u5316 \u4e24\u4e2a\u66f4\u65b0\u65b9\u6cd5\uff1a Time Elapse Update \u6839\u636e\u72b6\u6001\u8f6c\u79fb\u6a21\u578b\u8fdb\u884c\u66f4\u65b0$Pr(T_{i+1}|t_i)$ Observation Update \u4f7f\u7528\u611f\u77e5\u6a21\u578b$Pr(F_i|T_i)$\u6765\u8bc4\u4f30\u7c92\u5b50 \u8fc7\u7a0b\uff1a \u8ba1\u7b97\u6240\u6709\u7c92\u5b50\u7684\u6743\u91cd \u8ba1\u7b97\u603b\u6743\u91cd $total\\ weight = 0$\uff1a\u5219\u91cd\u65b0\u8fdb\u884c\u521d\u59cb\u5316 $total\\ weight \\ne 0$\uff1a\u5f52\u4e00\u5316\u5e76\u4e14\u518d\u53d6\u6837 \u91cd\u590d\u8ba1\u7b97\uff0c\u76f4\u5230\u5206\u5e03\u6536\u655b","title":"\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Hidden Markov Models-HMMs)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#hidden-markov-models-hmms","text":"","title":"\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Hidden Markov Models-HMMs)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#markov-models-mms","text":"\u5f15\u5165\u4e86\u65f6\u95f4\uff08\u6216\u7a7a\u95f4\uff09\u7684\u6982\u5ff5 \u5c5e\u6027\uff1a \u72b6\u6001(State)\uff1a\u5728\u65f6\u95f4$t$\u65f6$X$\u7684\u503c$X_t$ \u53c2\u6570(Parameters)\uff1a\u72b6\u6001\u8f6c\u79fb\u7684\u6982\u7387 \u7a33\u5b9a\u6027\u5047\u8bbe(Stationary assumption)\uff1a\u5728\u4efb\u610f\u65f6\u95f4\uff0c\u8f6c\u53f0\u8f6c\u79fb\u51fd\u6570\u603b\u662f\u76f8\u540c\u7684 \u4e0eMDP\u76f8\u6bd4\uff0c\u6ca1\u6709\u884c\u52a8(Action)\u7684\u9009\u62e9 \u6761\u4ef6\u72ec\u7acb\u6027\uff1a $Past\\perp!!!\\perp Future | Present$ \u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u53ea\u53d6\u51b3\u4e8e\u524d\u4e00\u4e2a\u72b6\u6001\uff08\u4e00\u9636\u9a6c\u5c14\u53ef\u592b\u6027\uff09 \u6848\u4f8b\uff1a \u521d\u59cb\u5316\u5206\u5e03\uff1a sun\uff1a1.0 rain\uff1a0.0 \u4e0b\u4e00\u6b65\u7684\u8ba1\u7b97$P(X_2=sun)=P(X_2=sun|X_1=sun)P(X_1=sun)+P(X_2=sun|X_1=rain)P(X_1=rain)=0.9\u00b71.0+0.1\u00b70.0=0.9$ $P(X_2=rain)=P(X_2=rain|X_1=sun)P(X_1=sun)+P(X_2=rain|X_1=rain)P(X_1=rain)=0.1\u00b71+0.7\u00b70.0=0.1$ Mini-Forward Algorithm \uff1a$P(x_t)=\\sum_{w_i}Pr(w_i,W_{i+1})=\\sum_{x_t-1}P(x_t|x_{t-1})P(x_{t-1})$ \u9010\u6e10\u6536\u655b\u81f3\u6b63\u786e\u7684\u503c Staionary Distribution\uff1a \u5bf9\u4e8e\u5927\u591a\u6570\u7684\u9a6c\u5c14\u53ef\u592b\u94fe\uff0c\u521d\u59cb\u72b6\u6001\u7684\u5f71\u54cd\u4f1a\u8d8a\u6765\u8d8a\u5c0f\uff0c\u5e76\u4e14\u6700\u7ec8\u72b6\u6001\u4e0e\u521d\u59cb\u72b6\u6001\u65e0\u5173\uff0c\u6ee1\u8db3$P_\\infty(X)=P_{\\infty+1}(X)=\\sum_xP(X|x)P_\\infty(x)$","title":"\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Markov Models-MMs)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#hidden-markov-models-hmms_1","text":"\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\uff1a \u72b6\u6001X\u4e0a\u7684\u57fa\u7840\u9a6c\u5c14\u53ef\u592b\u94fe \u6bcf\u4e00\u4e2a\u65f6\u95f4\u6b65\u4ec5\u80fd \u89c2\u5bdf\u5230\u8f93\u51fa \uff08\u5f71\u54cd\uff09 \u5305\u542b\uff1a \u521d\u59cb\u5206\u5e03$P(X_1)$ \u72b6\u6001\u8f6c\u79fb$P(X_t|X_{t-1})$ \u4e0e\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u4e00\u6837\uff0c\u662f\u7a33\u5b9a\u7684 \u5f71\u54cd$P(E_t|X_t)$ \u7a33\u5b9a\u7684 \u6761\u4ef6\u72ec\u7acb\u6027\uff1a \u9a6c\u5c14\u53ef\u592b\u6027\uff1a\u672a\u6765\u53ea\u53d6\u51b3\u4e8e\u73b0\u5728 \u89c2\u6d4b\u7684\u7ed3\u679c\u53ea\u53d6\u51b3\u4e8e\u5f53\u524d\u7684\u72b6\u6001 \u4e0d\u540c\u65f6\u95f4\u6b65\u83b7\u5f97\u7684\u89c2\u6d4b\u7ed3\u679c(evidence)\u4e4b\u95f4\u5e76\u975e\u72ec\u7acb<-\u4e4b\u95f4\u7531\u9690\u542b\u7684\u72b6\u6001\u76f8\u5173\u8054 \u5e94\u7528\uff1a \u8bed\u97f3\u8bc6\u522b \u7ffb\u8bd1 \u673a\u5668\u4eba\u8ffd\u8e2a Belief Distribution time i with all evidence $f_1,f_2,...,f_i$\uff1a$B(W_i)=Pr(W_i|f_1,f_2,...,f_i)=Pr(W_i|f_{1:i})$ time i with all evidence $f_1,f_2,...,f_{i-1}$\uff1a$B^\\prime(W_i)=Pr(W_i|f_1,f_2,...,f_{i-1})=Pr(W_i|f_{1:i-1})$","title":"\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b(Hidden Markov Models-HMMs)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#the-forward-algorithm","text":"Time Elapse Update(\u7531$B(W_i)$\u786e\u5b9a$B^\\prime(W_{i+1})$) \u5173\u952e\uff1a\u65f6\u95f4\u6b65 \u63a8\u5bfc\uff1a $B(W_i)$\u4e0e$B(W_{i+1})$\u7684\u5173\u7cfb(\u65b9\u6cd5\uff1amini-forward algorithm)$$B^\\prime(W_{i+1})=Pr(W_{i+1}|f_{1:i})=\\sum_{w_i}Pr(W_{i+1}|w_i,f_{1:i})Pr(w_i|f_{1:i})$$ $B(W_i)=Pr(W_i|f_1,f_2,...,f_i)=Pr(W_i|f_{1:i})$ && $W_{i+1}\\perp!!!\\perp f_{1:i}|W_i$\uff1a$$B^\\prime(W_{i+1})=\\sum_{w_i}Pr(W_{i+1}|w_i)B(w_i)$$ \u6848\u4f8b\uff1a Observation Update(\u7531$B^\\prime(W_{i+1})$\u786e\u5b9a$B(W_{i+1})$) \u5173\u952e\uff1a\u89c2\u5bdfevidence\u524d\u540e \u63a8\u5bfc\uff1a $B(W_{i+1})$(\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af)$$B(W_{i+1})=Pr(W_{i+1}|f_{1:i+1})=\\frac{Pr(W_{i+1},f_{i+1}|f_{1:i})}{Pr(f_{i+1}|f_{1:i})}$$ \u5bf9\u4e8e\u4efb\u610f\u7684$B(W_{i+1})$\uff0c$Pr(f_{i+1}|f_{1:i})$\u4e3a\u5e38\u6570$$B(W_{i+1})\\propto Pr(W_{i+1},f_{i+1}|f_{1:i})$$ \u94fe\u5f0f\u6cd5\u5219\uff1a$$B(W_{i+1})\\propto Pr(W_{i+1},f_{i+1}|f_{1:i})=Pr(f_{i+1}|W_{i+1},f_{1:i})Pr(W_{i+1}|f_{1:i})$$ $B^\\prime(W_i)=Pr(W_i|f_1,f_2,...,f_{i-1})=Pr(W_i|f_{1:i-1})$ $$B(W_{i+1})\\propto Pr(f_{i+1}|W_{i+1})B^\\prime(W_{i+1})$$ \u6839\u636e\u524d\u5411\u7b97\u6cd5\uff1a$$B(W_{i+1})\\propto Pr(f_{i+1}|W_{i+1})\\sum_{w_i}Pr(W_{i+1}|w_i)B(w_i)$$ \u6848\u4f8b\uff1a \u7ed3\u5408\uff1a","title":"\u524d\u5411\u7b97\u6cd5(The Forward Algorithm)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#particle-filtering","text":"\u6ee4\u6ce2(Filtering)\uff1a\u8fd1\u4f3c\u7684\u89e3\u51b3\u65b9\u6cd5 \u7c92\u5b50(Particle)\uff1a\u5373\u6837\u672c\u7684\u53e6\u4e00\u79cd\u79f0\u547c \u7cbe\u786e\u63a8\u7406\u5b58\u5728\u7684\u7f3a\u9677\uff1a \u72b6\u6001\u6570\u91cf\u8fc7\u591a\u800c\u96be\u4ee5\u5b58\u50a8B(X) \u89e3\u51b3\u65b9\u6cd5\uff1a\u8fd1\u4f3c\u63a8\u7406(Approximate Inference) \u5b58\u50a8\u7c92\u5b50\u800c\u975e\u72b6\u6001\uff0c\u5e76\u4e14\u5b58\u50a8\u5927\u91cf\u7684\u7c92\u5b50\uff0c\u6bcf\u4e00\u4e2a\u7c92\u5b50\u4ee3\u8868\u4e00\u4e2a\u72b6\u6001 $n\\ll d$ n\uff1athe number of particles d\uff1athe number of possible states \u4f7f\u7528$P(x)$\u8fd1\u4f3c\u7684\u4ee3\u8868\u503c\u4e3ax\u7684\u7c92\u5b50\u6570\uff0c\u5373$B(x)$\u5b8c\u5168\u53d6\u51b3\u4e8e\u72b6\u6001x\u4e0a\u7c92\u5b50\u7684\u6570\u91cf","title":"\u5e94\u7528\uff1a\u7c92\u5b50\u6ee4\u6ce2(Particle Filtering)"},{"location":"MachineLearning/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%88Reinforce%20Learning%EF%BC%89/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%28HMMs%29/#particle-filtering-simulation","text":"\u521d\u59cb\u5316\u65b9\u6cd5\uff1a \u4efb\u610f\u521d\u59cb\u5316 \u7edf\u4e00\u521d\u59cb\u5316 \u6839\u636e\u521d\u59cb\u5316\u6982\u7387\u8fdb\u884c\u521d\u59cb\u5316 \u4e24\u4e2a\u66f4\u65b0\u65b9\u6cd5\uff1a Time Elapse Update \u6839\u636e\u72b6\u6001\u8f6c\u79fb\u6a21\u578b\u8fdb\u884c\u66f4\u65b0$Pr(T_{i+1}|t_i)$ Observation Update \u4f7f\u7528\u611f\u77e5\u6a21\u578b$Pr(F_i|T_i)$\u6765\u8bc4\u4f30\u7c92\u5b50 \u8fc7\u7a0b\uff1a \u8ba1\u7b97\u6240\u6709\u7c92\u5b50\u7684\u6743\u91cd \u8ba1\u7b97\u603b\u6743\u91cd $total\\ weight = 0$\uff1a\u5219\u91cd\u65b0\u8fdb\u884c\u521d\u59cb\u5316 $total\\ weight \\ne 0$\uff1a\u5f52\u4e00\u5316\u5e76\u4e14\u518d\u53d6\u6837 \u91cd\u590d\u8ba1\u7b97\uff0c\u76f4\u5230\u5206\u5e03\u6536\u655b","title":"\u7c92\u5b50\u6ee4\u6ce2\u6a21\u62df(Particle Filtering Simulation)"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/","text":"\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u653b\u7565 \u8bad\u7ec3\u6570\u636e \u635f\u5931(loss)\u5927 \u6a21\u578b\u504f\u5dee\uff1a \u539f\u56e0\uff1a\u6a21\u578b\u592a\u8fc7\u7b80\u5355 \u91cd\u65b0\u8bbe\u8ba1\u6a21\u578b\uff0c\u4f7f\u6a21\u578b\u590d\u6742\uff0c\u8ba9\u6a21\u578b\u62e5\u6709\u66f4\u5927\u7684\u5f39\u6027 \u4f18\u5316(optimization) \u539f\u56e0\uff1a\u4ec5\u4ec5\u627e\u5230\u4e86\u5c40\u90e8\u6700\u5c0f\u503c \u5982\u4f55\u5206\u8fa8\u662f\u6a21\u578b\u504f\u5dee\u95ee\u9898\u8fd8\u662f\u4f18\u5316\u95ee\u9898\uff1f \u6bd4\u8f83\u4e0d\u540c\u7684\u6a21\u578b \u6d4b\u8bd5\u6570\u636e \u635f\u5931(loss)\u5927 \u8fc7\u62df\u5408(overfitting) \u6982\u5ff5\uff1a\u8bad\u7ec3\u6570\u636e\u8868\u73b0\u826f\u597d\uff0c\u6d4b\u8bd5\u6570\u636e\u8868\u73b0\u5dee \u65b9\u6848\uff1a \u66f4\u591a\u7684\u6d4b\u8bd5\u6570\u636e \u6570\u636e\u6269\u5145\uff08\u4e00\u53d8\u591a\uff09 \u9650\u5236\u6a21\u578b \u4f7f\u7528\u8f83\u5c11\u7684\u53c2\u6570 \u4f7f\u7528\u8f83\u5c11\u7684\u7279\u5f81 \u63d0\u524d\u7ed3\u675f\u8bad\u7ec3\uff08\u6a21\u578b\u8fdb\u6b65\u5c0f\uff09 Dropout \u5171\u7528\u53c2\u6570\uff08\u9650\u5236\u6a21\u578b\uff09 \u4e0d\u5339\u914d","title":"\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u653b\u7565"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/#_1","text":"","title":"\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u653b\u7565"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/#_2","text":"","title":"\u8bad\u7ec3\u6570\u636e"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/#loss","text":"\u6a21\u578b\u504f\u5dee\uff1a \u539f\u56e0\uff1a\u6a21\u578b\u592a\u8fc7\u7b80\u5355 \u91cd\u65b0\u8bbe\u8ba1\u6a21\u578b\uff0c\u4f7f\u6a21\u578b\u590d\u6742\uff0c\u8ba9\u6a21\u578b\u62e5\u6709\u66f4\u5927\u7684\u5f39\u6027 \u4f18\u5316(optimization) \u539f\u56e0\uff1a\u4ec5\u4ec5\u627e\u5230\u4e86\u5c40\u90e8\u6700\u5c0f\u503c \u5982\u4f55\u5206\u8fa8\u662f\u6a21\u578b\u504f\u5dee\u95ee\u9898\u8fd8\u662f\u4f18\u5316\u95ee\u9898\uff1f \u6bd4\u8f83\u4e0d\u540c\u7684\u6a21\u578b","title":"\u635f\u5931(loss)\u5927"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/#_3","text":"","title":"\u6d4b\u8bd5\u6570\u636e"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1%E6%94%BB%E7%95%A5/#loss_1","text":"\u8fc7\u62df\u5408(overfitting) \u6982\u5ff5\uff1a\u8bad\u7ec3\u6570\u636e\u8868\u73b0\u826f\u597d\uff0c\u6d4b\u8bd5\u6570\u636e\u8868\u73b0\u5dee \u65b9\u6848\uff1a \u66f4\u591a\u7684\u6d4b\u8bd5\u6570\u636e \u6570\u636e\u6269\u5145\uff08\u4e00\u53d8\u591a\uff09 \u9650\u5236\u6a21\u578b \u4f7f\u7528\u8f83\u5c11\u7684\u53c2\u6570 \u4f7f\u7528\u8f83\u5c11\u7684\u7279\u5f81 \u63d0\u524d\u7ed3\u675f\u8bad\u7ec3\uff08\u6a21\u578b\u8fdb\u6b65\u5c0f\uff09 Dropout \u5171\u7528\u53c2\u6570\uff08\u9650\u5236\u6a21\u578b\uff09 \u4e0d\u5339\u914d","title":"\u635f\u5931(loss)\u5927"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/","text":"\u7c7b\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3 \u5c40\u90e8\u6700\u5c0f\u4e0e\u9a6c\u978d\u70b9(Local Minimum and Saddle Point) \u5f53\u68af\u5ea6\u5c0f\u65f6\uff0c\u53ef\u80fd\u88ab\u56f0\u5728\u7684\u70b9(critical point)\u662f \u5c40\u90e8\u6700\u5c0f \u9a6c\u978d\u70b9 \u6279\u91cf\u4e0e\u52a8\u91cf(Batch and Momentum) Batch \u5728\u66f4\u65b0\u53c2\u6570\u65f6\uff0c\u5e76\u4e0d\u662f\u4e00\u6b21\u5bf9\u6240\u6709\u7684\u6570\u636e\u7b97\u51fa\u540e\uff0c\u518d\u66f4\u65b0\u53c2\u6570\uff0c\u800c\u662f\u5c06\u6240\u6709\u7684\u6570\u636e\u5206\u6210\u591a\u4efd\uff0c\u5bf9\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u66f4\u65b0 \u5bf9\u4e8e\u5904\u7406\u7684\u65f6\u95f4\uff1a \u7531\u4e8e\u4f7f\u7528GPU\u7684 \u5e73\u884c\u8fd0\u7b97 \u8fdb\u884c\u673a\u5668\u5b66\u4e60\uff0c\u5728\u65f6\u95f4\u4e0a\uff0c\u4e00\u6b21\u5904\u7406\u591a\u4e2a\u6570\u636e\u66f4\u52a0\u9ad8\u6548 Noisy\u7684Gradient\u53ef\u4ee5\u5e2e\u52a9\u8bad\u7ec3 \u7eb5\u8f74\u4ee3\u8868\u7cbe\u786e\u5ea6 \u6a2a\u8f74\u4ee3\u8868Batch Size \u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\uff1a Full Batch\uff1a\u5728\u68af\u5ea6\u4e3a0\u7684\u70b9\uff08local minimum/saddle point\uff09\u505c\u4e0b\u540e\uff0c\u65e0\u6cd5\u7ee7\u7eed\u66f4\u65b0 Small Batch\uff1a\u4e0d\u540c\u7684Batch\u7b97\u51fa\u6765\u7684Loss Function\u4e0d\u540c\uff0c\u53ef\u80fd\u5728\u524d\u4e00\u4e2aBatch\u5361\u4f4f\uff0c\u540e\u4e00\u4e2aBatch\u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97 Momentum(\u52a8\u91cf) \u5229\u7528\u524d\u4e00\u4e2a\u8ba1\u7b97\u51fa\u7684\u68af\u5ea6\uff0c\u63d0\u4f9b\u4e00\u5b9a\u7684\u60ef\u6027\uff08\u5728\u4e0b\u4e00\u6b21\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u4e0e\u5176\u8fdb\u884c\u5408\u6210\uff0c\u624d\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u68af\u5ea6\uff09\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u51b2\u51fa\u5c40\u90e8\u6700\u5c0f(local minimum) \u81ea\u9002\u5e94\u5b66\u4e60\u7387(Adaptive Learning Rate) \u51fa\u73b0\u95ee\u9898\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \u5728\u201c\u5ce1\u8c37\u201d\u4e24\u8fb9\u6765\u56de \u201c\u5e73\u539f\u201d\u5904\u66f4\u65b0\u7f13\u6162 \u81ea\u9002\u5e94\u7684\u5b66\u4e60\u7387\uff1a\u5728\u5e73\u5766\u7684\u5730\u65b9\uff0c\u5b66\u4e60\u7387\u5927\uff1b\u5728\u9661\u5ced\u7684\u5730\u65b9\uff0c\u5b66\u4e60\u7387\u5c0f \u5bf9\u4e8eLoss Function\u7684\u9009\u62e9","title":"\u7c7b\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#_1","text":"","title":"\u7c7b\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#local-minimum-and-saddle-point","text":"\u5f53\u68af\u5ea6\u5c0f\u65f6\uff0c\u53ef\u80fd\u88ab\u56f0\u5728\u7684\u70b9(critical point)\u662f \u5c40\u90e8\u6700\u5c0f \u9a6c\u978d\u70b9","title":"\u5c40\u90e8\u6700\u5c0f\u4e0e\u9a6c\u978d\u70b9(Local Minimum and Saddle Point)"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#batch-and-momentum","text":"","title":"\u6279\u91cf\u4e0e\u52a8\u91cf(Batch and Momentum)"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#batch","text":"\u5728\u66f4\u65b0\u53c2\u6570\u65f6\uff0c\u5e76\u4e0d\u662f\u4e00\u6b21\u5bf9\u6240\u6709\u7684\u6570\u636e\u7b97\u51fa\u540e\uff0c\u518d\u66f4\u65b0\u53c2\u6570\uff0c\u800c\u662f\u5c06\u6240\u6709\u7684\u6570\u636e\u5206\u6210\u591a\u4efd\uff0c\u5bf9\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u66f4\u65b0 \u5bf9\u4e8e\u5904\u7406\u7684\u65f6\u95f4\uff1a \u7531\u4e8e\u4f7f\u7528GPU\u7684 \u5e73\u884c\u8fd0\u7b97 \u8fdb\u884c\u673a\u5668\u5b66\u4e60\uff0c\u5728\u65f6\u95f4\u4e0a\uff0c\u4e00\u6b21\u5904\u7406\u591a\u4e2a\u6570\u636e\u66f4\u52a0\u9ad8\u6548 Noisy\u7684Gradient\u53ef\u4ee5\u5e2e\u52a9\u8bad\u7ec3 \u7eb5\u8f74\u4ee3\u8868\u7cbe\u786e\u5ea6 \u6a2a\u8f74\u4ee3\u8868Batch Size \u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u91ca\uff1a Full Batch\uff1a\u5728\u68af\u5ea6\u4e3a0\u7684\u70b9\uff08local minimum/saddle point\uff09\u505c\u4e0b\u540e\uff0c\u65e0\u6cd5\u7ee7\u7eed\u66f4\u65b0 Small Batch\uff1a\u4e0d\u540c\u7684Batch\u7b97\u51fa\u6765\u7684Loss Function\u4e0d\u540c\uff0c\u53ef\u80fd\u5728\u524d\u4e00\u4e2aBatch\u5361\u4f4f\uff0c\u540e\u4e00\u4e2aBatch\u53ef\u4ee5\u7ee7\u7eed\u8ba1\u7b97","title":"Batch"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#momentum","text":"\u5229\u7528\u524d\u4e00\u4e2a\u8ba1\u7b97\u51fa\u7684\u68af\u5ea6\uff0c\u63d0\u4f9b\u4e00\u5b9a\u7684\u60ef\u6027\uff08\u5728\u4e0b\u4e00\u6b21\u8ba1\u7b97\u68af\u5ea6\u65f6\uff0c\u4e0e\u5176\u8fdb\u884c\u5408\u6210\uff0c\u624d\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u68af\u5ea6\uff09\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u51b2\u51fa\u5c40\u90e8\u6700\u5c0f(local minimum)","title":"Momentum(\u52a8\u91cf)"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#adaptive-learning-rate","text":"\u51fa\u73b0\u95ee\u9898\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \u5728\u201c\u5ce1\u8c37\u201d\u4e24\u8fb9\u6765\u56de \u201c\u5e73\u539f\u201d\u5904\u66f4\u65b0\u7f13\u6162 \u81ea\u9002\u5e94\u7684\u5b66\u4e60\u7387\uff1a\u5728\u5e73\u5766\u7684\u5730\u65b9\uff0c\u5b66\u4e60\u7387\u5927\uff1b\u5728\u9661\u5ced\u7684\u5730\u65b9\uff0c\u5b66\u4e60\u7387\u5c0f","title":"\u81ea\u9002\u5e94\u5b66\u4e60\u7387(Adaptive Learning Rate)"},{"location":"MachineLearning/%E6%A8%A1%E5%9E%8B%E4%BC%98%E5%8C%96/%E7%B1%BB%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%AE%AD%E7%BB%83%E6%96%B9%E6%B3%95/#loss-function","text":"","title":"\u5bf9\u4e8eLoss Function\u7684\u9009\u62e9"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/","text":"Mat\u5bf9\u8c61 \u4e00\u3001Mat\u5bf9\u8c61\u4e0eIplImage \u81ea\u52a8\u5206\u914d\u5185\u5b58\uff08\u662f\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff09 \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5934\u90e8\u4e0e\u6570\u636e\u90e8\u5206 \u4e8c\u3001Mat\u5bf9\u8c61\u4f7f\u7528 \u5e38\u7528\uff1a void copyTo(Mat mat) \uff1a\u5b8c\u5168\u62f7\u8d1d\u5230mat void convertTo(Mat dst, int type); \uff1a\uff08\u8f6c\u5316\u76ee\u6807\uff0c\u8f6c\u5316\u6a21\u5f0f\uff09 Mat clone() \uff1a\u5b8c\u5168\u62f7\u8d1d int channels() \uff1a\u8fd4\u56de\u56fe\u50cf\u7684\u901a\u9053\u6570 int depth() bool empty() uchar* ptr(i = 0) \u6784\u9020\u51fd\u6570 Mat() Mat(int rows, int cols, int type) \u4f8b\uff1a Mat(3,3,CV_8UC3,Scalar(0,0,255)); \u524d\u4e24\u4e2a\u6570\u5b57\u5206\u522b\u8868\u793a\u957f\u548c\u5bbd CV_8UC3 \uff1a 8\u8868\u793a\u6bcf\u4e2a\u901a\u9053\u53608\u4f4d U\u8868\u793a\u65e0\u7b26\u53f7 C\u8868\u793achar\u7c7b\u578b 3\u8868\u793a\u901a\u9053\u6570\u76ee\u662f3 Mat(Size size, int type) \u4f7f\u7528cout\u8f93\u51faMat\u5bf9\u8c61\uff0c\u4f1a\u8f93\u51fa\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7684RGB\u503c \u590d\u5236\uff1a \u90e8\u5206\u590d\u5236\uff1a \u4e00\u822c\u60c5\u51b5\u4e0b\u6307\u6325\u590d\u5236Mat\u5bf9\u8c61\u7684\u5934\u548c\u6307\u9488\u90e8\u5206\uff0c\u4e0d\u4f1a\u590d\u5236\u5176\u4ed6\u90e8\u5206 Mat A = imread(\"filepath\"); Mat B(A); \u5b8c\u5168\u590d\u5236\uff1a\u5982\u679c\u60f3\u628aMat\u5bf9\u8c61\u7684\u5934\u90e8\u548c\u6570\u636e\u90e8\u5206\u4e00\u8d77\u590d\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u4e24\u4e2aAPI\u5b9e\u73b0 Mat F = A.clone() Mat G; A.copyTo(G) \u4e09\u3001Mat\u5b9a\u4e49\u6570\u7ec4 \u4e00\u822c\u521b\u5efa\u4e8c\u7ef4 \u901a\u8fc7create\u65b9\u5f0f\u5b9e\u73b0 C++ Mat M; M.create(4,3,CV_8UC2); M = Scalar(127,127); cout << \"M = \" << endl << M << endl; uchar* firstRow = M.ptr<uchar>(0); printf(\"%d\",firstRow); \u5b9a\u4e49\u5c0f\u6570\u7ec4(\u63a9\u819c\u64cd\u4f5c\u91cc\u4f7f\u7528\u8fc7) C++ Mat C = (Mat_<double>(3,3)<<0,-1,0,-1,5,-1,0,-1,0); cout << \"C=\" << endl << \" \" << C << endl << endl; \u56db\u3001\u5176\u4ed6 Mat::eye() \uff1a\u4f7f\u5bf9\u89d2\u7ebf\u4e0a\u90fd\u662f1\uff0c\u5176\u4ed6\u5730\u65b9\u4e3a0 Mat::zeros() \uff1a\u5168\u4e3a0 Mat t = Mat::zeros(2, 2, CV_8UC1); cout << \"t =\" << endl << t << endl; Mat t1 = Mat::eye(t.size(), t.type()); cout << \"t1 = \" << endl << t1;","title":"Mat\u5bf9\u8c61"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/#mat","text":"","title":"Mat\u5bf9\u8c61"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/#matiplimage","text":"\u81ea\u52a8\u5206\u914d\u5185\u5b58\uff08\u662f\u9762\u5411\u5bf9\u8c61\u7684\u6570\u636e\u7ed3\u6784\uff09 \u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u5934\u90e8\u4e0e\u6570\u636e\u90e8\u5206","title":"\u4e00\u3001Mat\u5bf9\u8c61\u4e0eIplImage"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/#mat_1","text":"\u5e38\u7528\uff1a void copyTo(Mat mat) \uff1a\u5b8c\u5168\u62f7\u8d1d\u5230mat void convertTo(Mat dst, int type); \uff1a\uff08\u8f6c\u5316\u76ee\u6807\uff0c\u8f6c\u5316\u6a21\u5f0f\uff09 Mat clone() \uff1a\u5b8c\u5168\u62f7\u8d1d int channels() \uff1a\u8fd4\u56de\u56fe\u50cf\u7684\u901a\u9053\u6570 int depth() bool empty() uchar* ptr(i = 0) \u6784\u9020\u51fd\u6570 Mat() Mat(int rows, int cols, int type) \u4f8b\uff1a Mat(3,3,CV_8UC3,Scalar(0,0,255)); \u524d\u4e24\u4e2a\u6570\u5b57\u5206\u522b\u8868\u793a\u957f\u548c\u5bbd CV_8UC3 \uff1a 8\u8868\u793a\u6bcf\u4e2a\u901a\u9053\u53608\u4f4d U\u8868\u793a\u65e0\u7b26\u53f7 C\u8868\u793achar\u7c7b\u578b 3\u8868\u793a\u901a\u9053\u6570\u76ee\u662f3 Mat(Size size, int type) \u4f7f\u7528cout\u8f93\u51faMat\u5bf9\u8c61\uff0c\u4f1a\u8f93\u51fa\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u7684RGB\u503c \u590d\u5236\uff1a \u90e8\u5206\u590d\u5236\uff1a \u4e00\u822c\u60c5\u51b5\u4e0b\u6307\u6325\u590d\u5236Mat\u5bf9\u8c61\u7684\u5934\u548c\u6307\u9488\u90e8\u5206\uff0c\u4e0d\u4f1a\u590d\u5236\u5176\u4ed6\u90e8\u5206 Mat A = imread(\"filepath\"); Mat B(A); \u5b8c\u5168\u590d\u5236\uff1a\u5982\u679c\u60f3\u628aMat\u5bf9\u8c61\u7684\u5934\u90e8\u548c\u6570\u636e\u90e8\u5206\u4e00\u8d77\u590d\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u4e24\u4e2aAPI\u5b9e\u73b0 Mat F = A.clone() Mat G; A.copyTo(G)","title":"\u4e8c\u3001Mat\u5bf9\u8c61\u4f7f\u7528"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/#mat_2","text":"\u4e00\u822c\u521b\u5efa\u4e8c\u7ef4 \u901a\u8fc7create\u65b9\u5f0f\u5b9e\u73b0 C++ Mat M; M.create(4,3,CV_8UC2); M = Scalar(127,127); cout << \"M = \" << endl << M << endl; uchar* firstRow = M.ptr<uchar>(0); printf(\"%d\",firstRow); \u5b9a\u4e49\u5c0f\u6570\u7ec4(\u63a9\u819c\u64cd\u4f5c\u91cc\u4f7f\u7528\u8fc7) C++ Mat C = (Mat_<double>(3,3)<<0,-1,0,-1,5,-1,0,-1,0); cout << \"C=\" << endl << \" \" << C << endl << endl;","title":"\u4e09\u3001Mat\u5b9a\u4e49\u6570\u7ec4"},{"location":"opencv/Mat%E5%AF%B9%E8%B1%A1/#_1","text":"Mat::eye() \uff1a\u4f7f\u5bf9\u89d2\u7ebf\u4e0a\u90fd\u662f1\uff0c\u5176\u4ed6\u5730\u65b9\u4e3a0 Mat::zeros() \uff1a\u5168\u4e3a0 Mat t = Mat::zeros(2, 2, CV_8UC1); cout << \"t =\" << endl << t << endl; Mat t1 = Mat::eye(t.size(), t.type()); cout << \"t1 = \" << endl << t1;","title":"\u56db\u3001\u5176\u4ed6"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/","text":"OpenCV\u521d\u63a2 \u5934\u6587\u4ef6 \u89c1\u5b66\u4e60OpenCV 3 P19 cv \u547d\u540d\u7a7a\u95f4 \u663e\u793a\u56fe\u7247 cv::imread(\u56fe\u50cf\u6587\u4ef6\u540d\u79f0, \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b) \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\u5305\u62ec\u6587\u4ef6\u8def\u5f84 \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b\u53c2\u6570 $\uff1c 0$\uff1a\u52a0\u8f7d\u539f\u56fe\uff0c\u4e0d\u505a\u6539\u53d8 $=0$\uff1a\u4f5c\u4e3a\u7070\u5ea6\u56fe\u50cf\u52a0\u8f7d $> 0$: \u4f5c\u4e3aRGB\u56fe\u50cf\u52a0\u8f7d \uff08\u65b9\u4fbf\u5904\u7406\uff09 \u663e\u793a\u56fe\u50cf\uff08 namedWindos \u4e0e imshow ) namedWindow \uff1a\u521b\u5efa\u4e00\u4e2aOpenCV\u7a97\u53e3\uff0c\u81ea\u52a8\u521b\u5efa\u4e0e\u91ca\u653e \u7528\u6cd5\uff1a cv::namedWindow(\"Windos title\",WINDOW_AUTOSIZE) WINDOW_AUTOSIZE \uff1a\u6839\u636e\u56fe\u50cf\u81ea\u52a8\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff0c\u65e0\u6cd5\u4eba\u4e3a\u4fee\u6539 WINDOW_NORMAL \uff1a\u4e0eQT\u96c6\u6210\u65f6\u4f7f\u7528\uff0c\u5141\u8bb8\u4fee\u6539\u7a97\u53e3\u5927\u5c0f imshow \uff1a\u663e\u793a\u5230\u6307\u5b9a\u7684\u7a97\u53e3 \u7528\u6cd5\uff1a imshow(\"\u7a97\u53e3\u540d\u79f0\",Mat\u5bf9\u8c61) cv::waikKey(0) \uff1a\u544a\u8bc9\u7cfb\u7edf\u6682\u505c\u5e76\u4e14\u7b49\u5f85\u952e\u76d8\u4e8b\u4ef6 \u5982\u679c\u53c2\u6570$>0$\uff0c\u5219\u7b49\u5f85\u76f8\u540c\u7684\u6beb\u79d2\u65f6\u95f4 \u5982\u679c\u53c2\u6570$<0$\uff0c\u5219\u65e0\u9650\u7b49\u5f85\u81f3\u6709\u6309\u952e\u6309\u4e0b destroyWindow() \uff1a\u5173\u95ed\u7a97\u53e3\u5e76\u4e14\u91ca\u653e\u5173\u8054\u7684\u7a7a\u95f4 \u89c6\u9891 \u89c6\u9891\u8bfb\u53d6\u7ed3\u6784\uff1a cv::VideoCapture \u5305\u542b\u4e86\u89c6\u9891\u6587\u4ef6\u6240\u6709\u53ef\u8bfb\u53d6\u7684\u5c5e\u6027 cap.open(filepath) \uff1a\u6253\u5f00\u76ee\u5f55\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6 cap >> frame \uff1a\u5e27\u4ee5\u6d41\u7684\u65b9\u5f0f\u8bfb\u53d6 \u4ece\u6444\u50cf\u5934\u8bfb\u53d6 VideoCapture \u5bf9\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u548c\u6444\u50cf\u5934\u62e5\u6709\u4e00\u81f4\u7684\u63a5\u53e3 cap.open(CamreaID) \u5982\u679c\u4ec5\u4e00\u4e2a\u6444\u50cf\u5934\u8fde\u63a5\uff0cCameraID\u901a\u5e38\u4e3a$0$ CameraID\u4e3a$-1$\u65f6\uff0c\u968f\u673a\u9009\u62e9 \u5199\u5165AVI\u6587\u4ef6 \u5c06\u6bcf\u4e00\u5e27\u56fe\u50cf\u8f93\u5165\u5230 cv::VideoWriter \u4e2d \u5199\u5165\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 cv::VideoWriter.release() \u5199\u5165\u6587\u4ef6","title":"OpenCV\u521d\u63a2"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#opencv","text":"","title":"OpenCV\u521d\u63a2"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#_1","text":"\u89c1\u5b66\u4e60OpenCV 3 P19 cv \u547d\u540d\u7a7a\u95f4","title":"\u5934\u6587\u4ef6"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#_2","text":"cv::imread(\u56fe\u50cf\u6587\u4ef6\u540d\u79f0, \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b) \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\u5305\u62ec\u6587\u4ef6\u8def\u5f84 \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b\u53c2\u6570 $\uff1c 0$\uff1a\u52a0\u8f7d\u539f\u56fe\uff0c\u4e0d\u505a\u6539\u53d8 $=0$\uff1a\u4f5c\u4e3a\u7070\u5ea6\u56fe\u50cf\u52a0\u8f7d $> 0$: \u4f5c\u4e3aRGB\u56fe\u50cf\u52a0\u8f7d \uff08\u65b9\u4fbf\u5904\u7406\uff09 \u663e\u793a\u56fe\u50cf\uff08 namedWindos \u4e0e imshow ) namedWindow \uff1a\u521b\u5efa\u4e00\u4e2aOpenCV\u7a97\u53e3\uff0c\u81ea\u52a8\u521b\u5efa\u4e0e\u91ca\u653e \u7528\u6cd5\uff1a cv::namedWindow(\"Windos title\",WINDOW_AUTOSIZE) WINDOW_AUTOSIZE \uff1a\u6839\u636e\u56fe\u50cf\u81ea\u52a8\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff0c\u65e0\u6cd5\u4eba\u4e3a\u4fee\u6539 WINDOW_NORMAL \uff1a\u4e0eQT\u96c6\u6210\u65f6\u4f7f\u7528\uff0c\u5141\u8bb8\u4fee\u6539\u7a97\u53e3\u5927\u5c0f imshow \uff1a\u663e\u793a\u5230\u6307\u5b9a\u7684\u7a97\u53e3 \u7528\u6cd5\uff1a imshow(\"\u7a97\u53e3\u540d\u79f0\",Mat\u5bf9\u8c61) cv::waikKey(0) \uff1a\u544a\u8bc9\u7cfb\u7edf\u6682\u505c\u5e76\u4e14\u7b49\u5f85\u952e\u76d8\u4e8b\u4ef6 \u5982\u679c\u53c2\u6570$>0$\uff0c\u5219\u7b49\u5f85\u76f8\u540c\u7684\u6beb\u79d2\u65f6\u95f4 \u5982\u679c\u53c2\u6570$<0$\uff0c\u5219\u65e0\u9650\u7b49\u5f85\u81f3\u6709\u6309\u952e\u6309\u4e0b destroyWindow() \uff1a\u5173\u95ed\u7a97\u53e3\u5e76\u4e14\u91ca\u653e\u5173\u8054\u7684\u7a7a\u95f4","title":"\u663e\u793a\u56fe\u7247"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#_3","text":"\u89c6\u9891\u8bfb\u53d6\u7ed3\u6784\uff1a cv::VideoCapture \u5305\u542b\u4e86\u89c6\u9891\u6587\u4ef6\u6240\u6709\u53ef\u8bfb\u53d6\u7684\u5c5e\u6027 cap.open(filepath) \uff1a\u6253\u5f00\u76ee\u5f55\u5bf9\u5e94\u7684\u89c6\u9891\u6587\u4ef6 cap >> frame \uff1a\u5e27\u4ee5\u6d41\u7684\u65b9\u5f0f\u8bfb\u53d6","title":"\u89c6\u9891"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#_4","text":"VideoCapture \u5bf9\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u548c\u6444\u50cf\u5934\u62e5\u6709\u4e00\u81f4\u7684\u63a5\u53e3 cap.open(CamreaID) \u5982\u679c\u4ec5\u4e00\u4e2a\u6444\u50cf\u5934\u8fde\u63a5\uff0cCameraID\u901a\u5e38\u4e3a$0$ CameraID\u4e3a$-1$\u65f6\uff0c\u968f\u673a\u9009\u62e9","title":"\u4ece\u6444\u50cf\u5934\u8bfb\u53d6"},{"location":"opencv/OpenCV%E5%88%9D%E6%8E%A2/#avi","text":"\u5c06\u6bcf\u4e00\u5e27\u56fe\u50cf\u8f93\u5165\u5230 cv::VideoWriter \u4e2d \u5199\u5165\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 cv::VideoWriter.release() \u5199\u5165\u6587\u4ef6","title":"\u5199\u5165AVI\u6587\u4ef6"},{"location":"opencv/%E5%8A%A0%E8%BD%BD%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F/","text":"\u52a0\u8f7d\u3001\u4fee\u6539\u3001\u4fdd\u5b58\u56fe\u50cf \u4e00\u3001\u52a0\u8f7d\u56fe\u50cf(imread) imread(\u56fe\u50cf\u6587\u4ef6\u540d\u79f0, \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b) \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\u5305\u62ec\u6587\u4ef6\u8def\u5f84 \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b $\uff1c 0$\uff1a\u52a0\u8f7d\u539f\u56fe\uff0c\u4e0d\u505a\u6539\u53d8 $=0$\uff1a\u4f5c\u4e3a\u7070\u5ea6\u56fe\u50cf\u52a0\u8f7d $> 0$: \u4f5c\u4e3aRGB\u56fe\u50cf\u52a0\u8f7d \uff08\u65b9\u4fbf\u5904\u7406\uff09 \u663e\u793a\u56fe\u50cf\uff08 namedWindos \u4e0e imshow ) namedWindow \uff1a\u521b\u5efa\u4e00\u4e2aOpenCV\u7a97\u53e3\uff0c\u81ea\u52a8\u521b\u5efa\u4e0e\u91ca\u653e \u7528\u6cd5\uff1a namedWindow(\"Windos title\",WINDOW_AUTOSIZE) WINDOW_AUTOSIZE \uff1a\u6839\u636e\u56fe\u50cf\u81ea\u52a8\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff0c\u65e0\u6cd5\u4eba\u4e3a\u4fee\u6539 WINDOW_NORMAL \uff1a\u4e0eQT\u96c6\u6210\u65f6\u4f7f\u7528\uff0c\u5141\u8bb8\u4fee\u6539\u7a97\u53e3\u5927\u5c0f imshow \uff1a\u663e\u793a\u5230\u6307\u5b9a\u7684\u7a97\u53e3 \u7528\u6cd5\uff1a imshow(\"\u7a97\u53e3\u540d\u79f0\",Mat\u5bf9\u8c61) \u4e8c\u3001\u4fee\u6539\u56fe\u50cf(cvtColor) cvtColor \uff1a\u628a\u56fe\u50cf\u4ece\u4e00\u4e2a\u8272\u5f69\u7a7a\u95f4\u8f6c\u5316\u5230\u53e6\u4e00\u4e2a\u8272\u5f69\u7a7a\u95f4 \u7528\u6cd5\uff1a cvtColor(\u539f\u56fe\u50cf, \u8272\u5f69\u7a7a\u95f4\u8f6c\u5316\u540e\u7684\u56fe\u50cf, \u6e90\u8272\u5f69\u7a7a\u95f42\u76ee\u6807\u8272\u5f69\u7a7a\u95f4) \u4e09\u3001\u4fdd\u5b58\u56fe\u50cf(imwrite) imwrite \uff1a\u5199\u5165\u5230\u6307\u5b9a\u8def\u5f84 \u7528\u6cd5\uff1a imwrite(\u6307\u5b9a\u8def\u5f84, \u8981\u4fdd\u5b58\u7684\u56fe\u50cf)","title":"[\u52a0\u8f7d\u3001\u4fee\u6539\u3001\u4fdd\u5b58\u56fe\u50cf](C:\\Users\\11146\\OneDrive\\coding\\program\\opencv\\OpenCV_Learning\\\u52a0\u8f7d\u3001\u4fee\u6539\u3001\u4fdd\u5b58\u56fe\u50cf.cpp)"},{"location":"opencv/%E5%8A%A0%E8%BD%BD%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F/#_1","text":"","title":"\u52a0\u8f7d\u3001\u4fee\u6539\u3001\u4fdd\u5b58\u56fe\u50cf"},{"location":"opencv/%E5%8A%A0%E8%BD%BD%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F/#imread","text":"imread(\u56fe\u50cf\u6587\u4ef6\u540d\u79f0, \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b) \u56fe\u50cf\u6587\u4ef6\u540d\u79f0\u5305\u62ec\u6587\u4ef6\u8def\u5f84 \u52a0\u8f7d\u56fe\u50cf\u7c7b\u578b $\uff1c 0$\uff1a\u52a0\u8f7d\u539f\u56fe\uff0c\u4e0d\u505a\u6539\u53d8 $=0$\uff1a\u4f5c\u4e3a\u7070\u5ea6\u56fe\u50cf\u52a0\u8f7d $> 0$: \u4f5c\u4e3aRGB\u56fe\u50cf\u52a0\u8f7d \uff08\u65b9\u4fbf\u5904\u7406\uff09 \u663e\u793a\u56fe\u50cf\uff08 namedWindos \u4e0e imshow ) namedWindow \uff1a\u521b\u5efa\u4e00\u4e2aOpenCV\u7a97\u53e3\uff0c\u81ea\u52a8\u521b\u5efa\u4e0e\u91ca\u653e \u7528\u6cd5\uff1a namedWindow(\"Windos title\",WINDOW_AUTOSIZE) WINDOW_AUTOSIZE \uff1a\u6839\u636e\u56fe\u50cf\u81ea\u52a8\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\uff0c\u65e0\u6cd5\u4eba\u4e3a\u4fee\u6539 WINDOW_NORMAL \uff1a\u4e0eQT\u96c6\u6210\u65f6\u4f7f\u7528\uff0c\u5141\u8bb8\u4fee\u6539\u7a97\u53e3\u5927\u5c0f imshow \uff1a\u663e\u793a\u5230\u6307\u5b9a\u7684\u7a97\u53e3 \u7528\u6cd5\uff1a imshow(\"\u7a97\u53e3\u540d\u79f0\",Mat\u5bf9\u8c61)","title":"\u4e00\u3001\u52a0\u8f7d\u56fe\u50cf(imread)"},{"location":"opencv/%E5%8A%A0%E8%BD%BD%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F/#cvtcolor","text":"cvtColor \uff1a\u628a\u56fe\u50cf\u4ece\u4e00\u4e2a\u8272\u5f69\u7a7a\u95f4\u8f6c\u5316\u5230\u53e6\u4e00\u4e2a\u8272\u5f69\u7a7a\u95f4 \u7528\u6cd5\uff1a cvtColor(\u539f\u56fe\u50cf, \u8272\u5f69\u7a7a\u95f4\u8f6c\u5316\u540e\u7684\u56fe\u50cf, \u6e90\u8272\u5f69\u7a7a\u95f42\u76ee\u6807\u8272\u5f69\u7a7a\u95f4)","title":"\u4e8c\u3001\u4fee\u6539\u56fe\u50cf(cvtColor)"},{"location":"opencv/%E5%8A%A0%E8%BD%BD%E3%80%81%E4%BF%AE%E6%94%B9%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E5%83%8F/#imwrite","text":"imwrite \uff1a\u5199\u5165\u5230\u6307\u5b9a\u8def\u5f84 \u7528\u6cd5\uff1a imwrite(\u6307\u5b9a\u8def\u5f84, \u8981\u4fdd\u5b58\u7684\u56fe\u50cf)","title":"\u4e09\u3001\u4fdd\u5b58\u56fe\u50cf(imwrite)"},{"location":"opencv/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/","text":"\u56fe\u50cf\u64cd\u4f5c \u4e00\u3001\u8bfb\u5199\u56fe\u50cf imread imwrite \u4e8c\u3001\u8bfb\u5199\u50cf\u7d20 \u8bfb\u4e00\u4e2aGRAY\u50cf\u7d20\u70b9\u7684\u50cf\u7d20\u503c(CV_8UC1) Scalar intensity = img.at<uchar>(y,x) Scarlar intensity = img.at<uchar>(Point(x,y)) \u8bfb\u4e00\u4e2aRGB\u50cf\u7d20\u70b9\u7684\u50cf\u7d20\u503c C++ Vec3f intensity = img.at<Vec3f>(y,x); float blue = intensity.val[0]; float green = intensity.val[1]; float red = intensity.val[2]; \u4e09\u3001\u4fee\u6539\u50cf\u7d20\u503c","title":"\u56fe\u50cf\u64cd\u4f5c"},{"location":"opencv/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/#_1","text":"","title":"\u56fe\u50cf\u64cd\u4f5c"},{"location":"opencv/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/#_2","text":"imread imwrite","title":"\u4e00\u3001\u8bfb\u5199\u56fe\u50cf"},{"location":"opencv/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/#_3","text":"\u8bfb\u4e00\u4e2aGRAY\u50cf\u7d20\u70b9\u7684\u50cf\u7d20\u503c(CV_8UC1) Scalar intensity = img.at<uchar>(y,x) Scarlar intensity = img.at<uchar>(Point(x,y)) \u8bfb\u4e00\u4e2aRGB\u50cf\u7d20\u70b9\u7684\u50cf\u7d20\u503c C++ Vec3f intensity = img.at<Vec3f>(y,x); float blue = intensity.val[0]; float green = intensity.val[1]; float red = intensity.val[2];","title":"\u4e8c\u3001\u8bfb\u5199\u50cf\u7d20"},{"location":"opencv/%E5%9B%BE%E5%83%8F%E6%93%8D%E4%BD%9C/#_4","text":"","title":"\u4e09\u3001\u4fee\u6539\u50cf\u7d20\u503c"},{"location":"opencv/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/","text":"\u77e9\u9635\u7684\u63a9\u819c\u64cd\u4f5c \u4e00\u3001\u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6307\u9488 \u83b7\u53d6\u50cf\u7d20\u6307\u9488\uff1a \u83b7\u53d6\u50cf\u7d20\u77e9\u9635\u6307\u9488\uff1a Mat.ptr<uchar>(int i = 0) \u7d22\u5f15i\u8868\u793a\u7b2c\u51e0\u884c\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 \u83b7\u53d6\u5f53\u524d\u884c\u6307\u9488\uff1a const uchar* current = mtimage.ptr<uchar>(row) \u83b7\u53d6\u5f53\u524d\u50cf\u7d20\u70b9P(row, col)\u7684\u50cf\u7d20\u503c\uff1a current[col] \u50cf\u7d20\u8303\u56f4\u5904\u7406\uff1a saturate_cast<uchar> \u4f5c\u7528\uff1a\u786e\u4fddRGB\u503c\u57280~255\u95f4 saturate_cast<uchar>(-100) //\u8fd4\u56de0 saturate_cast<uchar>(288) //\u8fd4\u56de255 saturate_cast<uchar>(100) //\u8fd4\u56de100 \u4e8c\u3001\u63a9\u819c\u64cd\u4f5c\u89e3\u91ca \u901a\u8fc7\u63a9\u819c\u64cd\u4f5c\u63d0\u9ad8\u56fe\u50cf\u5bf9\u6bd4\u5ea6 \u51fd\u6570\u8c03\u7528filter2D\u529f\u80fd \u5b9a\u4e49\u63a9\u819c\uff1a Mat kernel = (Mat_<char>(3,3) << 0,-1,0,-1,5,-1,0,-1,0); filter2D(src,dstsrc.depth(),kernel)","title":"[\u77e9\u9635\u7684\u63a9\u819c\u64cd\u4f5c](C:\\Users\\11146\\OneDrive\\coding\\program\\opencv\\OpenCV_Learning\\\u77e9\u9635\u7684\u63a9\u819c\u64cd\u4f5c.cpp)"},{"location":"opencv/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/#_1","text":"","title":"\u77e9\u9635\u7684\u63a9\u819c\u64cd\u4f5c"},{"location":"opencv/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/#_2","text":"\u83b7\u53d6\u50cf\u7d20\u6307\u9488\uff1a \u83b7\u53d6\u50cf\u7d20\u77e9\u9635\u6307\u9488\uff1a Mat.ptr<uchar>(int i = 0) \u7d22\u5f15i\u8868\u793a\u7b2c\u51e0\u884c\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 \u83b7\u53d6\u5f53\u524d\u884c\u6307\u9488\uff1a const uchar* current = mtimage.ptr<uchar>(row) \u83b7\u53d6\u5f53\u524d\u50cf\u7d20\u70b9P(row, col)\u7684\u50cf\u7d20\u503c\uff1a current[col] \u50cf\u7d20\u8303\u56f4\u5904\u7406\uff1a saturate_cast<uchar> \u4f5c\u7528\uff1a\u786e\u4fddRGB\u503c\u57280~255\u95f4 saturate_cast<uchar>(-100) //\u8fd4\u56de0 saturate_cast<uchar>(288) //\u8fd4\u56de255 saturate_cast<uchar>(100) //\u8fd4\u56de100","title":"\u4e00\u3001\u83b7\u53d6\u56fe\u50cf\u50cf\u7d20\u6307\u9488"},{"location":"opencv/%E7%9F%A9%E9%98%B5%E7%9A%84%E6%8E%A9%E8%86%9C%E6%93%8D%E4%BD%9C/#_3","text":"\u901a\u8fc7\u63a9\u819c\u64cd\u4f5c\u63d0\u9ad8\u56fe\u50cf\u5bf9\u6bd4\u5ea6 \u51fd\u6570\u8c03\u7528filter2D\u529f\u80fd \u5b9a\u4e49\u63a9\u819c\uff1a Mat kernel = (Mat_<char>(3,3) << 0,-1,0,-1,5,-1,0,-1,0); filter2D(src,dstsrc.depth(),kernel)","title":"\u4e8c\u3001\u63a9\u819c\u64cd\u4f5c\u89e3\u91ca"},{"location":"python/Python/","text":"Python\u57fa\u7840 \u53d8\u91cf \u4e03\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Bool Number String Tuple List Set Dictionary \u540c\u6837\u5c01\u88c5\u4e86\u4e00\u4e9b\u65b9\u6cd5 \u57fa\u672c\u8fd0\u7b97\uff1a \u52a0\u51cf\u4e58\u9664\u4f59 // \u9664\u6cd5\uff0c\u5f97\u4e00\u4e2a\u6574\u6570\uff08 / \u5f97\u6d6e\u70b9\u6570\uff09 ** \u4e58\u65b9 \u5e8f\u5217\uff1a \u56db\u79cd\u91cd\u8981\u7684\u5e8f\u5217\u6570\u636e\u7c7b\u578b\uff1a List [] \u521b\u5efa Tuple () \u521b\u5efa \u521b\u5efa\u540e\u4e0d\u53ef\u4fee\u6539 Dictionary \u952e\u503c\u5bf9 {a: b} Set \u5e8f\u5217\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u5143\u7d20 python\u4e2d\u540c\u6837\u5185\u7f6e\u4e86\u4e00\u4e9b\u65b9\u6cd5\u65b9\u4fbf\u5904\u7406\u5e8f\u5217 \u6761\u4ef6\u5224\u65ad if elif else \u5faa\u73af while for \u51fd\u6570","title":"Python\u57fa\u7840"},{"location":"python/Python/#python","text":"","title":"Python\u57fa\u7840"},{"location":"python/Python/#_1","text":"\u4e03\u4e2a\u6807\u51c6\u7684\u6570\u636e\u7c7b\u578b\uff1a Bool Number String Tuple List Set Dictionary \u540c\u6837\u5c01\u88c5\u4e86\u4e00\u4e9b\u65b9\u6cd5 \u57fa\u672c\u8fd0\u7b97\uff1a \u52a0\u51cf\u4e58\u9664\u4f59 // \u9664\u6cd5\uff0c\u5f97\u4e00\u4e2a\u6574\u6570\uff08 / \u5f97\u6d6e\u70b9\u6570\uff09 ** \u4e58\u65b9","title":"\u53d8\u91cf"},{"location":"python/Python/#_2","text":"\u56db\u79cd\u91cd\u8981\u7684\u5e8f\u5217\u6570\u636e\u7c7b\u578b\uff1a List [] \u521b\u5efa Tuple () \u521b\u5efa \u521b\u5efa\u540e\u4e0d\u53ef\u4fee\u6539 Dictionary \u952e\u503c\u5bf9 {a: b} Set \u5e8f\u5217\u53ef\u4ee5\u5b58\u653e\u591a\u4e2a\u5143\u7d20 python\u4e2d\u540c\u6837\u5185\u7f6e\u4e86\u4e00\u4e9b\u65b9\u6cd5\u65b9\u4fbf\u5904\u7406\u5e8f\u5217","title":"\u5e8f\u5217\uff1a"},{"location":"python/Python/#_3","text":"if elif else","title":"\u6761\u4ef6\u5224\u65ad"},{"location":"python/Python/#_4","text":"while for","title":"\u5faa\u73af"},{"location":"python/Python/#_5","text":"","title":"\u51fd\u6570"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/","text":"robocup\u9884\u4e60\u6750\u6599 2 \u4ec0\u4e48\u662f\u7f16\u7a0b\u8303\u5f0f\uff1f \u7f16\u7a0b\u8303\u5f0f\u662f\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u7a0b\u5e8f\u65f6\u6240\u9075\u5faa\u7684 \u65b9\u6cd5\u8bba \u3002\u5b83\u6307\u5bfc\u6211\u4eec \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u89c6\u89d2\u53bb\u5206\u6790\u4e00\u4e2a\u95ee\u9898 \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u7ed3\u6784\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u4e2a\u7a0b\u5e8f \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u6a21\u578b\u5b8c\u6210\u5bf9\u7a0b\u5e8f\u7684\u8ba1\u7b97 \u8ba1\u7b97\u673a\uff0c\u6838\u5fc3\u5728\u4e0e \u8ba1\u7b97 \u3002\u4ec0\u4e48\u662f\u8ba1\u7b97\u5462\uff1f\u7ef4\u57fa\u767e\u79d1\u7ed9\u51fa\u7684\u89e3\u91ca\u662f\uff1a \u8ba1\u7b97\u662f\u57fa\u4e8e\u7ed9\u5b9a\u7684\u57fa\u672c\u89c4\u5219\u8fdb\u884c\u6f14\u5316\u7684\u8fc7\u7a0b\u3002 \u8ba1\u7b97\u6a21\u578b \u987a\u5e8f\u6a21\u578b 1 \u2014\u2014 \u56fe\u7075\u673a \u4ec0\u4e48\u662f\u56fe\u7075\u673a\uff1f https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA \u53ef\u8ba1\u7b97\u6027\uff08Computability\uff09 \u7406\u53d1\u5e08\u6096\u8bba \u5c0f\u57ce\u91cc\u7684\u7406\u53d1\u5e08\u653e\u51fa\u8c6a\u8a00\uff1a\u4ed6\u8981\u4e3a\u57ce\u91cc\u4eba\u522e\u80e1\u5b50\uff0c\u800c\u4e14\u4e00\u5b9a\u53ea\u8981\u4e3a\u57ce\u91cc\u6240\u6709 \u201c\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u201d \u522e\u80e1\u5b50\u3002 \u4f46\u95ee\u9898\u662f\uff1a \u7406\u53d1\u5e08\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u5417\uff1f \u5982\u679c\u4ed6\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff0c\u90a3\u4e48\u6309\u7167\u4ed6\u7684\u8c6a\u8a00 \u201c\u53ea\u4e3a\u57ce\u91cc\u6240\u6709\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u522e\u80e1\u5b50\u201d\uff0c\u4ed6\u4e0d\u5e94\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff1b\u4f46\u5982\u679c\u4ed6\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff0c\u540c\u6837\u6309\u7167\u4ed6\u7684\u8c6a\u8a00 \u201c\u4e00\u5b9a\u8981\u4e3a\u57ce\u91cc\u6240\u6709\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u522e\u80e1\u5b50\u201d \u4ed6\u53c8\u5e94\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u3002 \u505c\u673a\u95ee\u9898 \u4ec0\u4e48\u662f\u56fe\u7075\u5b8c\u5907 \u80fd\u6a21\u62df\u4e00\u4e2a\u56fe\u7075\u673a\u5c31\u53eb\u56fe\u7075\u5b8c\u5907\u3002 brainfuck \u662f\u6700\u7b80\u5355\u7684\u56fe\u7075\u5b8c\u5907\u7684\u8bed\u8a00\u3002 \u987a\u5e8f\u6a21\u578b 2 \u2014\u2014 \u6709\u9650\u72b6\u6001\u673a\uff08FSM\uff09 \u7ec4\u5408\u903b\u8f91\u4e0e\u65f6\u5e8f\u903b\u8f91 \u72b6\u6001\u8f6c\u79fb\u51fd\u6570\uff1a\u7ec4\u5408\u903b\u8f91 \u72b6\u6001\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801 + \u5bc4\u5b58\u5668 \u7535\u8def\u5b9e\u73b0 FSM \u8fc7\u7a0b\u5f0f\u7f16\u7a0b \u6838\u5fc3\uff1a\u72b6\u6001 \u4ece\u51af\u8bfa\u4f0a\u66fc\u8ba1\u7b97\u673a\u67b6\u6784\u7684\u89d2\u5ea6\u770b\uff0c\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u8303\u5f0f\u4e0d\u8fc7\u662f\u6c47\u7f16\u8bed\u8a00\u4e00\u5c42\u8584\u8584\u7684\u62bd\u8c61\uff0c\u800c\u6c47\u7f16\u6307\u4ee4\uff08\u9664\u4e86\u4f2a\u6307\u4ee4\uff09\u7684\u8bbe\u8ba1\u76f4\u63a5\u51b3\u5b9a\u4e86 CPU \u7684\u6307\u4ee4\u96c6\u3002 \u51fd\u6570\u5f0f\u7f16\u7a0b \u5f15\u7528\u900f\u660e C \u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5176\u5b9e\u662f\u5f88\u4e0d\u4e00\u6837\u7684\u3002 \u6570\u5b66\u4e0a\uff0c\u51fd\u6570\u662f \u5b9a\u4e49\u57df\u5230\u503c\u57df\u7684\u4e00\u4e2a\u6620\u5c04 \u3002\u5bf9\u4e8e\u5b9a\u4e49\u57df\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u503c\u57df\u4e2d\u90fd\u5b58\u5728\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u4e0e\u4e4b\u5bf9\u5e94\u3002\u4e5f\u5c31\u662f \u7ed9\u5b9a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5176\u8fd4\u56de\u503c\u5e94\u8be5\u662f\u552f\u4e00\u786e\u5b9a\u7684 \u3002 \u4f46\u8bf7\u770b\u4e0b\u9762\u7684 C \u8bed\u8a00\u7a0b\u5e8f\uff1a int x = 10; int sub_y(int y) { return x - y; } sub_y(3); // 7 sub_y(3); // 4 \u4e24\u6b21\u5bf9 sub_y \u7684\u8c03\u7528\u53c2\u6570\u90fd\u662f 3\uff0c\u4f46\u8fd4\u56de\u503c\u5374\u4e0d\u540c\u3002\u539f\u56e0\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a \u201c\u9690\u5f0f\u201d \u7684\u8f93\u5165 \u2014\u2014 \u53d8\u91cf x\u3002 \u6211\u4eec\u628a C \u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u548c==\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u4e00\u6837\u6ee1\u8db3 \u201c\u4e0d\u7ba1\u73af\u5883\u5982\u4f55\uff0c\u53ea\u8981\u7ed9\u5b9a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5176\u8fd4\u56de\u503c\u5e94\u8be5\u662f\u552f\u4e00\u786e\u5b9a\u7684\u201d \u8fd9\u4e00\u6027\u8d28\u7684\u51fd\u6570\u79f0\u4e3a \u7eaf\u51fd\u6570 ==\uff0c\u5426\u5219\u6210\u4e3a \u6709\u526f\u4f5c\u7528\u7684\u51fd\u6570 \uff08\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 sub_y \u5c31\u662f\uff09\u3002\u8fd9\u4e00\u6027\u8d28\u79f0\u4e3a \u5f15\u7528\u900f\u660e \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c==\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u91cc\u6709 \u9700\u8981\u548c \u201c\u73af\u5883\u201c \u4ea4\u4e92\u7684\u64cd\u4f5c \uff08\u4e5f\u5c31\u662f \u526f\u4f5c\u7528 \uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f \u4e0d\u7eaf\u7684 ==\u3002 \u4ee3\u6362\u6a21\u578b \u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u6709\u4ec0\u4e48\u91cd\u8981\u7684\u4e48\uff1f \u56de\u5fc6\u5316\u7b80\u6570\u5b66\u5f0f\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ece\u5185\u800c\u5916\u4e0d\u65ad\u5c06\u4e00\u90e8\u5206\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u5e76\u7528\u6c42\u503c\u5f97\u5230\u7684\u7ed3\u679c\u66ff\u6362\u4e4b\u3002\u8fd9\u4e00\u7b80\u5355\u7684\u5316\u7b80\u65b9\u6cd5\u79f0\u4e3a \u4ee3\u6362\u6a21\u578b \u3002 \u4ee5 f(g(3), h(2)) \u4e3a\u4f8b\uff0c\u5982\u679c f,g,h \u90fd\u662f\u5f15\u7528\u900f\u660e\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4ee3\u6362\u6a21\u578b\u6c42\u503c\u3002\u6ce8\u610f\u6c42\u503c f( , ), g(3) \u548c h(2) \u7684\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u6c42\u503c\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u5176\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4f46\u5982\u679c f,g,h \u4e0d\u662f\u5f15\u7528\u900f\u660e\u7684\uff0c\u4ee3\u6362\u6a21\u578b\u5c31\u4e0d\u9002\u7528\u4e86\uff01\u6211\u4eec\u8981\u8003\u8651\u6c42\u503c\u7684\u5148\u540e\u987a\u5e8f\uff0c\u53d8\u91cf\u7684\u5f15\u7528\u5173\u7cfb\u7b49\u7b49\u4e00\u5927\u5806\u95ee\u9898\uff0c\u4e3a\u6b64\u6211\u4eec\u8981\u5efa\u7acb\u4e00\u4e2a\u6bd4\u4ee3\u6362\u6a21\u578b\u590d\u6742\u7684\u591a\u7684\u6c42\u503c\u6a21\u578b\u3002 \u9012\u5f52\u7684\u5f00\u9500 fact :: Integer -> Integer fact 1 = 1 fact n = n * (fact (n - 1)) main = do print $ map fact [1..10] ------ Output: [1,2,6,24,120,720,5040,40320,362880,3628800] fib :: Integer -> Integer fib 1 = 1 fib 2 = 1 fib n = (fib (n - 1)) + (fib (n - 2)) main = do print $ map fib [1..10] ------ Output: [1,1,2,3,5,8,13,21,34,55] \u9012\u5f52\u5730\u601d\u8003 \u8f97\u8f6c\u76f8\u9664\u6cd5 gcd :: Integer -> Integer -> Integer gcd a 0 = a gcd a b = gcd b (mod a b) \u9012\u5f52\u5feb\u901f\u5e42 int fast_pow(int x, int a) { if (a == 1) return x; else if (a % 2 != 0) return x * fast_pow(x, a - 1); else { // \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 t\uff1f // \u76f4\u63a5 return fast_pow(x, a / 2) * fast_pow(x, a / 2) \u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f int t = fast_pow(x, a / 2); return t * t; } } \u4f5c\u4e1a 1. \u5feb\u901f\u4e58 \u6211\u4eec\u77e5\u9053\uff0c\u4e58\u6cd5\u8ba1\u7b97\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217\u52a0\u6cd5\u8ba1\u7b97\u3002\u540c\u65f6\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u7528 \u79fb\u4f4d\u8fd0\u7b97 \u975e\u5e38\u9ad8\u6548\u5730\u8ba1\u7b97\u4e00\u4e2a\u6570 \u4e58 2 \u7684\u5e42 \u7684\u7ed3\u679c\u3002\u8bd5\u53c2\u8003\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u5b9e\u73b0\u5feb\u901f\u4e58\u7b97\u6cd5\u3002 \u8981\u6c42\uff1a\u4f7f\u7528 \u9012\u5f52\u5b9e\u73b0 \u3002(\u4fc4\u7f57\u65af\u519c\u6c11\u4e58\u6cd5) \u5faa\u73af\u4e0e\u5c3e\u9012\u5f52 \u5c3e\u9012\u5f52\u7a7a\u95f4 \u5c3e\u9012\u5f52\u6c42\u6590\u6ce2\u62c9\u5951\u6570\u5217 #include <stdio.h> int fib(int n) { int curr = 0; int next = 1; while (n > 0) { int tmp = curr; curr = next; next = curr + tmp; n--; } return curr; } int main() { for (int i=1; i<=10; i++) { printf(\"%d \", fib(i)); } return 0; } /********* Output ********* 1 1 2 3 5 8 13 21 34 55 *************************/ fib :: Integer -> Integer -> Integer -> Integer fib 0 curr _ = curr fib n curr next = fib (n - 1) next (curr + next) main = print $ map (\\n -> fib n 0 1) [1..10] ------ Output: [1,1,2,3,5,8,13,21,34,55] #include <stdio.h> int fib(int n, int curr, int next) { if (n == 0) return curr; else return fib(n - 1, next, curr + next); } int main() { for (int i=1; i<=10; i++) { printf(\"%d \", fib(i, 0, 1)); } return 0; } /********* Output ********* 1 1 2 3 5 8 13 21 34 55 *************************/ \u4f5c\u4e1a 2. \u8bd5\u7528==\u8fed\u4ee3\u6cd5\u8ba1\u7b97\u9636\u4e58==\uff0c\u5e76\u7528\u5c3e\u9012\u5f52\u6539\u5199\u3002 \u5c3e\u9012\u5f52\u5feb\u901f\u5e42 int fast_pow(int x, int a, int ans) { if (a == 0) return ans; else if (a % 2 != 0) return fast_pow(x, a - 1, ans * x); else return fast_pow(x * x, a >> 1, ans); } \u4f5c\u4e1a 3 . \u8bd5\u7528\u5c3e\u9012\u5f52\u6539\u5199\u5feb\u901f\u4e58\u7b97\u6cd5\uff08\u4f5c\u4e1a 1\uff09 \u77e9\u9635\u5feb\u901f\u5e42\u8ba1\u7b97\u6590\u6ce2\u62c9\u5951\u6570\u5217 \u56de\u5fc6\u8fed\u4ee3\u6cd5\u8ba1\u7b97\u6590\u6ce2\u62c9\u5951\u6570\u5217\u7684\u8fc7\u7a0b\uff1a\u8fed\u4ee3\u4e2d\u53ea\u6709\u4e24\u4e2a\u53d8\u91cf\uff0ccurr \u548c next\uff0c\u6bcf\u6b21\u8fed\u4ee3\u5bf9\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u4ee5\u4e0b\u53d8\u6362\uff1acurr := next\uff0cnext := curr + next\uff0c\u73b0\u5728\u5c06\u8fd9\u79cd\u53d8\u6362\u79f0\u4e3a T \u53d8\u6362\u3002\u4ece\u521d\u59cb\u72b6\u6001 curr = fib(0) = 0, next = fib(1) = 1 \u5f00\u59cb\uff0c\u5c06 T \u53cd\u590d\u5e94\u7528 n \u6b21\uff0c\u5219\u53ef\u5f97\u5230 fib(n) \u548c fib(n+1)\u3002 \u4e0b\u9762\u5f15\u5165\u77e9\u9635\u8bed\u8a00\u8868\u8ff0\u4e0a\u8ff0\u8fc7\u7a0b\uff1a \u53c8\u7531\u4e8e \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u7684\u601d\u60f3\u8ba1\u7b97 \u3002 import torch def fast_matrix_pow(mat: torch.Tensor, a: int) -> torch.Tensor: if a == 0: return mat elif a % 2 != 0: return mat @ fast_matrix_pow(mat, a - 1) else: t = fast_matrix_pow(mat, a / 2) return t @ t def fib(n: int) -> int: t0 = torch.Tensor([[0], [1]]) T = torch.Tensor([[0, 1], [1, 1]]) tn = fast_matrix_pow(T, n) @ t0 return tn[0][0].item() \u5faa\u73af\u4e0d\u53d8\u5f0f Hoare \u5212\u5206\u7b97\u6cd5\u53ca\u5176\u6b63\u786e\u6027\u8bc1\u660e \u4f5c\u4e1a 4. Lomuto \u5212\u5206\u7b97\u6cd5 \u8bd5\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u8bc1\u660e\u8fd9\u4e00\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002 \u628a\u51fd\u6570\u4e32\u8d77\u6765 \u51fd\u6570\u7ec4\u5408 \u6570\u5b66\u91cc\u6211\u4eec\u7ecf\u5e38\u4f1a\u5199 \u201c\u4ee4 h(x) = f(g(x))\u201d \u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u628a\u4e24\u4e2a\u51fd\u6570 f(x), g(x) \u901a\u8fc7\u5d4c\u5957\uff0c\u7ec4\u5408\u4e3a\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 h(x)\u3002 \u7f16\u7a0b\u4e2d\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u662f\u5e38\u89c1\u7684\u3002\u5047\u8bbe\u6211\u4eec\u9700\u8981\u628a\u4e00\u4e2a\u5217\u8868 l \u91cc\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e58\u4e8c\u540e\u518d\u52a0\u4e00\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u51fd\u6570 op(x) = add1(mult2(x))\uff0c\u7136\u540e\u5bf9\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u7528\u4e00\u6b21\u8fd9\u4e2a\u51fd\u6570\u5373\u53ef\u3002 \u533f\u540d\u51fd\u6570 \u7ed9\u4e00\u4e2a\u4e1c\u897f\u547d\u540d\u603b\u662f\u5f88\u607c\u706b\u7684\uff01\u5c24\u5176\u662f\u4e00\u4e9b\u4e00\u6b21\u6027\u7684\u4e1c\u897f\uff0c\u547d\u540d\u901a\u5e38\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 add1 :: Int -> Int add1 x = x + 1 main = do print $ map add1 [1..10] main = do print $ map (\\x -> x + 1) [1..10] c++ \u7684 sort \u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6bd4\u8f83\u5668\uff0c\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7a0b\u5e8f\u91cc\u9762\u7528\u5230\u591a\u4e2a\u4e0d\u540c\u7684\u6bd4\u8f83\u5668\uff0c\u90a3\u7ed9\u8fd9\u4e9b\u6bd4\u8f83\u5668\u8d77\u4e0d\u540c\u7684\u540d\u5b57\u662f\u5341\u5206\u70e6\u4eba\u7684\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6bd4\u8f83\u5668\u90fd\u53ea\u5728\u5bf9\u5e94\u7684 sort \u51fd\u6570\u91cc\u7528\u4e00\u6b21\uff0c\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u547d\u540d\u3002 \u67ef\u91cc\u5316 \u5bf9\u4e8e\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5982\u679c\u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u6240\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u663e\u7136\u8fd8\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u53ea\u9700\u8981\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u4e86\u3002 \u6bd4\u5982 add(x, y) \u662f\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5982\u679c\u6307\u5b9a x=1\uff0c\u6240\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570 y\uff0c\u4f5c\u7528\u662f\u5c06 y \u52a0\u4e00\u3002 \u9ad8\u9636\u51fd\u6570 \u8bb2\u5230\u8fd9\u91cc\u5e94\u8be5\u5c31\u5dee\u4e0d\u591a\u4e86 \u5355\u5b50\uff08Monad\uff09 \u5355\u5b50\uff08Monad\uff09 \u662f \u81ea\u51fd\u5b50\uff08Endofunctor\uff09 \u8303\u7574\u4e0a\u7684\u4e00\u4e2a \u5e7a\u534a\u7fa4\uff08Monoid\uff09 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u578b\u53d8\uff08Variance\uff09 \u4e09\u79cd\u578b\u53d8 \u9006\u53d8 \u534f\u53d8 \u4e0d\u53d8 \u51fd\u6570\u4e0a\u7684\u578b\u53d8 \u7ed3\u6784\u7684\u578b\u53d8 \u5206\u6d3e \uff08Dispatch\uff09 \u591a\u6001 \u7279\u8bbe\uff08ad hoc\uff09\u591a\u6001 \u53c2\u6570\u591a\u6001 \u5b50\u7c7b\u578b\u591a\u6001 \u9759\u6001\u6d3e\u53d1 \u52a8\u6001\u6d3e\u53d1 \u591a\u91cd\u6d3e\u53d1 \u6d88\u606f\u6d3e\u53d1","title":"robocup\u9884\u4e60\u6750\u6599 2"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#robocup-2","text":"","title":"robocup\u9884\u4e60\u6750\u6599 2"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_1","text":"\u7f16\u7a0b\u8303\u5f0f\u662f\u7a0b\u5e8f\u5458\u8bbe\u8ba1\u7a0b\u5e8f\u65f6\u6240\u9075\u5faa\u7684 \u65b9\u6cd5\u8bba \u3002\u5b83\u6307\u5bfc\u6211\u4eec \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u89c6\u89d2\u53bb\u5206\u6790\u4e00\u4e2a\u95ee\u9898 \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u7ed3\u6784\u5c06\u5176\u8868\u793a\u4e3a\u4e00\u4e2a\u7a0b\u5e8f \u5e94\u8be5\u4ee5\u600e\u6837\u7684\u6a21\u578b\u5b8c\u6210\u5bf9\u7a0b\u5e8f\u7684\u8ba1\u7b97 \u8ba1\u7b97\u673a\uff0c\u6838\u5fc3\u5728\u4e0e \u8ba1\u7b97 \u3002\u4ec0\u4e48\u662f\u8ba1\u7b97\u5462\uff1f\u7ef4\u57fa\u767e\u79d1\u7ed9\u51fa\u7684\u89e3\u91ca\u662f\uff1a \u8ba1\u7b97\u662f\u57fa\u4e8e\u7ed9\u5b9a\u7684\u57fa\u672c\u89c4\u5219\u8fdb\u884c\u6f14\u5316\u7684\u8fc7\u7a0b\u3002","title":"\u4ec0\u4e48\u662f\u7f16\u7a0b\u8303\u5f0f\uff1f"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_2","text":"","title":"\u8ba1\u7b97\u6a21\u578b"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#1","text":"","title":"\u987a\u5e8f\u6a21\u578b 1 \u2014\u2014 \u56fe\u7075\u673a"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_3","text":"https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA","title":"\u4ec0\u4e48\u662f\u56fe\u7075\u673a\uff1f"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#computability","text":"\u7406\u53d1\u5e08\u6096\u8bba \u5c0f\u57ce\u91cc\u7684\u7406\u53d1\u5e08\u653e\u51fa\u8c6a\u8a00\uff1a\u4ed6\u8981\u4e3a\u57ce\u91cc\u4eba\u522e\u80e1\u5b50\uff0c\u800c\u4e14\u4e00\u5b9a\u53ea\u8981\u4e3a\u57ce\u91cc\u6240\u6709 \u201c\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u201d \u522e\u80e1\u5b50\u3002 \u4f46\u95ee\u9898\u662f\uff1a \u7406\u53d1\u5e08\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u5417\uff1f \u5982\u679c\u4ed6\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff0c\u90a3\u4e48\u6309\u7167\u4ed6\u7684\u8c6a\u8a00 \u201c\u53ea\u4e3a\u57ce\u91cc\u6240\u6709\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u522e\u80e1\u5b50\u201d\uff0c\u4ed6\u4e0d\u5e94\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff1b\u4f46\u5982\u679c\u4ed6\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\uff0c\u540c\u6837\u6309\u7167\u4ed6\u7684\u8c6a\u8a00 \u201c\u4e00\u5b9a\u8981\u4e3a\u57ce\u91cc\u6240\u6709\u4e0d\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u7684\u4eba\u522e\u80e1\u5b50\u201d \u4ed6\u53c8\u5e94\u8be5\u4e3a\u81ea\u5df1\u522e\u80e1\u5b50\u3002 \u505c\u673a\u95ee\u9898","title":"\u53ef\u8ba1\u7b97\u6027\uff08Computability\uff09"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_4","text":"\u80fd\u6a21\u62df\u4e00\u4e2a\u56fe\u7075\u673a\u5c31\u53eb\u56fe\u7075\u5b8c\u5907\u3002 brainfuck \u662f\u6700\u7b80\u5355\u7684\u56fe\u7075\u5b8c\u5907\u7684\u8bed\u8a00\u3002","title":"\u4ec0\u4e48\u662f\u56fe\u7075\u5b8c\u5907"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#2-fsm","text":"","title":"\u987a\u5e8f\u6a21\u578b 2 \u2014\u2014 \u6709\u9650\u72b6\u6001\u673a\uff08FSM\uff09"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_5","text":"\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\uff1a\u7ec4\u5408\u903b\u8f91 \u72b6\u6001\uff1a\u4e8c\u8fdb\u5236\u7f16\u7801 + \u5bc4\u5b58\u5668","title":"\u7ec4\u5408\u903b\u8f91\u4e0e\u65f6\u5e8f\u903b\u8f91"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#fsm","text":"","title":"\u7535\u8def\u5b9e\u73b0 FSM"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_6","text":"\u6838\u5fc3\uff1a\u72b6\u6001 \u4ece\u51af\u8bfa\u4f0a\u66fc\u8ba1\u7b97\u673a\u67b6\u6784\u7684\u89d2\u5ea6\u770b\uff0c\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u8303\u5f0f\u4e0d\u8fc7\u662f\u6c47\u7f16\u8bed\u8a00\u4e00\u5c42\u8584\u8584\u7684\u62bd\u8c61\uff0c\u800c\u6c47\u7f16\u6307\u4ee4\uff08\u9664\u4e86\u4f2a\u6307\u4ee4\uff09\u7684\u8bbe\u8ba1\u76f4\u63a5\u51b3\u5b9a\u4e86 CPU \u7684\u6307\u4ee4\u96c6\u3002","title":"\u8fc7\u7a0b\u5f0f\u7f16\u7a0b"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_7","text":"","title":"\u51fd\u6570\u5f0f\u7f16\u7a0b"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_8","text":"C \u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u548c\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u5176\u5b9e\u662f\u5f88\u4e0d\u4e00\u6837\u7684\u3002 \u6570\u5b66\u4e0a\uff0c\u51fd\u6570\u662f \u5b9a\u4e49\u57df\u5230\u503c\u57df\u7684\u4e00\u4e2a\u6620\u5c04 \u3002\u5bf9\u4e8e\u5b9a\u4e49\u57df\u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\uff0c\u503c\u57df\u4e2d\u90fd\u5b58\u5728\u552f\u4e00\u4e00\u4e2a\u5143\u7d20\u4e0e\u4e4b\u5bf9\u5e94\u3002\u4e5f\u5c31\u662f \u7ed9\u5b9a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5176\u8fd4\u56de\u503c\u5e94\u8be5\u662f\u552f\u4e00\u786e\u5b9a\u7684 \u3002 \u4f46\u8bf7\u770b\u4e0b\u9762\u7684 C \u8bed\u8a00\u7a0b\u5e8f\uff1a int x = 10; int sub_y(int y) { return x - y; } sub_y(3); // 7 sub_y(3); // 4 \u4e24\u6b21\u5bf9 sub_y \u7684\u8c03\u7528\u53c2\u6570\u90fd\u662f 3\uff0c\u4f46\u8fd4\u56de\u503c\u5374\u4e0d\u540c\u3002\u539f\u56e0\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a \u201c\u9690\u5f0f\u201d \u7684\u8f93\u5165 \u2014\u2014 \u53d8\u91cf x\u3002 \u6211\u4eec\u628a C \u548c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u548c==\u6570\u5b66\u4e0a\u7684\u51fd\u6570\u4e00\u6837\u6ee1\u8db3 \u201c\u4e0d\u7ba1\u73af\u5883\u5982\u4f55\uff0c\u53ea\u8981\u7ed9\u5b9a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5176\u8fd4\u56de\u503c\u5e94\u8be5\u662f\u552f\u4e00\u786e\u5b9a\u7684\u201d \u8fd9\u4e00\u6027\u8d28\u7684\u51fd\u6570\u79f0\u4e3a \u7eaf\u51fd\u6570 ==\uff0c\u5426\u5219\u6210\u4e3a \u6709\u526f\u4f5c\u7528\u7684\u51fd\u6570 \uff08\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 sub_y \u5c31\u662f\uff09\u3002\u8fd9\u4e00\u6027\u8d28\u79f0\u4e3a \u5f15\u7528\u900f\u660e \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c==\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u91cc\u6709 \u9700\u8981\u548c \u201c\u73af\u5883\u201c \u4ea4\u4e92\u7684\u64cd\u4f5c \uff08\u4e5f\u5c31\u662f \u526f\u4f5c\u7528 \uff09\uff0c\u90a3\u4e48\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f \u4e0d\u7eaf\u7684 ==\u3002","title":"\u5f15\u7528\u900f\u660e"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_9","text":"\u4f60\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u6709\u4ec0\u4e48\u91cd\u8981\u7684\u4e48\uff1f \u56de\u5fc6\u5316\u7b80\u6570\u5b66\u5f0f\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ece\u5185\u800c\u5916\u4e0d\u65ad\u5c06\u4e00\u90e8\u5206\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u5e76\u7528\u6c42\u503c\u5f97\u5230\u7684\u7ed3\u679c\u66ff\u6362\u4e4b\u3002\u8fd9\u4e00\u7b80\u5355\u7684\u5316\u7b80\u65b9\u6cd5\u79f0\u4e3a \u4ee3\u6362\u6a21\u578b \u3002 \u4ee5 f(g(3), h(2)) \u4e3a\u4f8b\uff0c\u5982\u679c f,g,h \u90fd\u662f\u5f15\u7528\u900f\u660e\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u4ee3\u6362\u6a21\u578b\u6c42\u503c\u3002\u6ce8\u610f\u6c42\u503c f( , ), g(3) \u548c h(2) \u7684\u987a\u5e8f\u662f\u65e0\u5173\u7d27\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u6c42\u503c\u8fd9\u4e24\u4e2a\u51fd\u6570\uff0c\u5176\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4f46\u5982\u679c f,g,h \u4e0d\u662f\u5f15\u7528\u900f\u660e\u7684\uff0c\u4ee3\u6362\u6a21\u578b\u5c31\u4e0d\u9002\u7528\u4e86\uff01\u6211\u4eec\u8981\u8003\u8651\u6c42\u503c\u7684\u5148\u540e\u987a\u5e8f\uff0c\u53d8\u91cf\u7684\u5f15\u7528\u5173\u7cfb\u7b49\u7b49\u4e00\u5927\u5806\u95ee\u9898\uff0c\u4e3a\u6b64\u6211\u4eec\u8981\u5efa\u7acb\u4e00\u4e2a\u6bd4\u4ee3\u6362\u6a21\u578b\u590d\u6742\u7684\u591a\u7684\u6c42\u503c\u6a21\u578b\u3002","title":"\u4ee3\u6362\u6a21\u578b"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_10","text":"fact :: Integer -> Integer fact 1 = 1 fact n = n * (fact (n - 1)) main = do print $ map fact [1..10] ------ Output: [1,2,6,24,120,720,5040,40320,362880,3628800] fib :: Integer -> Integer fib 1 = 1 fib 2 = 1 fib n = (fib (n - 1)) + (fib (n - 2)) main = do print $ map fib [1..10] ------ Output: [1,1,2,3,5,8,13,21,34,55]","title":"\u9012\u5f52\u7684\u5f00\u9500"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_11","text":"","title":"\u9012\u5f52\u5730\u601d\u8003"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_12","text":"gcd :: Integer -> Integer -> Integer gcd a 0 = a gcd a b = gcd b (mod a b)","title":"\u8f97\u8f6c\u76f8\u9664\u6cd5"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_13","text":"int fast_pow(int x, int a) { if (a == 1) return x; else if (a % 2 != 0) return x * fast_pow(x, a - 1); else { // \u4e3a\u4ec0\u4e48\u8981\u5f15\u5165 t\uff1f // \u76f4\u63a5 return fast_pow(x, a / 2) * fast_pow(x, a / 2) \u6709\u4ec0\u4e48\u95ee\u9898\u5417\uff1f int t = fast_pow(x, a / 2); return t * t; } } \u4f5c\u4e1a 1. \u5feb\u901f\u4e58 \u6211\u4eec\u77e5\u9053\uff0c\u4e58\u6cd5\u8ba1\u7b97\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u7cfb\u5217\u52a0\u6cd5\u8ba1\u7b97\u3002\u540c\u65f6\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u7528 \u79fb\u4f4d\u8fd0\u7b97 \u975e\u5e38\u9ad8\u6548\u5730\u8ba1\u7b97\u4e00\u4e2a\u6570 \u4e58 2 \u7684\u5e42 \u7684\u7ed3\u679c\u3002\u8bd5\u53c2\u8003\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u5b9e\u73b0\u5feb\u901f\u4e58\u7b97\u6cd5\u3002 \u8981\u6c42\uff1a\u4f7f\u7528 \u9012\u5f52\u5b9e\u73b0 \u3002(\u4fc4\u7f57\u65af\u519c\u6c11\u4e58\u6cd5)","title":"\u9012\u5f52\u5feb\u901f\u5e42"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_14","text":"\u5c3e\u9012\u5f52\u7a7a\u95f4","title":"\u5faa\u73af\u4e0e\u5c3e\u9012\u5f52"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_15","text":"#include <stdio.h> int fib(int n) { int curr = 0; int next = 1; while (n > 0) { int tmp = curr; curr = next; next = curr + tmp; n--; } return curr; } int main() { for (int i=1; i<=10; i++) { printf(\"%d \", fib(i)); } return 0; } /********* Output ********* 1 1 2 3 5 8 13 21 34 55 *************************/ fib :: Integer -> Integer -> Integer -> Integer fib 0 curr _ = curr fib n curr next = fib (n - 1) next (curr + next) main = print $ map (\\n -> fib n 0 1) [1..10] ------ Output: [1,1,2,3,5,8,13,21,34,55] #include <stdio.h> int fib(int n, int curr, int next) { if (n == 0) return curr; else return fib(n - 1, next, curr + next); } int main() { for (int i=1; i<=10; i++) { printf(\"%d \", fib(i, 0, 1)); } return 0; } /********* Output ********* 1 1 2 3 5 8 13 21 34 55 *************************/ \u4f5c\u4e1a 2. \u8bd5\u7528==\u8fed\u4ee3\u6cd5\u8ba1\u7b97\u9636\u4e58==\uff0c\u5e76\u7528\u5c3e\u9012\u5f52\u6539\u5199\u3002","title":"\u5c3e\u9012\u5f52\u6c42\u6590\u6ce2\u62c9\u5951\u6570\u5217"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_16","text":"int fast_pow(int x, int a, int ans) { if (a == 0) return ans; else if (a % 2 != 0) return fast_pow(x, a - 1, ans * x); else return fast_pow(x * x, a >> 1, ans); } \u4f5c\u4e1a 3 . \u8bd5\u7528\u5c3e\u9012\u5f52\u6539\u5199\u5feb\u901f\u4e58\u7b97\u6cd5\uff08\u4f5c\u4e1a 1\uff09","title":"\u5c3e\u9012\u5f52\u5feb\u901f\u5e42"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_17","text":"\u56de\u5fc6\u8fed\u4ee3\u6cd5\u8ba1\u7b97\u6590\u6ce2\u62c9\u5951\u6570\u5217\u7684\u8fc7\u7a0b\uff1a\u8fed\u4ee3\u4e2d\u53ea\u6709\u4e24\u4e2a\u53d8\u91cf\uff0ccurr \u548c next\uff0c\u6bcf\u6b21\u8fed\u4ee3\u5bf9\u8fd9\u4e24\u4e2a\u53d8\u91cf\u8fdb\u884c\u4ee5\u4e0b\u53d8\u6362\uff1acurr := next\uff0cnext := curr + next\uff0c\u73b0\u5728\u5c06\u8fd9\u79cd\u53d8\u6362\u79f0\u4e3a T \u53d8\u6362\u3002\u4ece\u521d\u59cb\u72b6\u6001 curr = fib(0) = 0, next = fib(1) = 1 \u5f00\u59cb\uff0c\u5c06 T \u53cd\u590d\u5e94\u7528 n \u6b21\uff0c\u5219\u53ef\u5f97\u5230 fib(n) \u548c fib(n+1)\u3002 \u4e0b\u9762\u5f15\u5165\u77e9\u9635\u8bed\u8a00\u8868\u8ff0\u4e0a\u8ff0\u8fc7\u7a0b\uff1a \u53c8\u7531\u4e8e \u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u7684\u601d\u60f3\u8ba1\u7b97 \u3002 import torch def fast_matrix_pow(mat: torch.Tensor, a: int) -> torch.Tensor: if a == 0: return mat elif a % 2 != 0: return mat @ fast_matrix_pow(mat, a - 1) else: t = fast_matrix_pow(mat, a / 2) return t @ t def fib(n: int) -> int: t0 = torch.Tensor([[0], [1]]) T = torch.Tensor([[0, 1], [1, 1]]) tn = fast_matrix_pow(T, n) @ t0 return tn[0][0].item()","title":"\u77e9\u9635\u5feb\u901f\u5e42\u8ba1\u7b97\u6590\u6ce2\u62c9\u5951\u6570\u5217"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_18","text":"","title":"\u5faa\u73af\u4e0d\u53d8\u5f0f"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#hoare","text":"\u4f5c\u4e1a 4. Lomuto \u5212\u5206\u7b97\u6cd5 \u8bd5\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u8bc1\u660e\u8fd9\u4e00\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u3002","title":"Hoare \u5212\u5206\u7b97\u6cd5\u53ca\u5176\u6b63\u786e\u6027\u8bc1\u660e"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_19","text":"","title":"\u628a\u51fd\u6570\u4e32\u8d77\u6765"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_20","text":"\u6570\u5b66\u91cc\u6211\u4eec\u7ecf\u5e38\u4f1a\u5199 \u201c\u4ee4 h(x) = f(g(x))\u201d \u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u628a\u4e24\u4e2a\u51fd\u6570 f(x), g(x) \u901a\u8fc7\u5d4c\u5957\uff0c\u7ec4\u5408\u4e3a\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 h(x)\u3002 \u7f16\u7a0b\u4e2d\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u662f\u5e38\u89c1\u7684\u3002\u5047\u8bbe\u6211\u4eec\u9700\u8981\u628a\u4e00\u4e2a\u5217\u8868 l \u91cc\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e58\u4e8c\u540e\u518d\u52a0\u4e00\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u51fd\u6570 op(x) = add1(mult2(x))\uff0c\u7136\u540e\u5bf9\u5217\u8868\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5e94\u7528\u4e00\u6b21\u8fd9\u4e2a\u51fd\u6570\u5373\u53ef\u3002","title":"\u51fd\u6570\u7ec4\u5408"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_21","text":"\u7ed9\u4e00\u4e2a\u4e1c\u897f\u547d\u540d\u603b\u662f\u5f88\u607c\u706b\u7684\uff01\u5c24\u5176\u662f\u4e00\u4e9b\u4e00\u6b21\u6027\u7684\u4e1c\u897f\uff0c\u547d\u540d\u901a\u5e38\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 add1 :: Int -> Int add1 x = x + 1 main = do print $ map add1 [1..10] main = do print $ map (\\x -> x + 1) [1..10] c++ \u7684 sort \u51fd\u6570\u9700\u8981\u4e00\u4e2a\u6bd4\u8f83\u5668\uff0c\u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7a0b\u5e8f\u91cc\u9762\u7528\u5230\u591a\u4e2a\u4e0d\u540c\u7684\u6bd4\u8f83\u5668\uff0c\u90a3\u7ed9\u8fd9\u4e9b\u6bd4\u8f83\u5668\u8d77\u4e0d\u540c\u7684\u540d\u5b57\u662f\u5341\u5206\u70e6\u4eba\u7684\u3002\u56e0\u4e3a\u6bcf\u4e2a\u6bd4\u8f83\u5668\u90fd\u53ea\u5728\u5bf9\u5e94\u7684 sort \u51fd\u6570\u91cc\u7528\u4e00\u6b21\uff0c\u6839\u672c\u6ca1\u6709\u5fc5\u8981\u547d\u540d\u3002","title":"\u533f\u540d\u51fd\u6570"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_22","text":"\u5bf9\u4e8e\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5982\u679c\u6307\u5b9a\u4e00\u4e2a\u53c2\u6570\u7684\u503c\uff0c\u6240\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u4ec0\u4e48\u4e1c\u897f\u5462\uff1f\u663e\u7136\u8fd8\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u53ea\u4e0d\u8fc7\u53ea\u9700\u8981\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u4e86\u3002 \u6bd4\u5982 add(x, y) \u662f\u4e00\u4e2a\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff0c\u5982\u679c\u6307\u5b9a x=1\uff0c\u6240\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u65b0\u51fd\u6570\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570 y\uff0c\u4f5c\u7528\u662f\u5c06 y \u52a0\u4e00\u3002","title":"\u67ef\u91cc\u5316"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_23","text":"\u8bb2\u5230\u8fd9\u91cc\u5e94\u8be5\u5c31\u5dee\u4e0d\u591a\u4e86","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#monad","text":"\u5355\u5b50\uff08Monad\uff09 \u662f \u81ea\u51fd\u5b50\uff08Endofunctor\uff09 \u8303\u7574\u4e0a\u7684\u4e00\u4e2a \u5e7a\u534a\u7fa4\uff08Monoid\uff09","title":"\u5355\u5b50\uff08Monad\uff09"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_24","text":"","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#variance","text":"","title":"\u578b\u53d8\uff08Variance\uff09"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_25","text":"","title":"\u4e09\u79cd\u578b\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_26","text":"","title":"\u9006\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_27","text":"","title":"\u534f\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_28","text":"","title":"\u4e0d\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_29","text":"","title":"\u51fd\u6570\u4e0a\u7684\u578b\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_30","text":"","title":"\u7ed3\u6784\u7684\u578b\u53d8"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#dispatch","text":"","title":"\u5206\u6d3e \uff08Dispatch\uff09"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_31","text":"","title":"\u591a\u6001"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#ad-hoc","text":"","title":"\u7279\u8bbe\uff08ad hoc\uff09\u591a\u6001"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_32","text":"","title":"\u53c2\u6570\u591a\u6001"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_33","text":"","title":"\u5b50\u7c7b\u578b\u591a\u6001"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_34","text":"","title":"\u9759\u6001\u6d3e\u53d1"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_35","text":"","title":"\u52a8\u6001\u6d3e\u53d1"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_36","text":"","title":"\u591a\u91cd\u6d3e\u53d1"},{"location":"robocup/robocup%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%202/#_37","text":"","title":"\u6d88\u606f\u6d3e\u53d1"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/","text":"\u9884\u4e60\u6750\u6599 3 \u5c0f\u7ed3\u4e00\u4e0b\u4e0a\u6b21\u57f9\u8bad\u5185\u5bb9 \u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u4e00\u4e2a\u51fd\u6570\u7eaf\u8fd8\u662f\u4e0d\u7eaf\u5462\uff1f \u56e0\u4e3a\u7eaf\u7684\u51fd\u6570\u6709\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6027\u8d28 \u2014\u2014 \u5f15\u7528\u900f\u660e \uff01\u800c\u5bf9\u4e8e\u4e00\u4e2a\u7eaf\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4ee3\u6362\u6a21\u578b \u5bf9\u5176\u6c42\u503c\u3002\u4ee3\u6362\u6a21\u578b\u662f\u7b80\u5355\u7684\u6c42\u503c\u6a21\u578b\u3002 \u6570\u5b66\u8868\u8fbe\u5f0f\u7684\u5316\u7b80\uff0c\u5c31\u662f\u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u6ce8\u610f\uff1a\u6211\u4eec\u4e0d\u7ba1\u5148\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u54ea\u4e00\u90e8\u5206\uff0c\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u7aa5\u89c1\u7eaf\u4e0e\u4e0d\u7eaf\u7684\u7cfb\u7edf\u7684\u533a\u522b\u6240\u5728\u3002 \u7eaf\u7684\u9012\u5f52 \u53ef\u4ee5\u7c7b\u6bd4\u6570\u5b66\u4e2d\u7684 \u9012\u63a8\u5173\u7cfb\u7684\u5b9a\u4e49 \u548c \u6570\u5b66\u5f52\u7eb3\u6cd5 \u5f52\u7eb3\u5047\u8bbe \u5f52\u7eb3\u5960\u57fa \u5f52\u7eb3\u9012\u63a8 \u7ed3\u8bba \u7eaf\u7684\u9012\u5f52\u53ef\u4ee5\u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u6c42\u503c\uff0c\u5982 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u628a\u524d\u9762 4 x 3 x... \u90a3\u4e00\u4e32\u7b97\u51fa\u6765\uff1f\u56e0\u4e3a\u6bcf\u6b21\u8ba1\u7b97\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u8ba1\u7b97\u4e00\u90e8\u5206\uff0c\u4e0d\u80fd\u540c\u65f6\u5bf9\u4e24\u90e8\u5206\u8fdb\u884c\u8ba1\u7b97\u3002\u4e0a\u9762\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u7684\u662f\u8ba1\u7b97 fact(x)\u3002 \u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u5bf9\u7eaf\u7684\u9012\u5f52\u8868\u8fbe\u5f0f\u6c42\u503c\u65f6\uff0c \u5f53\u524d\u8868\u8fbe\u5f0f\u7684\u957f\u5ea6 \u53ef\u4f5c\u4e3a\u8ba1\u7b97\u8fc7\u7a0b\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u6d4b\u5ea6\u3002 \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c \u8868\u8fbe\u5f0f\u957f\u5ea6\u53ef\u80fd\u589e\u957f \uff0c\u53ef\u80fd\u4e0d\u53d8\u3002 \u4e0a\u9762\u8ba1\u7b97\u9636\u4e58\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u8ba1\u7b97\u4e00\u6b21\uff0c\u8868\u8fbe\u5f0f\u957f\u5ea6\u589e\u957f 1\uff08\u5e38\u6570\uff09\u3002\u79f0\u8fd9\u6837\u8868\u8fbe\u5f0f\u957f\u5ea6\u7ebf\u6027\u589e\u957f\u7684\u9012\u5f52\u4e3a \u7ebf\u6027\u9012\u5f52 \u3002 \u9636\u4e58\u4e5f\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u8868\u8fbe\u5f0f\u957f\u5ea6\u59cb\u7ec8\u4e3a\u4e00\u5b9a\u503c\u3002\u79f0\u8fd9\u6837 \u8868\u8fbe\u5f0f\u957f\u5ea6(\u5360\u7528\u5185\u5b58)\u4e0d\u589e\u957f\u7684\u9012\u5f52\u4e3a\u5c3e\u9012\u5f52 \u3002 \u4e0a\u9762\u5bf9\u9012\u5f52\u7684\u5206\u6790\u4f7f\u7528\u7684\u6c42\u503c\u6a21\u578b\u90fd\u662f \u4ee3\u6362\u6a21\u578b \uff0c\u8981\u6c42\u9012\u5f52\u5fc5\u987b\u662f\u7eaf\u7684\u3002\u5982\u679c\u9012\u5f52\u4e0d\u662f\u7eaf\u7684\uff0c\u6211\u4eec\u5219\u9700\u8981\u4f7f\u7528\u590d\u6742\u7684\u591a\u7684 \u5e26\u72b6\u6001\u7684\u6c42\u503c\u6a21\u578b \u6765\u5206\u6790\uff08\u7f51\u4e0a\u5927\u90e8\u5206\u8bb2\u5c3e\u9012\u5f52\u7684\u6587\u7ae0\u5c31\u662f\uff09\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c \u6240\u6709\u7684\u5faa\u73af\u90fd\u53ef\u4ee5\u88ab\u7b49\u4ef7\u5730\u6539\u5199\u4e3a\u5c3e\u9012\u5f52\uff0c\u53cd\u4e4b\u4ea6\u7136 \u3002\uff08Scala\u3001Racket \u7b49\u591a\u8303\u5f0f\u8bed\u8a00\u4e2d\u7684\u5faa\u73af\u5b9e\u9645\u4e0a\u5c31\u662f\u7528\u5c3e\u9012\u5f52\u5b9e\u73b0\u7684\uff09 \u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f \u6784\u9020\u4e00\u4e2a\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u7684\u7eaf\u51fd\u6570 \u3002\u8fd9\u4e2a\u51fd\u6570\u901a\u5e38\u662f\u7531\u82e5\u5e72\u4e2a\u5c0f\u51fd\u6570\u7ec4\u5408\u800c\u6210\u7684\uff0c\u67ef\u91cc\u5316\u3001\u533f\u540d\u51fd\u6570\u3001\u9ad8\u9636\u51fd\u6570\u7b49\u90fd\u662f\u7528\u6765\u7ec4\u5408\u51fd\u6570\u7684\u6709\u7528\u5de5\u5177\u3002\u4e3a\u4fdd\u8bc1\u6574\u4e2a\u7cfb\u7edf\u662f\u7eaf\u7684\uff0c\u6211\u4eec \u4e0d\u80fd\u5f15\u5165\u53d8\u91cf \uff08 \u5e38\u91cf\u662f\u53ef\u4ee5\u7684 \uff09\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u4f7f\u7528\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u4e2d\u6211\u4eec\u719f\u6089\u7684\u5faa\u73af\uff0c\u56e0\u4e3a\u5faa\u73af\u5fc5\u987b\u8981\u6709\u53d8\u91cf\uff0c\u800c\u662f\u4f7f\u7528\u548c\u5faa\u73af\u7b49\u4ef7\u7684\u9012\u5f52\u3002\u80fd\u5c06\u9012\u5f52\u6539\u5199\u4e3a\u5c3e\u9012\u5f52\u662f\u6700\u597d\u7684\uff0c\u56e0\u4e3a\u5c3e\u9012\u5f52\u5360\u7528\u7684\u7a7a\u95f4\u662f\u5e38\u6570\uff0c\u4e0d\u4f1a\u968f\u7740\u8ba1\u7b97\u7684\u8fdb\u884c\u800c\u589e\u52a0\u3002 \u5faa\u73af\u4e0d\u53d8\u5f0f \u5feb\u901f\u6392\u5e8f\u4e2d\u7684\u4e24\u79cd\u5212\u5206\u7b97\u6cd5 \u5feb\u901f\u6392\u5e8f \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u5bf9\u8c61 = \u5c5e\u6027\uff08\u6570\u503c\uff09 + \u884c\u4e3a \u5bf9\u8c61\uff08Object\uff09\u5c5e\u6027\uff08Attribute\uff09\u884c\u4e3a\uff08action\uff09 \u7c7b \u2014\u2014 \u521b\u5efa\u5bf9\u8c61\u7684\u6a21\u677f \u7c7b\uff08Class\uff09 \u5b9e\u4f8b\uff08Instance\uff09 \u62bd\u8c61\u7c7b \u2014\u2014 \u5bf9\u5c5e\u6027\u548c\u884c\u4e3a\u7684\u62bd\u8c61 \u63a5\u53e3 \u2014\u2014 \u4ec5\u5bf9\u884c\u4e3a\u7684\u62bd\u8c61 \u63a5\u53e3\uff08Interface\uff09 \u80fd\u5bf9\u5bf9\u8c61\u8fdb\u884c\u7684\u64cd\u4f5c \u6cdb\u578b \u6cdb\u578b\u548c\u5143\u7f16\u7a0b\u7684\u6a21\u578b \u88c5\u7bb1 \u5355\u6001\u5316 \u591a\u6001 \u6d3e\u53d1 \u9759\u6001\u6d3e\u53d1 \u8bf4\u8bf4C++\u7684Concept \u52a8\u6001\u6d3e\u53d1 \u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6 & \u5e93 \u5e93 \u4e00\u4e9b\u4e0d\u7528\u7f16\u8bd1\u5c31\u80fd\u4f7f\u7528\u7684\u51fd\u6570\u6253\u5305\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u5e93\u3002\u4e00\u4e2a\u5e93\u7684\u5934\u6587\u4ef6\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u8fd9\u4e2a\u5e93\u7684\u8bf4\u660e\u4e66\uff0c\u6307\u660e\u4e86\u5e93\u91cc\u9762\u6709\u90a3\u4e9b\u51fd\u6570\u662f\u53ef\u7528\u7684\uff0c\u5e94\u8be5\u600e\u4e48\u7528\uff08\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u8fd4\u56de\u503c\u662f\u4ec0\u4e48\uff09\u3002 \u4e4b\u6240\u4ee5\u4e0d\u7528\u7f16\u8bd1\u5c31\u80fd\u7528\uff0c\u56e0\u4e3a\u9884\u5148\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u4e86\u3002\u56e0\u6b64\u751f\u6210\u4e00\u4e2a\u5e93\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u7528\u7f16\u8bd1\u5668\u7f16\u8bd1\u5c31\u597d\u4e86\u3002","title":"\u9884\u4e60\u6750\u6599 3"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#3","text":"","title":"\u9884\u4e60\u6750\u6599 3"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_1","text":"\u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u4e00\u4e2a\u51fd\u6570\u7eaf\u8fd8\u662f\u4e0d\u7eaf\u5462\uff1f \u56e0\u4e3a\u7eaf\u7684\u51fd\u6570\u6709\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u6027\u8d28 \u2014\u2014 \u5f15\u7528\u900f\u660e \uff01\u800c\u5bf9\u4e8e\u4e00\u4e2a\u7eaf\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u4ee3\u6362\u6a21\u578b \u5bf9\u5176\u6c42\u503c\u3002\u4ee3\u6362\u6a21\u578b\u662f\u7b80\u5355\u7684\u6c42\u503c\u6a21\u578b\u3002 \u6570\u5b66\u8868\u8fbe\u5f0f\u7684\u5316\u7b80\uff0c\u5c31\u662f\u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u5bf9\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u6ce8\u610f\uff1a\u6211\u4eec\u4e0d\u7ba1\u5148\u8ba1\u7b97\u8868\u8fbe\u5f0f\u7684\u54ea\u4e00\u90e8\u5206\uff0c\u6700\u540e\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u7aa5\u89c1\u7eaf\u4e0e\u4e0d\u7eaf\u7684\u7cfb\u7edf\u7684\u533a\u522b\u6240\u5728\u3002 \u7eaf\u7684\u9012\u5f52 \u53ef\u4ee5\u7c7b\u6bd4\u6570\u5b66\u4e2d\u7684 \u9012\u63a8\u5173\u7cfb\u7684\u5b9a\u4e49 \u548c \u6570\u5b66\u5f52\u7eb3\u6cd5 \u5f52\u7eb3\u5047\u8bbe \u5f52\u7eb3\u5960\u57fa \u5f52\u7eb3\u9012\u63a8 \u7ed3\u8bba \u7eaf\u7684\u9012\u5f52\u53ef\u4ee5\u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u6c42\u503c\uff0c\u5982 \u4f60\u53ef\u80fd\u4f1a\u95ee\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u628a\u524d\u9762 4 x 3 x... \u90a3\u4e00\u4e32\u7b97\u51fa\u6765\uff1f\u56e0\u4e3a\u6bcf\u6b21\u8ba1\u7b97\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u8ba1\u7b97\u4e00\u90e8\u5206\uff0c\u4e0d\u80fd\u540c\u65f6\u5bf9\u4e24\u90e8\u5206\u8fdb\u884c\u8ba1\u7b97\u3002\u4e0a\u9762\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u7684\u662f\u8ba1\u7b97 fact(x)\u3002 \u4f7f\u7528\u4ee3\u6362\u6a21\u578b\u5bf9\u7eaf\u7684\u9012\u5f52\u8868\u8fbe\u5f0f\u6c42\u503c\u65f6\uff0c \u5f53\u524d\u8868\u8fbe\u5f0f\u7684\u957f\u5ea6 \u53ef\u4f5c\u4e3a\u8ba1\u7b97\u8fc7\u7a0b\u6240\u9700\u7a7a\u95f4\u5927\u5c0f\u7684\u6d4b\u5ea6\u3002 \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c \u8868\u8fbe\u5f0f\u957f\u5ea6\u53ef\u80fd\u589e\u957f \uff0c\u53ef\u80fd\u4e0d\u53d8\u3002 \u4e0a\u9762\u8ba1\u7b97\u9636\u4e58\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u8ba1\u7b97\u4e00\u6b21\uff0c\u8868\u8fbe\u5f0f\u957f\u5ea6\u589e\u957f 1\uff08\u5e38\u6570\uff09\u3002\u79f0\u8fd9\u6837\u8868\u8fbe\u5f0f\u957f\u5ea6\u7ebf\u6027\u589e\u957f\u7684\u9012\u5f52\u4e3a \u7ebf\u6027\u9012\u5f52 \u3002 \u9636\u4e58\u4e5f\u53ef\u4ee5\u8fd9\u6837\u8ba1\u7b97\uff1a \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u8868\u8fbe\u5f0f\u957f\u5ea6\u59cb\u7ec8\u4e3a\u4e00\u5b9a\u503c\u3002\u79f0\u8fd9\u6837 \u8868\u8fbe\u5f0f\u957f\u5ea6(\u5360\u7528\u5185\u5b58)\u4e0d\u589e\u957f\u7684\u9012\u5f52\u4e3a\u5c3e\u9012\u5f52 \u3002 \u4e0a\u9762\u5bf9\u9012\u5f52\u7684\u5206\u6790\u4f7f\u7528\u7684\u6c42\u503c\u6a21\u578b\u90fd\u662f \u4ee3\u6362\u6a21\u578b \uff0c\u8981\u6c42\u9012\u5f52\u5fc5\u987b\u662f\u7eaf\u7684\u3002\u5982\u679c\u9012\u5f52\u4e0d\u662f\u7eaf\u7684\uff0c\u6211\u4eec\u5219\u9700\u8981\u4f7f\u7528\u590d\u6742\u7684\u591a\u7684 \u5e26\u72b6\u6001\u7684\u6c42\u503c\u6a21\u578b \u6765\u5206\u6790\uff08\u7f51\u4e0a\u5927\u90e8\u5206\u8bb2\u5c3e\u9012\u5f52\u7684\u6587\u7ae0\u5c31\u662f\uff09\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c \u6240\u6709\u7684\u5faa\u73af\u90fd\u53ef\u4ee5\u88ab\u7b49\u4ef7\u5730\u6539\u5199\u4e3a\u5c3e\u9012\u5f52\uff0c\u53cd\u4e4b\u4ea6\u7136 \u3002\uff08Scala\u3001Racket \u7b49\u591a\u8303\u5f0f\u8bed\u8a00\u4e2d\u7684\u5faa\u73af\u5b9e\u9645\u4e0a\u5c31\u662f\u7528\u5c3e\u9012\u5f52\u5b9e\u73b0\u7684\uff09 \u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f \u6784\u9020\u4e00\u4e2a\u4ece\u8f93\u5165\u5230\u8f93\u51fa\u7684\u7eaf\u51fd\u6570 \u3002\u8fd9\u4e2a\u51fd\u6570\u901a\u5e38\u662f\u7531\u82e5\u5e72\u4e2a\u5c0f\u51fd\u6570\u7ec4\u5408\u800c\u6210\u7684\uff0c\u67ef\u91cc\u5316\u3001\u533f\u540d\u51fd\u6570\u3001\u9ad8\u9636\u51fd\u6570\u7b49\u90fd\u662f\u7528\u6765\u7ec4\u5408\u51fd\u6570\u7684\u6709\u7528\u5de5\u5177\u3002\u4e3a\u4fdd\u8bc1\u6574\u4e2a\u7cfb\u7edf\u662f\u7eaf\u7684\uff0c\u6211\u4eec \u4e0d\u80fd\u5f15\u5165\u53d8\u91cf \uff08 \u5e38\u91cf\u662f\u53ef\u4ee5\u7684 \uff09\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u4f7f\u7528\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u4e2d\u6211\u4eec\u719f\u6089\u7684\u5faa\u73af\uff0c\u56e0\u4e3a\u5faa\u73af\u5fc5\u987b\u8981\u6709\u53d8\u91cf\uff0c\u800c\u662f\u4f7f\u7528\u548c\u5faa\u73af\u7b49\u4ef7\u7684\u9012\u5f52\u3002\u80fd\u5c06\u9012\u5f52\u6539\u5199\u4e3a\u5c3e\u9012\u5f52\u662f\u6700\u597d\u7684\uff0c\u56e0\u4e3a\u5c3e\u9012\u5f52\u5360\u7528\u7684\u7a7a\u95f4\u662f\u5e38\u6570\uff0c\u4e0d\u4f1a\u968f\u7740\u8ba1\u7b97\u7684\u8fdb\u884c\u800c\u589e\u52a0\u3002","title":"\u5c0f\u7ed3\u4e00\u4e0b\u4e0a\u6b21\u57f9\u8bad\u5185\u5bb9"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_2","text":"","title":"\u5faa\u73af\u4e0d\u53d8\u5f0f"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_3","text":"\u5feb\u901f\u6392\u5e8f","title":"\u5feb\u901f\u6392\u5e8f\u4e2d\u7684\u4e24\u79cd\u5212\u5206\u7b97\u6cd5"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_4","text":"","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_5","text":"\u5bf9\u8c61\uff08Object\uff09\u5c5e\u6027\uff08Attribute\uff09\u884c\u4e3a\uff08action\uff09","title":"\u5bf9\u8c61 = \u5c5e\u6027\uff08\u6570\u503c\uff09 + \u884c\u4e3a"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_6","text":"\u7c7b\uff08Class\uff09 \u5b9e\u4f8b\uff08Instance\uff09","title":"\u7c7b \u2014\u2014 \u521b\u5efa\u5bf9\u8c61\u7684\u6a21\u677f"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_7","text":"","title":"\u62bd\u8c61\u7c7b \u2014\u2014 \u5bf9\u5c5e\u6027\u548c\u884c\u4e3a\u7684\u62bd\u8c61"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_8","text":"\u63a5\u53e3\uff08Interface\uff09 \u80fd\u5bf9\u5bf9\u8c61\u8fdb\u884c\u7684\u64cd\u4f5c","title":"\u63a5\u53e3 \u2014\u2014 \u4ec5\u5bf9\u884c\u4e3a\u7684\u62bd\u8c61"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_9","text":"\u6cdb\u578b\u548c\u5143\u7f16\u7a0b\u7684\u6a21\u578b","title":"\u6cdb\u578b"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_10","text":"","title":"\u88c5\u7bb1"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_11","text":"","title":"\u5355\u6001\u5316"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_12","text":"","title":"\u591a\u6001"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_13","text":"","title":"\u6d3e\u53d1"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_14","text":"\u8bf4\u8bf4C++\u7684Concept","title":"\u9759\u6001\u6d3e\u53d1"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_15","text":"","title":"\u52a8\u6001\u6d3e\u53d1"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_16","text":"","title":"\u7f16\u8bd1\u5230\u53ef\u6267\u884c\u6587\u4ef6 &amp; \u5e93"},{"location":"robocup/%E9%A2%84%E4%B9%A0%E6%9D%90%E6%96%99%203/#_17","text":"\u4e00\u4e9b\u4e0d\u7528\u7f16\u8bd1\u5c31\u80fd\u4f7f\u7528\u7684\u51fd\u6570\u6253\u5305\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u5e93\u3002\u4e00\u4e2a\u5e93\u7684\u5934\u6587\u4ef6\u53ef\u4ee5\u7c7b\u6bd4\u4e3a\u8fd9\u4e2a\u5e93\u7684\u8bf4\u660e\u4e66\uff0c\u6307\u660e\u4e86\u5e93\u91cc\u9762\u6709\u90a3\u4e9b\u51fd\u6570\u662f\u53ef\u7528\u7684\uff0c\u5e94\u8be5\u600e\u4e48\u7528\uff08\u53c2\u6570\u662f\u4ec0\u4e48\uff0c\u8fd4\u56de\u503c\u662f\u4ec0\u4e48\uff09\u3002 \u4e4b\u6240\u4ee5\u4e0d\u7528\u7f16\u8bd1\u5c31\u80fd\u7528\uff0c\u56e0\u4e3a\u9884\u5148\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u4e86\u3002\u56e0\u6b64\u751f\u6210\u4e00\u4e2a\u5e93\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u7528\u7f16\u8bd1\u5668\u7f16\u8bd1\u5c31\u597d\u4e86\u3002","title":"\u5e93"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/","text":"\u6574\u6d01\u4ee3\u7801 \u8ba9\u8bfb\u7684\u8fc7\u7a0b\u4fbf\u8f7b\u677e\uff0c\u5373\u4f7f\u7f16\u5199\u8fc7\u7a0b\u56f0\u96be \u6709\u610f\u4e49\u7684\u547d\u540d \u540d\u526f\u5176\u5b9e == \u547d\u540d\u5fc5\u987b\u6709\u610f\u4e49 == - \u6a21\u7cca\u5ea6\uff1a\u4e0a\u4e0b\u6587\u5728\u4ee3\u7801\u4e2d\u672a\u88ab\u660e\u786e\u4f53\u73b0\u7684\u7a0b\u5ea6 \u907f\u514d\u8bef\u5bfc \u907f\u514d\u7559\u4e0b\u63a9\u85cf\u4ee3\u7801\u672c\u610f\u7684\u9519\u8bef\u7ebf\u7d22\uff0c\u907f\u514d\u4f7f\u7528\u4e0e\u672c\u610f\u76f8\u6096\u7684\u8bcd \u63d0\u9632\u4f7f\u7528\u4e0d\u540c\u4e4b\u5904\u8f83\u5c0f\u7684\u540d\u79f0 \u505a\u6709\u610f\u4e49\u7684\u533a\u5206 \u901a\u8fc7\u533a\u5206\u63d0\u4f9b\u4e0d\u540c\u7684\u4fe1\u606f \u4f7f\u7528\u8bfb\u7684\u51fa\u6765\u7684\u540d\u79f0 \u65b9\u4fbf\u53e3\u5934\u8868\u8ff0 \u4f7f\u7528\u53ef\u641c\u7d22\u7684\u540d\u79f0 \u867d\u7136\u957f\u4f46\u65b9\u4fbf\u68c0\u7d22\u548c\u8fa8\u522b \u907f\u514d\u4f7f\u7528\u7f16\u7801 \u907f\u514d\u601d\u7ef4\u6620\u5c04 \u660e\u786e\u662f\u738b\u9053 \u7c7b\u540d \u540d\u8bcd \u65b9\u6cd5\u540d \u52a8\u8bcd \u6bcf\u4e2a\u6982\u5ff5\u5bf9\u5e94\u4e00\u4e2a\u8bcd \u51fd\u6570\u540d\u79f0\u5e94\u8be5\u72ec\u4e00\u65e0\u4e8c\u5e76\u4e14\u4fdd\u6301\u4e00\u81f4 \u522b\u7528\u53cc\u5173\u8bed \u4f7f\u7528\u89e3\u51b3\u65b9\u6848\u9886\u57df\u540d\u79f0 \u5c3d\u91cf\u4f7f\u7528\u672f\u8bed\u3001\u7b97\u6cd5\u540d\u3001\u6a21\u5f0f\u540d\u3001\u6570\u5b66\u672f\u8bed \u4f7f\u7528\u6e90\u81ea\u6240\u6d89\u95ee\u9898\u9886\u57df\u7684\u540d\u79f0 \u6dfb\u52a0\u6709\u610f\u4e49\u7684\u8bed\u5883 \u5355\u72ec\u51fa\u73b0\u7684 state \u4e0e\u6dfb\u52a0\u4e86\u8bed\u5883\u540e\u5355\u72ec\u51fa\u73b0\u7684 addrstate \u66f4\u597d\u7684\u65b9\u6848\uff1a\u521b\u5efa\u540d\u4e3a Address \u7684\u7c7b \u4e0d\u8981\u6dfb\u52a0\u6ca1\u7528\u7684\u8bed\u5883 \u51fd\u6570 \u77ed\u5c0f \u6bcf\u4e2a\u51fd\u6570\u90fd\u53ea\u8bf4\u4e00\u4ef6\u4e8b \u6bcf\u4e2a\u51fd\u6570\u90fd\u4f9d\u5e8f\u628a\u4f60\u5e26\u5230\u4e0b\u4e00\u4e2a\u51fd\u6570 \u907f\u514d\u8fc7\u591a\u7684\u7f29\u8fdb\u548c\u5d4c\u5957\u5faa\u73af \u53ea\u505a\u4e00\u4ef6\u4e8b \u51fd\u6570\u5e94\u8be5\u505a\u4e00\u4ef6\u4e8b\uff0c\u505a\u597d\u8fd9\u4ef6\u4e8b \u8981\u5224\u65ad\u51fd\u6570\u662f\u5426\u53ea\u505a\u4e86\u4e00\u4ef6\u4e8b\uff0c\u5c31\u770b\u662f\u5426\u80fd\u518d\u62c6\u9664\u4e00\u4e2a\u51fd\u6570 \u6bcf\u4e2a\u51fd\u6570\u4e00\u4e2a\u62bd\u8c61\u5c42\u7ea7 \u62bd\u8c61\u5c42\u6b21 - ryelqy - \u535a\u5ba2\u56ed - \u8981\u786e\u4fdd\u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u90fd\u8981\u5728\u540c\u4e00\u62bd\u8c61\u5c42\u7ea7\u4e0a - \u4ee3\u7801\u6e05\u53553-7 switch\u8bed\u53e5 \u786e\u4fdd\u6bcf\u4e2aswitch\u90fd\u57cb\u85cf\u5728\u8f83\u4f4e\u7684\u62bd\u8c61\u5c42\u7ea7\uff0c\u5e76\u4e14\u6c38\u4e0d\u91cd\u590d \u5229\u7528\u591a\u6001\u6765\u5b9e\u73b0 \u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u79f0 \u63cf\u8ff0\u51fd\u6570\u6240\u505a\u7684\u4e8b \u522b\u5bb3\u6015\u957f\u540d\u79f0 \u522b\u5bb3\u6015\u82b1\u65f6\u95f4\u53d6\u540d\u5b57 \u63cf\u8ff0\u6027\u7684\u540d\u79f0\u80fd\u591f\u7406\u6e05\u5173\u4e8e\u6a21\u5757\u7684\u8bbe\u8ba1\u601d\u8def \u547d\u540d\u65b9\u5f0f\u4fdd\u6301\u4e00\u81f4 \u51fd\u6570\u53c2\u6570 \u6700\u7406\u60f3\uff1a\u96f6\u53c2\u6570 \u4e0d\u592a\u671f\u671b\u4fe1\u606f\u901a\u8fc7\u53c2\u6570\u8f93\u51fa\uff08\u5229\u7528\u9762\u5411\u5bf9\u8c61\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d\uff09 \u4e00\u5143\u51fd\u6570\u7684\u666e\u904d\u5f62\u5f0f \u8be2\u95ee\u6709\u5173\u53c2\u6570\u7684\u95ee\u9898 \u64cd\u4f5c\u8be5\u53c2\u6570 \u5982\u679c\u51fd\u6570\u8981\u5bf9\u8f93\u5165\u53c2\u6570\u8fdb\u884c\u8f6c\u6362\u64cd\u4f5c\uff0c\u8f6c\u6362\u7ed3\u679c\u5e94\u8be5\u4f53\u73b0\u5728\u8fd4\u56de\u503c \u6807\u8bc6\u53c2\u6570 \u4e11\u964b\u4e0d\u582a\uff0c\u7834\u574f\u4e86\u51fd\u6570\u5355\u4e2a\u62bd\u8c61\u5c42\u7ea7 \u4e8c\u5143\u51fd\u6570 \u81ea\u7136\u7684\u7ec4\u5408\u6216\u81ea\u7136\u7684\u6392\u5e8f \u5c3d\u91cf\u5229\u7528\u4e00\u4e9b\u673a\u5236\u5c06\u4e8c\u5143\u8f6c\u6362\u4e3a\u4e00\u5143 \u4e09\u5143\u51fd\u6570 \u53c2\u6570\u5bf9\u8c61 \u5982\u679c\u51fd\u6570\u9700\u8981\u4e09\u4e2a\u4ee5\u4e0a\u7684\u53c2\u6570\uff0c\u5219\u8bf4\u660e\u8fd9\u4e9b\u53c2\u6570\u9700\u8981\u5c01\u88c5\u6210\u7c7b \u65e0\u526f\u4f5c\u7528 \u53ef\u80fd\u5bfc\u81f4\u53e4\u602a\u7684 \u65f6\u5e8f\u8026\u5408 \u53ca\u987a\u5e8f\u4f9d\u8d56 \u5206\u9694\u6307\u4ee4\u4e0e\u8be2\u95ee \u51fd\u6570\u8981\u4e48\u505a\u4ec0\u4e48\u4e8b\uff0c\u8981\u4e48\u56de\u7b54\u4ec0\u4e48\u4e8b ==\u4f7f\u7528\u5f02\u5e38\u66ff\u4ee3\u8fd4\u56de\u9519\u8bef\u7801== \u4f7f\u7528\u5f02\u5e38\u4ee3\u66ff\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u5c31\u80fd\u4ece\u4e3b\u8def\u5f84\u4ee3\u7801\u4e2d\u5206\u79bb \u62bd\u79bbtry/catch\u4ee3\u7801\u5757\uff0c\uff0c\u72ec\u7acb\u5f62\u6210\u4e00\u4e2a\u51fd\u6570 \u4f7f\u7528\u5f02\u5e38\u66ff\u4ee3\u9519\u8bef\u7801\uff0c\u65b0\u5f02\u5e38\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u65e7\u5f02\u5e38\u4e2d\u6d3e\u751f\u51fa\u6765 \u5982\u4f55\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570 \u7c97\u7a3f\uff1a\u5197\u957f\u800c\u590d\u6742 \u6253\u78e8\uff1a \u5206\u89e3\u51fd\u6570 \u4fee\u6539\u540d\u79f0 \u6d88\u9664\u91cd\u590d \u4fdd\u6301\u6d4b\u8bd5\u901a\u8fc7 \u6ce8\u91ca \u6ce8\u91ca\u7684\u4f5c\u7528\uff1a \u5f25\u8865 \u5728\u7528\u4ee3\u7801\u8868\u8fbe\u610f\u56fe\u65f6\u906d\u9047\u7684 \u5931\u8d25 \u628a\u529b\u6c14\u653e\u5728 \u4e66\u5199\u6e05\u695a\u4ee3\u7801 \u4e0a \u4e0d\u51c6\u786e\u7684\u6ce8\u91ca\u6bd4\u6ca1\u6709\u6ce8\u91ca\u574f\u7684\u591a \u6ce8\u91ca\u4e0d\u80fd\u7f8e\u5316\u7cdf\u7cd5\u7684\u4ee3\u7801 \u5199\u6ce8\u91ca\u7684 \u52a8\u673a \u4e4b\u4e00\uff1a \u7cdf\u7cd5\u4ee3\u7801 \u7684\u5b58\u5728 == \u628a\u4ee3\u7801\u5f04\u5e72\u51c0\uff01\uff01 == ==\u82b1\u65f6\u95f4 \u6e05\u6d01\u7cdf\u7cd5\u7684\u4ee3\u7801 == \u7528\u4ee3\u7801\u6765\u9610\u8ff0 \u597d\u6ce8\u91ca \u6cd5\u5f8b\u4fe1\u606f ==\u63d0\u4f9b\u6d88\u606f==\u7684\u6ce8\u91ca \u6ce8\u91ca\u67d0\u4e2a\u62bd\u8c61\u65b9\u6cd5\u7684\u8fd4\u56de\u503c \u5c3d\u91cf\u5229\u7528\u51fd\u6570\u540d\u79f0\u4f20\u8fbe\u6d88\u606f \u5bf9\u610f\u56fe\u7684\u89e3\u91ca \u9610\u91ca\uff1a \u628a\u6666\u6da9\u96be\u61c2\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u7684\u610f\u4e49\u7ffb\u8bd1\u4e3a\u67d0\u79cd\u523b\u5ea6\u7684\u5f62\u5f0f \u8b66\u793a ==TODO\u6ce8\u91ca== \u7a0b\u5e8f\u5458\u8ba4\u4e3a\u5e94\u8be5\u505a\u800c\u8fd8\u6ca1\u505a\u7684\u4e8b \u5b9a\u671f\u67e5\u770b\uff0c\u5220\u9664\u4e0d\u518d\u9700\u8981\u7684 \u653e\u5927 \u653e\u5927\u67d0\u79cd\u770b\u6765\u4e0d\u5408\u7406\u4e4b\u7269\u7684\u91cd\u8981\u6027 \u516c\u5171API\u4e2d\u7684Javadoc \u574f\u6ce8\u91ca \u5583\u5583\u81ea\u8bed \u5982\u679c\u51b3\u5b9a\u5199\u6ce8\u91ca\uff0c\u5c31\u82b1\u65f6\u95f4\u5199\u6700\u597d\u7684\u6ce8\u91ca \u591a\u4f59\u7684\u6ce8\u91ca \u8bef\u5bfc\u6027\u6ce8\u91ca \u5faa\u89c4\u5f0f\u6ce8\u91ca \u65e5\u5fd7\u5f0f\u6ce8\u91ca \u5e9f\u8bdd\u6ce8\u91ca \u5e9f\u8bdd \u80fd\u7528\u51fd\u6570\u6216\u53d8\u91cf\u65f6\u5c31\u522b\u7528\u6ce8\u91ca \u4f4d\u7f6e\u6807\u8bb0 \u62ec\u53f7\u540e\u7684\u6ce8\u91ca \u5f52\u5c5e\u4e0e\u7f72\u540d \u6ce8\u91ca\u6389\u7684\u4ee3\u7801 HTML\u6ce8\u91ca \u975e\u672c\u5730\u4fe1\u606f \u5982\u679c\u4e00\u5b9a\u8981\u5199\u6ce8\u91ca\uff0c\u786e\u4fdd\u5b83\u63cf\u8ff0\u4e86\u79bb\u4ed6\u6700\u8fd1\u7684\u4ee3\u7801 \u4fe1\u606f\u8fc7\u591a \u4e0d\u660e\u663e\u7684\u5173\u7cfb \u683c\u5f0f \u5782\u76f4\u683c\u5f0f \u6982\u5ff5\u95f4\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u533a\u9694 \u6bcf\u7ec4\u4ee3\u7801\u884c\u5c55\u793a\u4e00\u6761\u5b8c\u6574\u7684\u601d\u8def \u6bcf\u4e2a\u7a7a\u767d\u884c\u90fd\u662f\u4e00\u6761\u7ebf\u7d22\uff0c\u6807\u8bc6\u51fa\u65b0\u7684\u72ec\u7acb\u6982\u5ff5 \u5782\u76f4\u65b9\u5411\u4e0a\u7684\u9760\u8fd1 \u9760\u8fd1\u7684\u4ee3\u7801\u884c\u6697\u793a\u4e86\u4ed6\u4eec\u4e4b\u95f4\u7684\u7d27\u5bc6\u5173\u7cfb \u5782\u76f4\u8ddd\u79bb \u5173\u7cfb\u5bc6\u5207\u7684\u6982\u5ff5\u5e94\u8be5\u4e92\u76f8\u9760\u8fd1 \u53d8\u91cf\u58f0\u660e\uff1a\u53d8\u91cf\u58f0\u660e\u5e94\u8be5\u5c3d\u53ef\u80fd\u9760\u8fd1\u5176\u4f7f\u7528\u7684\u4f4d\u7f6e \u5faa\u73af\u4e2d\u7684\u63a7\u5236\u53d8\u91cf\u5e94\u8be5\u603b\u662f\u518d\u5faa\u73af\u8bed\u53e5\u4e2d\u58f0\u660e \u5b9e\u4f53\u53d8\u91cf\u5e94\u8be5\u5728\u7c7b\u7684\u9876\u90e8\u58f0\u660e \u82e5\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e86\u53e6\u5916\u4e00\u4e2a\uff0c\u5c31\u5e94\u8be5\u628a\u4ed6\u4eec\u653e\u5230\u4e00\u8d77 \u8c03\u7528\u8005\u5e94\u8be5\u5c3d\u53ef\u80fd\u653e\u5728\u88ab\u8c03\u7528\u8005\u4e4b\u4e0a \u6982\u5ff5\u76f8\u5173\u7684\u4ee3\u7801\u5e94\u8be5\u653e\u5230\u4e00\u8d77 \u76f8\u5173\u6027\u8d8a\u5f3a\uff0c\u5f7c\u6b64\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c31\u5e94\u8be5\u8d8a\u77ed \u5373\u4f7f\u6ca1\u6709\u4e92\u76f8\u8c03\u7528\uff0c\u4e5f\u5e94\u8be5\u653e\u5728\u4e00\u8d77 \u6a2a\u5411\u683c\u5f0f \u5728\u8d4b\u503c\u64cd\u4f5c\u7b26\u5468\u56f4\u52a0\u4e0a\u7a7a\u683c\u5b57\u7b26\uff0c\u8fbe\u5230\u5f3a\u8c03\u7684\u76ee\u7684 \u4e0d\u518d\u51fd\u6570\u540d\u548c\u5de6\u5706\u62ec\u53f7\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\uff0c\u8868\u660e\u51fd\u6570\u4e0e\u5176\u53c2\u6570\u5bc6\u5207\u76f8\u5173 \u7a7a\u683c\u5b57\u7b26\u7684\u53e6\u4e00\u79cd\u7528\u6cd5\uff1a\u5f3a\u8c03\u5176\u524d\u9762\u7684\u8fd0\u7b97\u7b26 \u4e58\u6cd5\u56e0\u5b50\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\uff0c\u8868\u660e\u9ad8\u4f18\u5148\u7ea7 \u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784 \u6570\u636e\u62bd\u8c61 \u4ee5\u6700\u597d\u7684\u65b9\u5f0f\u5448\u73b0\u67d0\u4e2a\u5bf9\u8c61\u5305\u542b\u7684\u6570\u636e \u6570\u636e\u3001\u5bf9\u8c61\u7684\u53cd\u5bf9\u79f0\u6027 \u8fc7\u7a0b\u5f0f\u4ee3\u7801 \u5728\u4e0d\u6539\u52a8\u65e2\u6709\u6570\u636e\u7ed3\u6784\u7684\u524d\u63d0\u4e0b\u6dfb\u52a0\u65b0\u51fd\u6570 \u96be\u4ee5\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u4e3a\u5fc5\u987b\u4fee\u6539\u6240\u6709\u51fd\u6570 \u9762\u5411\u5bf9\u8c61\u5f0f\u4ee3\u7801 \u5728\u4e0d\u6539\u52a8\u65e2\u6709\u51fd\u6570\u7684\u524d\u63d0\u4e0b\u6dfb\u52a0\u65b0\u7c7b \u96be\u4ee5\u6dfb\u52a0\u65b0\u51fd\u6570\uff0c\u56e0\u4e3a\u5fc5\u987b\u4fee\u6539\u7c7b \u5f97\u58a8\u5fd2\u8033\u5f8b \u6a21\u5757\u4e0d\u5e94\u4e86\u89e3\u5b83\u6240\u64cd\u4f5c\u5bf9\u8c61\u5185\u90e8\u7684\u60c5\u5f62 \u7c7bC\u7684\u65b9\u6cd5f\u53ea\u5e94\u8be5\u8c03\u7528\u4ee5\u4e0b\u5bf9\u8c61\u7684\u65b9\u6cd5 C \u7531f\u521b\u5efa\u7684\u5bf9\u8c61 \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9f\u7684\u5bf9\u8c61 \u7531C\u7684\u5b9e\u4f53\u53d8\u91cf\u6301\u6709\u7684\u5bf9\u8c61 \u6570\u636e\u4f20\u9001\u5bf9\u8c61 \u53ea\u6709\u516c\u5171\u53d8\u91cf\u3001\u6ca1\u6709\u51fd\u6570\u7684\u7c7b \u6570\u636e\u5e93\u901a\u4fe1\u3001 \u9519\u8bef\u5904\u7406 \u9519\u8bef\u5904\u7406\u975e\u5e38\u91cd\u8981\uff0c\u4f46\u5982\u679c\u5b83\u641e\u4e71\u4e86\u4ee3\u7801\u903b\u8f91\uff0c\u5c31\u662f\u9519\u8bef\u7684\u505a\u6cd5 \u4f7f\u7528\u5f02\u5e38\u800c\u975e\u8fd4\u56de\u7801 \u9047\u5230\u9519\u8bef\u65f6\uff0c\u6700\u597d\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38 \u5148\u5199Try-Catch-Finally\u8bed\u53e5 try\u662f\u4e8b\u52a1 catch\u5c06\u7a0b\u5e8f\u7ef4\u6301\u5728\u4e00\u79cd\u6301\u7eed\u7684\u72b6\u6001 \u4f7f\u7528\u4e0d\u53ef\u63a7\u5f02\u5e38 \u53ef\u63a7\u5f02\u5e38\u7684\u4ee3\u4ef7\uff1a \u8fdd\u53cd\u5f00\u95ed\u539f\u5219 \u5982\u679c\u5f02\u5e38\u53ef\u63a7\uff0c\u51fd\u6570\u7b7e\u540d\u5c31\u8981\u6dfb\u52a0throw\u5b50\u53e5 \u7ed9\u51fa\u5f02\u5e38\u53d1\u751f\u7684\u73af\u5883\u8bf4\u660e \u629b\u51fa\u7684\u6bcf\u4e00\u4e2a\u5f02\u5e38\uff0c\u90fd\u5e94\u5f53\u63d0\u4f9b\u8db3\u591f\u7684\u73af\u5883\u8bf4\u660e\uff0c\u4e00\u8fb9\u5224\u65ad\u9519\u8bef\u7684\u6765\u6e90\u548c\u5904\u6240 \u521b\u5efa\u4fe1\u606f\u5145\u5206\u7684\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4e14\u548c\u5f02\u5e38\u4e00\u8d77\u4f20\u9012\u51fa\u53bb \u4f20\u9012\u8db3\u591f\u7684\u4fe1\u606f\u7ed9catch\u5757\uff0c\u5e76\u4e14\u8bb0\u5f55\u4e0b\u6765 \u4f9d\u8c03\u7528\u8005\u9700\u8981\u5b9a\u4e49\u5f02\u5e38\u7c7b \u901a\u8fc7\u6253\u5305\u8c03\u7528API\u3001\u786e\u4fdd\u5b83\u8fd4\u56de\u901a\u7528\u5f02\u5e38\u7c7b\u578b->\u7b80\u5316\u4ee3\u7801 \u522b\u8fd4\u56denull\u503c \u5982\u679c\u6253\u7b97\u5728\u65b9\u6cd5\u4e2d\u8fd4\u56denull\u503c\uff0c\u4e0d\u5982\u629b\u51fa\u5f02\u5e38\uff0c\u6216\u662f\u8fd4\u56de\u7279\u4f8b\u5bf9\u8c61 \u5982\u679c\u5728\u7b2c\u4e09\u65b9API\u4e2d\u53ef\u80fd\u8fd4\u56denull\u503c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u65b0\u65b9\u6cd5\u6253\u5305\u8fd9\u4e2a\u65b9\u6cd5 \u522b\u4f20\u9012null\u503c \u9664\u975eAPI\u8981\u6c42\u4f60\u5411\u4ed6\u4f20\u9012null\u503c\uff0c\u5426\u5219\u5c31\u8981\u5c3d\u53ef\u80fd\u907f\u514d\u4f20\u9012null\u503c","title":"\u6574\u6d01\u4ee3\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_1","text":"\u8ba9\u8bfb\u7684\u8fc7\u7a0b\u4fbf\u8f7b\u677e\uff0c\u5373\u4f7f\u7f16\u5199\u8fc7\u7a0b\u56f0\u96be","title":"\u6574\u6d01\u4ee3\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_2","text":"","title":"\u6709\u610f\u4e49\u7684\u547d\u540d"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_3","text":"== \u547d\u540d\u5fc5\u987b\u6709\u610f\u4e49 == - \u6a21\u7cca\u5ea6\uff1a\u4e0a\u4e0b\u6587\u5728\u4ee3\u7801\u4e2d\u672a\u88ab\u660e\u786e\u4f53\u73b0\u7684\u7a0b\u5ea6","title":"\u540d\u526f\u5176\u5b9e"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_4","text":"\u907f\u514d\u7559\u4e0b\u63a9\u85cf\u4ee3\u7801\u672c\u610f\u7684\u9519\u8bef\u7ebf\u7d22\uff0c\u907f\u514d\u4f7f\u7528\u4e0e\u672c\u610f\u76f8\u6096\u7684\u8bcd \u63d0\u9632\u4f7f\u7528\u4e0d\u540c\u4e4b\u5904\u8f83\u5c0f\u7684\u540d\u79f0","title":"\u907f\u514d\u8bef\u5bfc"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_5","text":"\u901a\u8fc7\u533a\u5206\u63d0\u4f9b\u4e0d\u540c\u7684\u4fe1\u606f","title":"\u505a\u6709\u610f\u4e49\u7684\u533a\u5206"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_6","text":"\u65b9\u4fbf\u53e3\u5934\u8868\u8ff0","title":"\u4f7f\u7528\u8bfb\u7684\u51fa\u6765\u7684\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_7","text":"\u867d\u7136\u957f\u4f46\u65b9\u4fbf\u68c0\u7d22\u548c\u8fa8\u522b","title":"\u4f7f\u7528\u53ef\u641c\u7d22\u7684\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_8","text":"","title":"\u907f\u514d\u4f7f\u7528\u7f16\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_9","text":"\u660e\u786e\u662f\u738b\u9053","title":"\u907f\u514d\u601d\u7ef4\u6620\u5c04"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_10","text":"\u540d\u8bcd","title":"\u7c7b\u540d"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_11","text":"\u52a8\u8bcd","title":"\u65b9\u6cd5\u540d"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_12","text":"\u51fd\u6570\u540d\u79f0\u5e94\u8be5\u72ec\u4e00\u65e0\u4e8c\u5e76\u4e14\u4fdd\u6301\u4e00\u81f4","title":"\u6bcf\u4e2a\u6982\u5ff5\u5bf9\u5e94\u4e00\u4e2a\u8bcd"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_13","text":"","title":"\u522b\u7528\u53cc\u5173\u8bed"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_14","text":"\u5c3d\u91cf\u4f7f\u7528\u672f\u8bed\u3001\u7b97\u6cd5\u540d\u3001\u6a21\u5f0f\u540d\u3001\u6570\u5b66\u672f\u8bed","title":"\u4f7f\u7528\u89e3\u51b3\u65b9\u6848\u9886\u57df\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_15","text":"","title":"\u4f7f\u7528\u6e90\u81ea\u6240\u6d89\u95ee\u9898\u9886\u57df\u7684\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_16","text":"\u5355\u72ec\u51fa\u73b0\u7684 state \u4e0e\u6dfb\u52a0\u4e86\u8bed\u5883\u540e\u5355\u72ec\u51fa\u73b0\u7684 addrstate \u66f4\u597d\u7684\u65b9\u6848\uff1a\u521b\u5efa\u540d\u4e3a Address \u7684\u7c7b","title":"\u6dfb\u52a0\u6709\u610f\u4e49\u7684\u8bed\u5883"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_17","text":"","title":"\u4e0d\u8981\u6dfb\u52a0\u6ca1\u7528\u7684\u8bed\u5883"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_18","text":"","title":"\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_19","text":"\u6bcf\u4e2a\u51fd\u6570\u90fd\u53ea\u8bf4\u4e00\u4ef6\u4e8b \u6bcf\u4e2a\u51fd\u6570\u90fd\u4f9d\u5e8f\u628a\u4f60\u5e26\u5230\u4e0b\u4e00\u4e2a\u51fd\u6570 \u907f\u514d\u8fc7\u591a\u7684\u7f29\u8fdb\u548c\u5d4c\u5957\u5faa\u73af","title":"\u77ed\u5c0f"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_20","text":"\u51fd\u6570\u5e94\u8be5\u505a\u4e00\u4ef6\u4e8b\uff0c\u505a\u597d\u8fd9\u4ef6\u4e8b \u8981\u5224\u65ad\u51fd\u6570\u662f\u5426\u53ea\u505a\u4e86\u4e00\u4ef6\u4e8b\uff0c\u5c31\u770b\u662f\u5426\u80fd\u518d\u62c6\u9664\u4e00\u4e2a\u51fd\u6570","title":"\u53ea\u505a\u4e00\u4ef6\u4e8b"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_21","text":"\u62bd\u8c61\u5c42\u6b21 - ryelqy - \u535a\u5ba2\u56ed - \u8981\u786e\u4fdd\u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\uff0c\u51fd\u6570\u4e2d\u7684\u8bed\u53e5\u90fd\u8981\u5728\u540c\u4e00\u62bd\u8c61\u5c42\u7ea7\u4e0a - \u4ee3\u7801\u6e05\u53553-7","title":"\u6bcf\u4e2a\u51fd\u6570\u4e00\u4e2a\u62bd\u8c61\u5c42\u7ea7"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#switch","text":"\u786e\u4fdd\u6bcf\u4e2aswitch\u90fd\u57cb\u85cf\u5728\u8f83\u4f4e\u7684\u62bd\u8c61\u5c42\u7ea7\uff0c\u5e76\u4e14\u6c38\u4e0d\u91cd\u590d \u5229\u7528\u591a\u6001\u6765\u5b9e\u73b0","title":"switch\u8bed\u53e5"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_22","text":"\u63cf\u8ff0\u51fd\u6570\u6240\u505a\u7684\u4e8b \u522b\u5bb3\u6015\u957f\u540d\u79f0 \u522b\u5bb3\u6015\u82b1\u65f6\u95f4\u53d6\u540d\u5b57 \u63cf\u8ff0\u6027\u7684\u540d\u79f0\u80fd\u591f\u7406\u6e05\u5173\u4e8e\u6a21\u5757\u7684\u8bbe\u8ba1\u601d\u8def \u547d\u540d\u65b9\u5f0f\u4fdd\u6301\u4e00\u81f4","title":"\u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u79f0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_23","text":"\u6700\u7406\u60f3\uff1a\u96f6\u53c2\u6570 \u4e0d\u592a\u671f\u671b\u4fe1\u606f\u901a\u8fc7\u53c2\u6570\u8f93\u51fa\uff08\u5229\u7528\u9762\u5411\u5bf9\u8c61\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u907f\u514d\uff09","title":"\u51fd\u6570\u53c2\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_24","text":"\u8be2\u95ee\u6709\u5173\u53c2\u6570\u7684\u95ee\u9898 \u64cd\u4f5c\u8be5\u53c2\u6570 \u5982\u679c\u51fd\u6570\u8981\u5bf9\u8f93\u5165\u53c2\u6570\u8fdb\u884c\u8f6c\u6362\u64cd\u4f5c\uff0c\u8f6c\u6362\u7ed3\u679c\u5e94\u8be5\u4f53\u73b0\u5728\u8fd4\u56de\u503c","title":"\u4e00\u5143\u51fd\u6570\u7684\u666e\u904d\u5f62\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_25","text":"\u4e11\u964b\u4e0d\u582a\uff0c\u7834\u574f\u4e86\u51fd\u6570\u5355\u4e2a\u62bd\u8c61\u5c42\u7ea7","title":"\u6807\u8bc6\u53c2\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_26","text":"\u81ea\u7136\u7684\u7ec4\u5408\u6216\u81ea\u7136\u7684\u6392\u5e8f \u5c3d\u91cf\u5229\u7528\u4e00\u4e9b\u673a\u5236\u5c06\u4e8c\u5143\u8f6c\u6362\u4e3a\u4e00\u5143","title":"\u4e8c\u5143\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_27","text":"","title":"\u4e09\u5143\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_28","text":"\u5982\u679c\u51fd\u6570\u9700\u8981\u4e09\u4e2a\u4ee5\u4e0a\u7684\u53c2\u6570\uff0c\u5219\u8bf4\u660e\u8fd9\u4e9b\u53c2\u6570\u9700\u8981\u5c01\u88c5\u6210\u7c7b","title":"\u53c2\u6570\u5bf9\u8c61"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_29","text":"\u53ef\u80fd\u5bfc\u81f4\u53e4\u602a\u7684 \u65f6\u5e8f\u8026\u5408 \u53ca\u987a\u5e8f\u4f9d\u8d56","title":"\u65e0\u526f\u4f5c\u7528"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_30","text":"\u51fd\u6570\u8981\u4e48\u505a\u4ec0\u4e48\u4e8b\uff0c\u8981\u4e48\u56de\u7b54\u4ec0\u4e48\u4e8b","title":"\u5206\u9694\u6307\u4ee4\u4e0e\u8be2\u95ee"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_31","text":"\u4f7f\u7528\u5f02\u5e38\u4ee3\u66ff\u8fd4\u56de\u9519\u8bef\u7801\uff0c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u5c31\u80fd\u4ece\u4e3b\u8def\u5f84\u4ee3\u7801\u4e2d\u5206\u79bb \u62bd\u79bbtry/catch\u4ee3\u7801\u5757\uff0c\uff0c\u72ec\u7acb\u5f62\u6210\u4e00\u4e2a\u51fd\u6570 \u4f7f\u7528\u5f02\u5e38\u66ff\u4ee3\u9519\u8bef\u7801\uff0c\u65b0\u5f02\u5e38\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece\u65e7\u5f02\u5e38\u4e2d\u6d3e\u751f\u51fa\u6765","title":"==\u4f7f\u7528\u5f02\u5e38\u66ff\u4ee3\u8fd4\u56de\u9519\u8bef\u7801=="},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_32","text":"\u7c97\u7a3f\uff1a\u5197\u957f\u800c\u590d\u6742 \u6253\u78e8\uff1a \u5206\u89e3\u51fd\u6570 \u4fee\u6539\u540d\u79f0 \u6d88\u9664\u91cd\u590d \u4fdd\u6301\u6d4b\u8bd5\u901a\u8fc7","title":"\u5982\u4f55\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_33","text":"\u6ce8\u91ca\u7684\u4f5c\u7528\uff1a \u5f25\u8865 \u5728\u7528\u4ee3\u7801\u8868\u8fbe\u610f\u56fe\u65f6\u906d\u9047\u7684 \u5931\u8d25 \u628a\u529b\u6c14\u653e\u5728 \u4e66\u5199\u6e05\u695a\u4ee3\u7801 \u4e0a \u4e0d\u51c6\u786e\u7684\u6ce8\u91ca\u6bd4\u6ca1\u6709\u6ce8\u91ca\u574f\u7684\u591a","title":"\u6ce8\u91ca"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_34","text":"\u5199\u6ce8\u91ca\u7684 \u52a8\u673a \u4e4b\u4e00\uff1a \u7cdf\u7cd5\u4ee3\u7801 \u7684\u5b58\u5728 == \u628a\u4ee3\u7801\u5f04\u5e72\u51c0\uff01\uff01 == ==\u82b1\u65f6\u95f4 \u6e05\u6d01\u7cdf\u7cd5\u7684\u4ee3\u7801 ==","title":"\u6ce8\u91ca\u4e0d\u80fd\u7f8e\u5316\u7cdf\u7cd5\u7684\u4ee3\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_35","text":"","title":"\u7528\u4ee3\u7801\u6765\u9610\u8ff0"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_36","text":"\u6cd5\u5f8b\u4fe1\u606f ==\u63d0\u4f9b\u6d88\u606f==\u7684\u6ce8\u91ca \u6ce8\u91ca\u67d0\u4e2a\u62bd\u8c61\u65b9\u6cd5\u7684\u8fd4\u56de\u503c \u5c3d\u91cf\u5229\u7528\u51fd\u6570\u540d\u79f0\u4f20\u8fbe\u6d88\u606f \u5bf9\u610f\u56fe\u7684\u89e3\u91ca \u9610\u91ca\uff1a \u628a\u6666\u6da9\u96be\u61c2\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u7684\u610f\u4e49\u7ffb\u8bd1\u4e3a\u67d0\u79cd\u523b\u5ea6\u7684\u5f62\u5f0f \u8b66\u793a ==TODO\u6ce8\u91ca== \u7a0b\u5e8f\u5458\u8ba4\u4e3a\u5e94\u8be5\u505a\u800c\u8fd8\u6ca1\u505a\u7684\u4e8b \u5b9a\u671f\u67e5\u770b\uff0c\u5220\u9664\u4e0d\u518d\u9700\u8981\u7684 \u653e\u5927 \u653e\u5927\u67d0\u79cd\u770b\u6765\u4e0d\u5408\u7406\u4e4b\u7269\u7684\u91cd\u8981\u6027 \u516c\u5171API\u4e2d\u7684Javadoc","title":"\u597d\u6ce8\u91ca"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_37","text":"\u5583\u5583\u81ea\u8bed \u5982\u679c\u51b3\u5b9a\u5199\u6ce8\u91ca\uff0c\u5c31\u82b1\u65f6\u95f4\u5199\u6700\u597d\u7684\u6ce8\u91ca \u591a\u4f59\u7684\u6ce8\u91ca \u8bef\u5bfc\u6027\u6ce8\u91ca \u5faa\u89c4\u5f0f\u6ce8\u91ca \u65e5\u5fd7\u5f0f\u6ce8\u91ca \u5e9f\u8bdd\u6ce8\u91ca \u5e9f\u8bdd \u80fd\u7528\u51fd\u6570\u6216\u53d8\u91cf\u65f6\u5c31\u522b\u7528\u6ce8\u91ca \u4f4d\u7f6e\u6807\u8bb0 \u62ec\u53f7\u540e\u7684\u6ce8\u91ca \u5f52\u5c5e\u4e0e\u7f72\u540d \u6ce8\u91ca\u6389\u7684\u4ee3\u7801 HTML\u6ce8\u91ca \u975e\u672c\u5730\u4fe1\u606f \u5982\u679c\u4e00\u5b9a\u8981\u5199\u6ce8\u91ca\uff0c\u786e\u4fdd\u5b83\u63cf\u8ff0\u4e86\u79bb\u4ed6\u6700\u8fd1\u7684\u4ee3\u7801 \u4fe1\u606f\u8fc7\u591a \u4e0d\u660e\u663e\u7684\u5173\u7cfb","title":"\u574f\u6ce8\u91ca"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_38","text":"","title":"\u683c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_39","text":"","title":"\u5782\u76f4\u683c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_40","text":"\u6bcf\u7ec4\u4ee3\u7801\u884c\u5c55\u793a\u4e00\u6761\u5b8c\u6574\u7684\u601d\u8def \u6bcf\u4e2a\u7a7a\u767d\u884c\u90fd\u662f\u4e00\u6761\u7ebf\u7d22\uff0c\u6807\u8bc6\u51fa\u65b0\u7684\u72ec\u7acb\u6982\u5ff5","title":"\u6982\u5ff5\u95f4\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u533a\u9694"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_41","text":"\u9760\u8fd1\u7684\u4ee3\u7801\u884c\u6697\u793a\u4e86\u4ed6\u4eec\u4e4b\u95f4\u7684\u7d27\u5bc6\u5173\u7cfb","title":"\u5782\u76f4\u65b9\u5411\u4e0a\u7684\u9760\u8fd1"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_42","text":"\u5173\u7cfb\u5bc6\u5207\u7684\u6982\u5ff5\u5e94\u8be5\u4e92\u76f8\u9760\u8fd1 \u53d8\u91cf\u58f0\u660e\uff1a\u53d8\u91cf\u58f0\u660e\u5e94\u8be5\u5c3d\u53ef\u80fd\u9760\u8fd1\u5176\u4f7f\u7528\u7684\u4f4d\u7f6e \u5faa\u73af\u4e2d\u7684\u63a7\u5236\u53d8\u91cf\u5e94\u8be5\u603b\u662f\u518d\u5faa\u73af\u8bed\u53e5\u4e2d\u58f0\u660e \u5b9e\u4f53\u53d8\u91cf\u5e94\u8be5\u5728\u7c7b\u7684\u9876\u90e8\u58f0\u660e \u82e5\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e86\u53e6\u5916\u4e00\u4e2a\uff0c\u5c31\u5e94\u8be5\u628a\u4ed6\u4eec\u653e\u5230\u4e00\u8d77 \u8c03\u7528\u8005\u5e94\u8be5\u5c3d\u53ef\u80fd\u653e\u5728\u88ab\u8c03\u7528\u8005\u4e4b\u4e0a \u6982\u5ff5\u76f8\u5173\u7684\u4ee3\u7801\u5e94\u8be5\u653e\u5230\u4e00\u8d77 \u76f8\u5173\u6027\u8d8a\u5f3a\uff0c\u5f7c\u6b64\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c31\u5e94\u8be5\u8d8a\u77ed \u5373\u4f7f\u6ca1\u6709\u4e92\u76f8\u8c03\u7528\uff0c\u4e5f\u5e94\u8be5\u653e\u5728\u4e00\u8d77","title":"\u5782\u76f4\u8ddd\u79bb"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_43","text":"\u5728\u8d4b\u503c\u64cd\u4f5c\u7b26\u5468\u56f4\u52a0\u4e0a\u7a7a\u683c\u5b57\u7b26\uff0c\u8fbe\u5230\u5f3a\u8c03\u7684\u76ee\u7684 \u4e0d\u518d\u51fd\u6570\u540d\u548c\u5de6\u5706\u62ec\u53f7\u4e4b\u95f4\u6dfb\u52a0\u7a7a\u683c\uff0c\u8868\u660e\u51fd\u6570\u4e0e\u5176\u53c2\u6570\u5bc6\u5207\u76f8\u5173 \u7a7a\u683c\u5b57\u7b26\u7684\u53e6\u4e00\u79cd\u7528\u6cd5\uff1a\u5f3a\u8c03\u5176\u524d\u9762\u7684\u8fd0\u7b97\u7b26 \u4e58\u6cd5\u56e0\u5b50\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\uff0c\u8868\u660e\u9ad8\u4f18\u5148\u7ea7","title":"\u6a2a\u5411\u683c\u5f0f"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_44","text":"","title":"\u5bf9\u8c61\u548c\u6570\u636e\u7ed3\u6784"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_45","text":"\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\u5448\u73b0\u67d0\u4e2a\u5bf9\u8c61\u5305\u542b\u7684\u6570\u636e","title":"\u6570\u636e\u62bd\u8c61"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_46","text":"\u8fc7\u7a0b\u5f0f\u4ee3\u7801 \u5728\u4e0d\u6539\u52a8\u65e2\u6709\u6570\u636e\u7ed3\u6784\u7684\u524d\u63d0\u4e0b\u6dfb\u52a0\u65b0\u51fd\u6570 \u96be\u4ee5\u6dfb\u52a0\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u4e3a\u5fc5\u987b\u4fee\u6539\u6240\u6709\u51fd\u6570 \u9762\u5411\u5bf9\u8c61\u5f0f\u4ee3\u7801 \u5728\u4e0d\u6539\u52a8\u65e2\u6709\u51fd\u6570\u7684\u524d\u63d0\u4e0b\u6dfb\u52a0\u65b0\u7c7b \u96be\u4ee5\u6dfb\u52a0\u65b0\u51fd\u6570\uff0c\u56e0\u4e3a\u5fc5\u987b\u4fee\u6539\u7c7b","title":"\u6570\u636e\u3001\u5bf9\u8c61\u7684\u53cd\u5bf9\u79f0\u6027"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_47","text":"\u6a21\u5757\u4e0d\u5e94\u4e86\u89e3\u5b83\u6240\u64cd\u4f5c\u5bf9\u8c61\u5185\u90e8\u7684\u60c5\u5f62 \u7c7bC\u7684\u65b9\u6cd5f\u53ea\u5e94\u8be5\u8c03\u7528\u4ee5\u4e0b\u5bf9\u8c61\u7684\u65b9\u6cd5 C \u7531f\u521b\u5efa\u7684\u5bf9\u8c61 \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9f\u7684\u5bf9\u8c61 \u7531C\u7684\u5b9e\u4f53\u53d8\u91cf\u6301\u6709\u7684\u5bf9\u8c61","title":"\u5f97\u58a8\u5fd2\u8033\u5f8b"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_48","text":"\u53ea\u6709\u516c\u5171\u53d8\u91cf\u3001\u6ca1\u6709\u51fd\u6570\u7684\u7c7b \u6570\u636e\u5e93\u901a\u4fe1\u3001","title":"\u6570\u636e\u4f20\u9001\u5bf9\u8c61"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_49","text":"\u9519\u8bef\u5904\u7406\u975e\u5e38\u91cd\u8981\uff0c\u4f46\u5982\u679c\u5b83\u641e\u4e71\u4e86\u4ee3\u7801\u903b\u8f91\uff0c\u5c31\u662f\u9519\u8bef\u7684\u505a\u6cd5","title":"\u9519\u8bef\u5904\u7406"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_50","text":"\u9047\u5230\u9519\u8bef\u65f6\uff0c\u6700\u597d\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38","title":"\u4f7f\u7528\u5f02\u5e38\u800c\u975e\u8fd4\u56de\u7801"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#try-catch-finally","text":"try\u662f\u4e8b\u52a1 catch\u5c06\u7a0b\u5e8f\u7ef4\u6301\u5728\u4e00\u79cd\u6301\u7eed\u7684\u72b6\u6001","title":"\u5148\u5199Try-Catch-Finally\u8bed\u53e5"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_51","text":"\u53ef\u63a7\u5f02\u5e38\u7684\u4ee3\u4ef7\uff1a \u8fdd\u53cd\u5f00\u95ed\u539f\u5219 \u5982\u679c\u5f02\u5e38\u53ef\u63a7\uff0c\u51fd\u6570\u7b7e\u540d\u5c31\u8981\u6dfb\u52a0throw\u5b50\u53e5","title":"\u4f7f\u7528\u4e0d\u53ef\u63a7\u5f02\u5e38"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_52","text":"\u629b\u51fa\u7684\u6bcf\u4e00\u4e2a\u5f02\u5e38\uff0c\u90fd\u5e94\u5f53\u63d0\u4f9b\u8db3\u591f\u7684\u73af\u5883\u8bf4\u660e\uff0c\u4e00\u8fb9\u5224\u65ad\u9519\u8bef\u7684\u6765\u6e90\u548c\u5904\u6240 \u521b\u5efa\u4fe1\u606f\u5145\u5206\u7684\u9519\u8bef\u6d88\u606f\uff0c\u5e76\u4e14\u548c\u5f02\u5e38\u4e00\u8d77\u4f20\u9012\u51fa\u53bb \u4f20\u9012\u8db3\u591f\u7684\u4fe1\u606f\u7ed9catch\u5757\uff0c\u5e76\u4e14\u8bb0\u5f55\u4e0b\u6765","title":"\u7ed9\u51fa\u5f02\u5e38\u53d1\u751f\u7684\u73af\u5883\u8bf4\u660e"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#_53","text":"\u901a\u8fc7\u6253\u5305\u8c03\u7528API\u3001\u786e\u4fdd\u5b83\u8fd4\u56de\u901a\u7528\u5f02\u5e38\u7c7b\u578b->\u7b80\u5316\u4ee3\u7801","title":"\u4f9d\u8c03\u7528\u8005\u9700\u8981\u5b9a\u4e49\u5f02\u5e38\u7c7b"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#null","text":"\u5982\u679c\u6253\u7b97\u5728\u65b9\u6cd5\u4e2d\u8fd4\u56denull\u503c\uff0c\u4e0d\u5982\u629b\u51fa\u5f02\u5e38\uff0c\u6216\u662f\u8fd4\u56de\u7279\u4f8b\u5bf9\u8c61 \u5982\u679c\u5728\u7b2c\u4e09\u65b9API\u4e2d\u53ef\u80fd\u8fd4\u56denull\u503c\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8003\u8651\u7528\u65b0\u65b9\u6cd5\u6253\u5305\u8fd9\u4e2a\u65b9\u6cd5","title":"\u522b\u8fd4\u56denull\u503c"},{"location":"%E5%85%B6%E4%BB%96/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81%E4%B9%8B%E9%81%93/#null_1","text":"\u9664\u975eAPI\u8981\u6c42\u4f60\u5411\u4ed6\u4f20\u9012null\u503c\uff0c\u5426\u5219\u5c31\u8981\u5c3d\u53ef\u80fd\u907f\u514d\u4f20\u9012null\u503c","title":"\u522b\u4f20\u9012null\u503c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/","text":"vector\u6a21\u677f \u4e00\u3001STL\u7f16\u7a0b \u6838\u5fc3\uff1a \u5bb9\u5668(Container)\uff1a\u7528\u4e8e\u7ba1\u7406\u4e00\u7c7b\u5bf9\u8c61\u7684\u96c6\u5408(deque\u3001list\u3001vector\u3001map) \u7b97\u6cd5(Algoritms)\uff1a\u7b97\u6cd5\u4f5c\u7528\u4e8e\u5bb9\u5668(\u6392\u5e8f\u3001\u521d\u59cb\u5316\u3001\u641c\u7d22\u3001\u8f6c\u6362) \u8fed\u4ee3\u5668(iterators)\uff1a\u7528\u4e8e\u904d\u5386\u5bf9\u8c61\u96c6\u5408\uff08 \u5bb9\u5668\u3001\u5bb9\u5668\u7684\u5b50\u96c6 \uff09\u7684\u5143\u7d20 \u62e5\u6709\u4e30\u5bcc\u7684\u9884\u5b9a\u4e49\u51fd\u6570 \u4e8c\u3001vector\u5bb9\u5668 \u52a8\u6001\u5927\u5c0f\u6570\u7ec4\u7684\u987a\u5e8f\u5bb9\u5668 \u7279\u6027\uff1a \u987a\u5e8f\u5e8f\u5217 \u52a8\u6001 \u611f\u77e5\u5185\u5b58\u5206\u914d\u5668 \u4e09\u3001\u57fa\u672c\u51fd\u6570 \u6784\u9020\u51fd\u6570 vector \u521b\u5efa\u7a7avector vector(int Size) \u521b\u5efaSize\u4e2a\u5143\u7d20\u7684vecotr vector(int Size, const t& t) \u521b\u5efaSize\u4e2a\u5143\u7d20\u7684vecotr\uff0c\u4e14\u5143\u7d20\u5747\u4e3at vector(const vector&) \u62f7\u8d1d\u6784\u9020\u51fd\u6570 vecotr(begin,end) \u590d\u5236$[begin,end)$ \u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u51fd\u6570 push_back() \u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 \u5220\u9664\u51fd\u6570 pop_back() \u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20 \u904d\u5386\u51fd\u6570 ilterator begin() \u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488 ilterator end() \u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff08\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff09 \u5224\u65ad\u51fd\u6570 \u5927\u5c0f\u51fd\u6570 \u5176\u4ed6\u51fd\u6570 \u56db\u3001\u8fed\u4ee3\u5668(ilterator) \u904d\u5386\u5b58\u50a8\u7a7a\u95f4\u8fde\u7eed\u7684\u6570\u636e\u7ed3\u6784 \u5b9e\u8d28\uff1a \u6307\u9488 \u53ef\u7528\u5bb9\u5668\uff1avector\u3001deque\u3001list\u3001set\u3001multiset\u3001map\u3001multimap \u5206\u7c7b\uff1a\u524d\u5411\u8fed\u4ee3\u5668\u3001\u53cc\u5411\u8fed\u4ee3\u5668\u3001\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 \u5bf9\u4e8e vector \u5bb9\u5668\u7684\u4e09\u79cd\u904d\u5386 #include <iostream> #include <vector> using namespace std; int main(){ vector<int> x{1,2,3,4,5,6,7,8,9,10}; //\u904d\u5386\u4e00 for(int i = 0;i < 10;i++){ cout << v[i] << \" \"; } cout << endl; //\u904d\u5386\u4e8c for(int *p = v.begin();p != v.end();p++){ cout << *p << \" \"; } cout << endl; //\u904d\u5386\u4e09 vector<int>::ilterator i; for(i = v.begin();i != v.end();i++){ cout << *i << \" \"; } cout << endl; }","title":"vector\u6a21\u677f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/#vector","text":"","title":"vector\u6a21\u677f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/#stl","text":"\u6838\u5fc3\uff1a \u5bb9\u5668(Container)\uff1a\u7528\u4e8e\u7ba1\u7406\u4e00\u7c7b\u5bf9\u8c61\u7684\u96c6\u5408(deque\u3001list\u3001vector\u3001map) \u7b97\u6cd5(Algoritms)\uff1a\u7b97\u6cd5\u4f5c\u7528\u4e8e\u5bb9\u5668(\u6392\u5e8f\u3001\u521d\u59cb\u5316\u3001\u641c\u7d22\u3001\u8f6c\u6362) \u8fed\u4ee3\u5668(iterators)\uff1a\u7528\u4e8e\u904d\u5386\u5bf9\u8c61\u96c6\u5408\uff08 \u5bb9\u5668\u3001\u5bb9\u5668\u7684\u5b50\u96c6 \uff09\u7684\u5143\u7d20 \u62e5\u6709\u4e30\u5bcc\u7684\u9884\u5b9a\u4e49\u51fd\u6570","title":"\u4e00\u3001STL\u7f16\u7a0b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/#vector_1","text":"\u52a8\u6001\u5927\u5c0f\u6570\u7ec4\u7684\u987a\u5e8f\u5bb9\u5668 \u7279\u6027\uff1a \u987a\u5e8f\u5e8f\u5217 \u52a8\u6001 \u611f\u77e5\u5185\u5b58\u5206\u914d\u5668","title":"\u4e8c\u3001vector\u5bb9\u5668"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/#_1","text":"\u6784\u9020\u51fd\u6570 vector \u521b\u5efa\u7a7avector vector(int Size) \u521b\u5efaSize\u4e2a\u5143\u7d20\u7684vecotr vector(int Size, const t& t) \u521b\u5efaSize\u4e2a\u5143\u7d20\u7684vecotr\uff0c\u4e14\u5143\u7d20\u5747\u4e3at vector(const vector&) \u62f7\u8d1d\u6784\u9020\u51fd\u6570 vecotr(begin,end) \u590d\u5236$[begin,end)$ \u533a\u95f4\u5185\u53e6\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u5230vector\u4e2d \u589e\u52a0\u51fd\u6570 push_back() \u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 \u5220\u9664\u51fd\u6570 pop_back() \u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20 \u904d\u5386\u51fd\u6570 ilterator begin() \u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488 ilterator end() \u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff08\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff09 \u5224\u65ad\u51fd\u6570 \u5927\u5c0f\u51fd\u6570 \u5176\u4ed6\u51fd\u6570","title":"\u4e09\u3001\u57fa\u672c\u51fd\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/vector%E6%A8%A1%E6%9D%BF/#ilterator","text":"\u904d\u5386\u5b58\u50a8\u7a7a\u95f4\u8fde\u7eed\u7684\u6570\u636e\u7ed3\u6784 \u5b9e\u8d28\uff1a \u6307\u9488 \u53ef\u7528\u5bb9\u5668\uff1avector\u3001deque\u3001list\u3001set\u3001multiset\u3001map\u3001multimap \u5206\u7c7b\uff1a\u524d\u5411\u8fed\u4ee3\u5668\u3001\u53cc\u5411\u8fed\u4ee3\u5668\u3001\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 \u5bf9\u4e8e vector \u5bb9\u5668\u7684\u4e09\u79cd\u904d\u5386 #include <iostream> #include <vector> using namespace std; int main(){ vector<int> x{1,2,3,4,5,6,7,8,9,10}; //\u904d\u5386\u4e00 for(int i = 0;i < 10;i++){ cout << v[i] << \" \"; } cout << endl; //\u904d\u5386\u4e8c for(int *p = v.begin();p != v.end();p++){ cout << *p << \" \"; } cout << endl; //\u904d\u5386\u4e09 vector<int>::ilterator i; for(i = v.begin();i != v.end();i++){ cout << *i << \" \"; } cout << endl; }","title":"\u56db\u3001\u8fed\u4ee3\u5668(ilterator)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8STL/","text":"\u5e38\u7528STL vector\u5bb9\u5668 \u5b9a\u4e49 vector<typename> name \u5143\u7d20\u7684\u8bbf\u95ee \u901a\u8fc7\u4e0b\u6807 \u901a\u8fc7\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7406\u89e3\u4e3a\u7c7b\u4f3c\u6307\u9488\u7684\u4e1c\u897f \u5e38\u7528\u51fd\u6570 push_back() pop_back() size() clear() \uff1a\u6e05\u7a7a vector \u4e2d\u7684\u6240\u6709\u5143\u7d20 insert(it, x) \uff1a\u5411it\u5904\u63d2\u5165\u4e00\u4e2a\u5143\u7d20 erase() erase(n) \uff1a\u5254\u9664n\u5904\u7684\u5143\u7d20 erase(beg, end) \uff1a\u5254\u9664\u4ecebeg\u5230end - 1\u5904\u7684\u5143\u7d20 \u5e38\u89c1\u7528\u9014\uff1a \u5b58\u50a8\u6570\u636e \u7528\u90bb\u63a5\u8868\u5b58\u50a8\u56fe(\u5177\u4f53\u89c1\u7b97\u6cd5\u7b14\u8bb010.2.2\u8282) set set\u662f \u5185\u90e8\u81ea\u52a8\u6709\u5e8f(\u9012\u589e) \u4e14 \u4e0d\u542b\u91cd\u590d\u5143\u7d20 \u7684\u5bb9\u5668 \u5b9a\u4e49 set<typename> name; set\u5185\u5143\u7d20\u7684\u8bbf\u95ee \u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee set<typename>::iterator it \u904d\u5386\u65b9\u5f0f\uff1a C++ for(set<int>::iterator it = st.begin();it != st.end();it++){ cout << *it << endl; } \u5e38\u7528\u51fd\u6570 insert(x) \uff1a\u5c06x\u63d2\u5165\u5230\u5bb9\u5668\u4e2d find(x) \uff1a\u8fd4\u56dex\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668 erase() erase(it) \uff1a\u5220\u9664\u8fed\u4ee3\u5668it\u6240\u6307\u7684\u5143\u7d20 erase(x) \uff1a\u5220\u9664x\u503c\uff08\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff09 erase(beg, end) size() clear()","title":"\u5e38\u7528STL"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8STL/#stl","text":"","title":"\u5e38\u7528STL"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8STL/#vector","text":"\u5b9a\u4e49 vector<typename> name \u5143\u7d20\u7684\u8bbf\u95ee \u901a\u8fc7\u4e0b\u6807 \u901a\u8fc7\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7406\u89e3\u4e3a\u7c7b\u4f3c\u6307\u9488\u7684\u4e1c\u897f \u5e38\u7528\u51fd\u6570 push_back() pop_back() size() clear() \uff1a\u6e05\u7a7a vector \u4e2d\u7684\u6240\u6709\u5143\u7d20 insert(it, x) \uff1a\u5411it\u5904\u63d2\u5165\u4e00\u4e2a\u5143\u7d20 erase() erase(n) \uff1a\u5254\u9664n\u5904\u7684\u5143\u7d20 erase(beg, end) \uff1a\u5254\u9664\u4ecebeg\u5230end - 1\u5904\u7684\u5143\u7d20 \u5e38\u89c1\u7528\u9014\uff1a \u5b58\u50a8\u6570\u636e \u7528\u90bb\u63a5\u8868\u5b58\u50a8\u56fe(\u5177\u4f53\u89c1\u7b97\u6cd5\u7b14\u8bb010.2.2\u8282)","title":"vector\u5bb9\u5668"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B8%B8%E7%94%A8STL/#set","text":"set\u662f \u5185\u90e8\u81ea\u52a8\u6709\u5e8f(\u9012\u589e) \u4e14 \u4e0d\u542b\u91cd\u590d\u5143\u7d20 \u7684\u5bb9\u5668 \u5b9a\u4e49 set<typename> name; set\u5185\u5143\u7d20\u7684\u8bbf\u95ee \u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee set<typename>::iterator it \u904d\u5386\u65b9\u5f0f\uff1a C++ for(set<int>::iterator it = st.begin();it != st.end();it++){ cout << *it << endl; } \u5e38\u7528\u51fd\u6570 insert(x) \uff1a\u5c06x\u63d2\u5165\u5230\u5bb9\u5668\u4e2d find(x) \uff1a\u8fd4\u56dex\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668 erase() erase(it) \uff1a\u5220\u9664\u8fed\u4ee3\u5668it\u6240\u6307\u7684\u5143\u7d20 erase(x) \uff1a\u5220\u9664x\u503c\uff08\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff09 erase(beg, end) size() clear()","title":"set"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%BF%E4%B9%89%E8%A1%A8/","text":"\u5e7f\u4e49\u8868 \u4e24\u4e2a\u6700\u57fa\u672c\u7684\u8fd0\u7b97\uff1a 1. head() \uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 2. tail() \uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u5916\u7684\u6240\u6709\u5143\u7d20","title":"\u5e7f\u4e49\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%BF%E4%B9%89%E8%A1%A8/#_1","text":"\u4e24\u4e2a\u6700\u57fa\u672c\u7684\u8fd0\u7b97\uff1a 1. head() \uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 2. tail() \uff1a\u53d6\u5e7f\u4e49\u8868\u4e2d\u9664\u53bb\u7b2c\u4e00\u4e2a\u5143\u7d20\u5916\u7684\u6240\u6709\u5143\u7d20","title":"\u5e7f\u4e49\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/","text":"\u6563\u5217\u8868\uff08\u54c8\u5e0c\u8868\uff09\u67e5\u627e \u4e00\u3001\u6563\u5217\u8868 \u6563\u5217\u6280\u672f\u662f\u5728\u8bb0\u5f55\u7684\u5b58\u50a8\u4f4d\u7f6e\u548c \u5b83\u7684\u5173\u952e\u5b57\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u786e\u5b9a\u7684\u5bf9\u5e94\u5173\u7cfbf\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5173\u952e\u5b57key\u5bf9\u5e94\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6ef(key) \u4e8c\u3001\u6563\u5217\u8868\u7684\u67e5\u627e\u6b65\u9aa4 \u5f53\u5b58\u50a8\u8bb0\u5f55\u65f6\uff0c\u901a\u8fc7 \u6563\u5217\u51fd\u6570 \u8ba1\u7b97\u51fa\u8bb0\u5f55\u7684\u6563\u5217\u5730\u5740 \u5f53\u67e5\u627e\u8bb0\u5f55\u65f6\uff0c\u901a\u8fc7\u540c\u6837\u7684\u662f\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u8bb0\u5f55\u7684\u6563\u5217\u5730\u5740\uff0c\u5e76\u6309\u6b64\u5730\u5740\u8bbf\u95ee\u8bb0\u5f55","title":"\u6563\u5217\u8868\uff08\u54c8\u5e0c\u8868\uff09\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/#_1","text":"","title":"\u6563\u5217\u8868\uff08\u54c8\u5e0c\u8868\uff09\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/#_2","text":"\u6563\u5217\u6280\u672f\u662f\u5728\u8bb0\u5f55\u7684\u5b58\u50a8\u4f4d\u7f6e\u548c \u5b83\u7684\u5173\u952e\u5b57\u4e4b\u95f4\u5efa\u7acb\u4e00\u4e2a\u786e\u5b9a\u7684\u5bf9\u5e94\u5173\u7cfbf\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5173\u952e\u5b57key\u5bf9\u5e94\u4e00\u4e2a\u5b58\u50a8\u4f4d\u7f6ef(key)","title":"\u4e00\u3001\u6563\u5217\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%A3%E5%88%97%E8%A1%A8/#_3","text":"\u5f53\u5b58\u50a8\u8bb0\u5f55\u65f6\uff0c\u901a\u8fc7 \u6563\u5217\u51fd\u6570 \u8ba1\u7b97\u51fa\u8bb0\u5f55\u7684\u6563\u5217\u5730\u5740 \u5f53\u67e5\u627e\u8bb0\u5f55\u65f6\uff0c\u901a\u8fc7\u540c\u6837\u7684\u662f\u6563\u5217\u51fd\u6570\u8ba1\u7b97\u8bb0\u5f55\u7684\u6563\u5217\u5730\u5740\uff0c\u5e76\u6309\u6b64\u5730\u5740\u8bbf\u95ee\u8bb0\u5f55","title":"\u4e8c\u3001\u6563\u5217\u8868\u7684\u67e5\u627e\u6b65\u9aa4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%AE%BA/","text":"\u6570\u636e\u7ed3\u6784 \u4e66\u7c4d \u4e25\u851a\u654f \u5434\u4f1f\u6c11 \u9ad8\u4e00\u51e1 \u9ec4\u56fd\u745c \u4e00\u3001\u6570\u636e\u7ed3\u6784\u6982\u8ff0 \u5b9a\u4e49\uff1a\u6211\u4eec\u5982\u4f55\u628a\u73b0\u5b9e\u4e2d\u5927\u91cf\u800c\u590d\u6742\u7684\u95ee\u9898\u4ee5\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u548c\u7279\u5b9a\u7684\u5b58\u50a8\u7ed3\u6784\u4fdd\u5b58\u5230\u4e3b\u5b58\u50a8\u5668\uff08\u5185\u5b58\uff09\u4e2d\uff0c\u4ee5\u53ca\u5728\u6b64\u57fa\u7840\u4e0a\u4e3a\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff08\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\uff0c\u5220\u9664\u67d0\u4e2a\u5143\u7d20\uff0c\u5bf9\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff09\u800c\u6267\u884c\u7684\u76f8\u5e94\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u76f8\u5e94\u7684\u64cd\u4f5c\u79f0\u4e3a \u7b97\u6cd5 \u6570\u636e\u7ed3\u6784 = \u4e2a\u4f53 + \u4e2a\u4f53\u95f4\u7684\u5173\u7cfb \u7b97\u6cd5 = \u5bf9\u5b58\u50a8\u6570\u636e\u7684\u64cd\u4f5c \u7b97\u6cd5 \u89e3\u4f53\u7684\u65b9\u6cd5\u548c\u6b65\u9aa4 \u8861\u91cf\u7b97\u6cd5\u7684\u6807\u51c6 \u65f6\u95f4\u590d\u6742\u5ea6 \u5927\u6982\u7a0b\u5e8f\u8981\u6267\u884c\u7684\u6b21\u6570\uff0c\u800c\u975e\u65f6\u95f4 \u7a7a\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5927\u6982\u6240\u5360\u7684\u6700\u5927\u5185\u5b58 \u96be\u6613\u7a0b\u5ea6 \u5065\u58ee\u6027 \u6570\u636e\u7ed3\u6784\u7684 \u5730\u4f4d \u6570\u636e\u7ed3\u6784\u662f\u8f6f\u4ef6\u4e2d\u6700\u6838\u5fc3\u7684\u8bfe\u7a0b \u7a0b\u5e8f = \u6570\u636e\u7684\u5b58\u50a8 + \u6570\u636e\u7684\u64cd\u4f5c + \u53ef\u4ee5\u88ab\u8ba1\u7b97\u673a\u6267\u884c\u7684\u8bed\u8a00","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%AE%BA/#_1","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%AE%BA/#_2","text":"\u4e25\u851a\u654f \u5434\u4f1f\u6c11 \u9ad8\u4e00\u51e1 \u9ec4\u56fd\u745c","title":"\u4e66\u7c4d"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%AE%BA/#_3","text":"\u5b9a\u4e49\uff1a\u6211\u4eec\u5982\u4f55\u628a\u73b0\u5b9e\u4e2d\u5927\u91cf\u800c\u590d\u6742\u7684\u95ee\u9898\u4ee5\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u548c\u7279\u5b9a\u7684\u5b58\u50a8\u7ed3\u6784\u4fdd\u5b58\u5230\u4e3b\u5b58\u50a8\u5668\uff08\u5185\u5b58\uff09\u4e2d\uff0c\u4ee5\u53ca\u5728\u6b64\u57fa\u7840\u4e0a\u4e3a\u5b9e\u73b0\u67d0\u4e2a\u529f\u80fd\uff08\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\uff0c\u5220\u9664\u67d0\u4e2a\u5143\u7d20\uff0c\u5bf9\u6240\u6709\u5143\u7d20\u8fdb\u884c\u6392\u5e8f\uff09\u800c\u6267\u884c\u7684\u76f8\u5e94\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u76f8\u5e94\u7684\u64cd\u4f5c\u79f0\u4e3a \u7b97\u6cd5 \u6570\u636e\u7ed3\u6784 = \u4e2a\u4f53 + \u4e2a\u4f53\u95f4\u7684\u5173\u7cfb \u7b97\u6cd5 = \u5bf9\u5b58\u50a8\u6570\u636e\u7684\u64cd\u4f5c \u7b97\u6cd5 \u89e3\u4f53\u7684\u65b9\u6cd5\u548c\u6b65\u9aa4 \u8861\u91cf\u7b97\u6cd5\u7684\u6807\u51c6 \u65f6\u95f4\u590d\u6742\u5ea6 \u5927\u6982\u7a0b\u5e8f\u8981\u6267\u884c\u7684\u6b21\u6570\uff0c\u800c\u975e\u65f6\u95f4 \u7a7a\u95f4\u590d\u6742\u5ea6 \u7b97\u6cd5\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5927\u6982\u6240\u5360\u7684\u6700\u5927\u5185\u5b58 \u96be\u6613\u7a0b\u5ea6 \u5065\u58ee\u6027 \u6570\u636e\u7ed3\u6784\u7684 \u5730\u4f4d \u6570\u636e\u7ed3\u6784\u662f\u8f6f\u4ef6\u4e2d\u6700\u6838\u5fc3\u7684\u8bfe\u7a0b \u7a0b\u5e8f = \u6570\u636e\u7684\u5b58\u50a8 + \u6570\u636e\u7684\u64cd\u4f5c + \u53ef\u4ee5\u88ab\u8ba1\u7b97\u673a\u6267\u884c\u7684\u8bed\u8a00","title":"\u4e00\u3001\u6570\u636e\u7ed3\u6784\u6982\u8ff0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/","text":"\u6808 \u4e00\u3001\u6982\u5ff5 \u4e00\u79cd\u201c \u5148\u8fdb\u540e\u51fa \uff08LIFO\uff09\u201d\u7684\u6570\u636e\u7ed3\u6784 \u53ea\u80fd\u8bbf\u95ee\u6808\u9876\u5143\u7d20\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff08\u5c3d\u7ba1\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff09 \u4e8c\u3001\u64cd\u4f5c push\uff1a\u5165\u6808/\u538b\u6808 pop\uff1a\u51fa\u6808/\u5f39\u6808 empty\uff1a\u6808\u662f\u5426\u4e3a\u7a7a size\uff1a\u6808\u7684\u5927\u5c0f \u4e09\u3001\u4e24\u79cd\u8868\u793a\u65b9\u5f0f \u987a\u5e8f\u6808\uff1a\u7533\u8bf7\u8fde\u7eed\u5355\u5143\uff08\u7c7b\u4f3c\u6570\u7ec4\uff09 \u94fe\u5f0f\u6808\uff1a\u9700\u8981\u65f6\u7533\u8bf7\uff08\u4f7f\u7528\u5934\u7ed3\u70b9\u4f5c\u4e3a\u6808\u9876\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5c0f\u5316\uff09 \u56db\u3001\u5e94\u7528 \u9006\u5e8f\u8f93\u51fa \u62ec\u53f7\u5339\u914d \u8ff7\u5bab\u5bfb\u8def \u8fdb\u5236\u8f6c\u6362 \u8868\u8fbe\u5f0f\u8ba1\u7b97 [[\u9012\u5f52]] \u4e94\u3001\u5b9e\u73b0 \u987a\u5e8f\u6808 \u94fe\u6808","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_1","text":"","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_2","text":"\u4e00\u79cd\u201c \u5148\u8fdb\u540e\u51fa \uff08LIFO\uff09\u201d\u7684\u6570\u636e\u7ed3\u6784 \u53ea\u80fd\u8bbf\u95ee\u6808\u9876\u5143\u7d20\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff08\u5c3d\u7ba1\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff09","title":"\u4e00\u3001\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_3","text":"push\uff1a\u5165\u6808/\u538b\u6808 pop\uff1a\u51fa\u6808/\u5f39\u6808 empty\uff1a\u6808\u662f\u5426\u4e3a\u7a7a size\uff1a\u6808\u7684\u5927\u5c0f","title":"\u4e8c\u3001\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_4","text":"\u987a\u5e8f\u6808\uff1a\u7533\u8bf7\u8fde\u7eed\u5355\u5143\uff08\u7c7b\u4f3c\u6570\u7ec4\uff09 \u94fe\u5f0f\u6808\uff1a\u9700\u8981\u65f6\u7533\u8bf7\uff08\u4f7f\u7528\u5934\u7ed3\u70b9\u4f5c\u4e3a\u6808\u9876\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5c0f\u5316\uff09","title":"\u4e09\u3001\u4e24\u79cd\u8868\u793a\u65b9\u5f0f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_5","text":"\u9006\u5e8f\u8f93\u51fa \u62ec\u53f7\u5339\u914d \u8ff7\u5bab\u5bfb\u8def \u8fdb\u5236\u8f6c\u6362 \u8868\u8fbe\u5f0f\u8ba1\u7b97 [[\u9012\u5f52]]","title":"\u56db\u3001\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88/#_6","text":"\u987a\u5e8f\u6808 \u94fe\u6808","title":"\u4e94\u3001\u5b9e\u73b0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A8%A1%E6%9D%BF/","text":"\u6a21\u677f \u4e00\u3001\u51fd\u6570\u6a21\u677f \u7528\u6cd5 \u6a21\u677f\u58f0\u660e\uff1a template<typename T> \u51fd\u6570\u5b9a\u4e49\uff1a\u5b9a\u4e49\u65f6\u5c06\u53c2\u6570\u7c7b\u578b\u53d8\u4e3aT\uff08\u901a\u7528\u7c7b\u578b\uff09 \u4f7f\u7528\uff1a \u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b \u51fd\u6570\u540d<\u6307\u5b9a\u7c7b\u578b>(\u53c2\u6570)","title":"\u6a21\u677f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A8%A1%E6%9D%BF/#_1","text":"","title":"\u6a21\u677f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A8%A1%E6%9D%BF/#_2","text":"\u7528\u6cd5 \u6a21\u677f\u58f0\u660e\uff1a template<typename T> \u51fd\u6570\u5b9a\u4e49\uff1a\u5b9a\u4e49\u65f6\u5c06\u53c2\u6570\u7c7b\u578b\u53d8\u4e3aT\uff08\u901a\u7528\u7c7b\u578b\uff09 \u4f7f\u7528\uff1a \u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc \u663e\u5f0f\u6307\u5b9a\u7c7b\u578b \u51fd\u6570\u540d<\u6307\u5b9a\u7c7b\u578b>(\u53c2\u6570)","title":"\u4e00\u3001\u51fd\u6570\u6a21\u677f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B1%89%E8%AF%BA%E5%A1%94/","text":"\u6c49\u8bfa\u5854[[\u9012\u5f52]] \u4ee3\u7801\uff1a #include <iostream> #include <algorithm> #include <cstring> using namespace std; void move(int n, char begin, char via, char to){ if(n == 1){ cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; return; } move(n - 1, begin, to, via); cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; move(n - 1, via, begin, to); } int main(){ int n; cout << \"\u8f93\u5165\u76d8\u5b50\u7684\u4e2a\u6570\" << endl; cin >> n; move(n, 'A', 'B', 'C'); return 0; } \u51fd\u6570\u8bf4\u660e void move(int n, char begin, char via, char to){ if(n == 1){ cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; return; } move(n - 1, begin, to, via); cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; move(n - 1, via, begin, to); } \u53c2\u6570\u8bf4\u660e\uff1a \u5c06\u7b2cn\u4e2a\u5229\u7528 begin \u7ecf\u8fc7 via \u79fb\u52a8\u5230 to \u4e0a \u51fd\u6570\u89e3\u91ca \u5982\u679c\u662f1\u4e2a\u76d8\u5b50\uff0c\u76f4\u63a5\u4ece begin \u79fb\u52a8\u5230 to \u4e0a \u5426\u5219 \u5148\u5c06 begin \u4e0a\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece begin \u501f\u52a9 to \u79fb\u52a8\u5230 via \u4e0a\u6682\u5b58 \u518d\u5c06\u5269\u4e0b\u7684\u4e00\u4e2a\u76d8\u5b50\u4ece begin \u76f4\u63a5\u79fb\u52a8\u5230 to \u4e0a \u518d\u5c06 via \u4e0a\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece via \u501f\u52a9 begin \u79fb\u52a8\u5230 to \u4e0a","title":"\u6c49\u8bfa\u5854[[\u9012\u5f52]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B1%89%E8%AF%BA%E5%A1%94/#_1","text":"\u4ee3\u7801\uff1a #include <iostream> #include <algorithm> #include <cstring> using namespace std; void move(int n, char begin, char via, char to){ if(n == 1){ cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; return; } move(n - 1, begin, to, via); cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; move(n - 1, via, begin, to); } int main(){ int n; cout << \"\u8f93\u5165\u76d8\u5b50\u7684\u4e2a\u6570\" << endl; cin >> n; move(n, 'A', 'B', 'C'); return 0; }","title":"\u6c49\u8bfa\u5854[[\u9012\u5f52]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%B1%89%E8%AF%BA%E5%A1%94/#_2","text":"void move(int n, char begin, char via, char to){ if(n == 1){ cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; return; } move(n - 1, begin, to, via); cout << \"move \" << n << \" from \" << begin << \" to \" << to << endl; move(n - 1, via, begin, to); } \u53c2\u6570\u8bf4\u660e\uff1a \u5c06\u7b2cn\u4e2a\u5229\u7528 begin \u7ecf\u8fc7 via \u79fb\u52a8\u5230 to \u4e0a \u51fd\u6570\u89e3\u91ca \u5982\u679c\u662f1\u4e2a\u76d8\u5b50\uff0c\u76f4\u63a5\u4ece begin \u79fb\u52a8\u5230 to \u4e0a \u5426\u5219 \u5148\u5c06 begin \u4e0a\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece begin \u501f\u52a9 to \u79fb\u52a8\u5230 via \u4e0a\u6682\u5b58 \u518d\u5c06\u5269\u4e0b\u7684\u4e00\u4e2a\u76d8\u5b50\u4ece begin \u76f4\u63a5\u79fb\u52a8\u5230 to \u4e0a \u518d\u5c06 via \u4e0a\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece via \u501f\u52a9 begin \u79fb\u52a8\u5230 to \u4e0a","title":"\u51fd\u6570\u8bf4\u660e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/","text":"\u7ebf\u6027\u8868 \u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u53ca\u8fd0\u7b97 \u7279\u70b9\uff1a \u6709\u4e00\u4e2a\u552f\u4e00\u7684\u9996\u5143\u7d20 \u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5c3e\u5143\u7d20 \u9664\u9996\u5143\u7d20\u5916\uff0c\u8868\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u76f4\u63a5\u524d\u9a71 \u9664\u5c3e\u5143\u7d20\u5916\uff0c\u8868\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u76f4\u63a5\u540e\u7ee7 \u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 \u4e00\u822c\u4f7f\u7528\u6570\u7ec4\u6765\u5bf9\u5e94\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 \u5177\u4f53\u5b9e\u73b0\u89c1\u987a\u5e8f\u8868\u5b9e\u9a8c seqList.h \u94fe\u8868 \u5728\u987a\u5e8f\u8868\u4e2d\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u9700\u8981\u8017\u8d39\u5927\u91cf\u65e0\u7528\u7684\u79fb\u52a8 \u57fa\u672c\u7ed3\u6784\uff1a \u57fa\u672c\u64cd\u4f5c \u63d2\u5165 \u5220\u9664 \u5176\u4ed6\u7ed3\u6784\u5f62\u5f0f\u7684\u94fe\u8868 \u5355\u5faa\u73af\u94fe\u8868\uff1a\u8868\u5c3e\u7ed3\u70b9\u4e2d\u7684\u540e\u7ee7\u6307\u9488\u6307\u5411\u8868\u5934\u7ed3\u70b9\uff0c\u5f62\u6210\u5faa\u73af \u5e26\u5c3e\u6307\u9488\u7684\u5355\u5faa\u73af\u94fe\u8868\uff1a \u5c3e\u6307\u9488\u662f\u4e0e\u5934\u6307\u9488\u76f8\u5bf9\u7684\u6982\u5ff5\uff0c\u4e0e\u5355\u5faa\u73af\u94fe\u8868\u4e0d\u540c \u53cc\u94fe\u8868\u7ed3\u6784 \u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u540e\u7ee7\u6307\u9488\u5916\uff0c\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a\u6307\u5411\u5176\u76f4\u63a5\u524d\u9a71\u7684\u6307\u9488","title":"\u7ebf\u6027\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_1","text":"","title":"\u7ebf\u6027\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_2","text":"\u7279\u70b9\uff1a \u6709\u4e00\u4e2a\u552f\u4e00\u7684\u9996\u5143\u7d20 \u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5c3e\u5143\u7d20 \u9664\u9996\u5143\u7d20\u5916\uff0c\u8868\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u76f4\u63a5\u524d\u9a71 \u9664\u5c3e\u5143\u7d20\u5916\uff0c\u8868\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u76f4\u63a5\u540e\u7ee7","title":"\u7ebf\u6027\u8868\u7684\u5b9a\u4e49\u53ca\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_3","text":"\u4e00\u822c\u4f7f\u7528\u6570\u7ec4\u6765\u5bf9\u5e94\u8fde\u7eed\u7684\u5b58\u50a8\u7a7a\u95f4 \u5177\u4f53\u5b9e\u73b0\u89c1\u987a\u5e8f\u8868\u5b9e\u9a8c seqList.h","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_4","text":"\u5728\u987a\u5e8f\u8868\u4e2d\uff0c\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u9700\u8981\u8017\u8d39\u5927\u91cf\u65e0\u7528\u7684\u79fb\u52a8 \u57fa\u672c\u7ed3\u6784\uff1a \u57fa\u672c\u64cd\u4f5c \u63d2\u5165 \u5220\u9664","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/#_5","text":"\u5355\u5faa\u73af\u94fe\u8868\uff1a\u8868\u5c3e\u7ed3\u70b9\u4e2d\u7684\u540e\u7ee7\u6307\u9488\u6307\u5411\u8868\u5934\u7ed3\u70b9\uff0c\u5f62\u6210\u5faa\u73af \u5e26\u5c3e\u6307\u9488\u7684\u5355\u5faa\u73af\u94fe\u8868\uff1a \u5c3e\u6307\u9488\u662f\u4e0e\u5934\u6307\u9488\u76f8\u5bf9\u7684\u6982\u5ff5\uff0c\u4e0e\u5355\u5faa\u73af\u94fe\u8868\u4e0d\u540c \u53cc\u94fe\u8868\u7ed3\u6784 \u6bcf\u4e2a\u7ed3\u70b9\u9664\u4e86\u540e\u7ee7\u6307\u9488\u5916\uff0c\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a\u6307\u5411\u5176\u76f4\u63a5\u524d\u9a71\u7684\u6307\u9488","title":"\u5176\u4ed6\u7ed3\u6784\u5f62\u5f0f\u7684\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868 \u4e00\u3001\u94fe\u8868 \u5b9a\u4e49\uff1a n\u4e2a\u8282\u70b9\u79bb\u6563\u5206\u914d \u5f7c\u6b64\u901a\u8fc7\u6307\u9488\u76f8\u8fde \u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u524d\u9a71\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u540e\u9a71\u8282\u70b9 \u9996\u8282\u70b9\u6ca1\u6709\u524d\u9a71\u8282\u70b9\uff0c\u5c3e\u8282\u70b9\u6ca1\u6709\u540e\u9a71\u8282\u70b9 \u7ec4\u6210 \u9996\u8282\u70b9 \u7b2c\u4e00\u4e2a\u6709\u6548\u8282\u70b9 \u5c3e\u8282\u70b9 \u6700\u540e\u4e00\u4e2a\u6709\u6548\u8282\u70b9 \u5934\u8282\u70b9 \u5934\u6307\u9488 \u6307\u5411\u5934\u8282\u70b9\u7684\u6307\u9488\u53d8\u91cf \u5c3e\u6307\u9488 \u6307\u5411\u5c3e\u8282\u70b9\u7684\u6307\u9488\u53d8\u91cf \u786e\u5b9a\u94fe\u8868\u9700\u8981\u51e0\u4e2a\u53c2\u6570","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_1","text":"","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_2","text":"\u5b9a\u4e49\uff1a n\u4e2a\u8282\u70b9\u79bb\u6563\u5206\u914d \u5f7c\u6b64\u901a\u8fc7\u6307\u9488\u76f8\u8fde \u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u524d\u9a71\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u540e\u9a71\u8282\u70b9 \u9996\u8282\u70b9\u6ca1\u6709\u524d\u9a71\u8282\u70b9\uff0c\u5c3e\u8282\u70b9\u6ca1\u6709\u540e\u9a71\u8282\u70b9 \u7ec4\u6210 \u9996\u8282\u70b9 \u7b2c\u4e00\u4e2a\u6709\u6548\u8282\u70b9 \u5c3e\u8282\u70b9 \u6700\u540e\u4e00\u4e2a\u6709\u6548\u8282\u70b9 \u5934\u8282\u70b9 \u5934\u6307\u9488 \u6307\u5411\u5934\u8282\u70b9\u7684\u6307\u9488\u53d8\u91cf \u5c3e\u6307\u9488 \u6307\u5411\u5c3e\u8282\u70b9\u7684\u6307\u9488\u53d8\u91cf \u786e\u5b9a\u94fe\u8868\u9700\u8981\u51e0\u4e2a\u53c2\u6570","title":"\u4e00\u3001\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/","text":"\u961f\u5217 \u4e00\u3001\u6982\u5ff5 \u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u7ed3\u6784 \u4f7f\u7528head\uff08\u961f\u5934\uff09\u548ctail\uff08\u961f\u5c3e\uff09\u6307\u9488\u6307\u5411\u5934\u548c\u5c3e\uff0c\u5b9e\u73b0\u5148\u8fdb\u5148\u51fa \u4e8c\u3001\u64cd\u4f5c push pop empty \u4e09\u3001\u987a\u5e8f\u961f\u5217 \u56db\u3001\u5faa\u73af\u961f\u5217 \u610f\u4e49\uff1a\u9632\u6b62\u4e86\u4f2a\u6ea2\u51fa\u73b0\u8c61\u5bfc\u81f4\u4e00\u4e2a\u961f\u5217\u53d8\u201c\u77ed\u201d \u64cd\u4f5c \u961f\u5934\uff1a head = (head + 1) % MAX \u961f\u5c3e\uff1a tail = (tail + 1) % MAX \u961f\u5217\u957f\u5ea6\uff1a (head + MAX - tail) % MAX \u7a7a\\\u6ee1 \u7a7a\uff1a head == tail ; \u6ee1\uff1a (tail + 1) % MAX == head \u4e94\u3001\u94fe\u5f0f\u961f\u5217 \u8bbe\u7f6e\u6307\u9488\u6307\u5411\u94fe\u8868\u7684\u5934\u5c3e","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_1","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_2","text":"\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\uff08FIFO\uff09\u7684\u7ed3\u6784 \u4f7f\u7528head\uff08\u961f\u5934\uff09\u548ctail\uff08\u961f\u5c3e\uff09\u6307\u9488\u6307\u5411\u5934\u548c\u5c3e\uff0c\u5b9e\u73b0\u5148\u8fdb\u5148\u51fa","title":"\u4e00\u3001\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_3","text":"push pop empty","title":"\u4e8c\u3001\u64cd\u4f5c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_4","text":"","title":"\u4e09\u3001\u987a\u5e8f\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_5","text":"\u610f\u4e49\uff1a\u9632\u6b62\u4e86\u4f2a\u6ea2\u51fa\u73b0\u8c61\u5bfc\u81f4\u4e00\u4e2a\u961f\u5217\u53d8\u201c\u77ed\u201d \u64cd\u4f5c \u961f\u5934\uff1a head = (head + 1) % MAX \u961f\u5c3e\uff1a tail = (tail + 1) % MAX \u961f\u5217\u957f\u5ea6\uff1a (head + MAX - tail) % MAX \u7a7a\\\u6ee1 \u7a7a\uff1a head == tail ; \u6ee1\uff1a (tail + 1) % MAX == head","title":"\u56db\u3001\u5faa\u73af\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97/#_6","text":"\u8bbe\u7f6e\u6307\u9488\u6307\u5411\u94fe\u8868\u7684\u5934\u5c3e","title":"\u4e94\u3001\u94fe\u5f0f\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/","text":"\u56fe [[\u57fa\u672c\u672f\u8bed]] \u56fe\u7684\u5b58\u50a8\u7ed3\u6784 ==\u90bb\u63a5\u77e9\u9635== \u90bb\u63a5\u77e9\u9635\u662f\u8868\u793a\u9876\u70b9\u4e4b\u95f4\u5173\u7cfb\u7684\u77e9\u9635 \u5b58\u50a8\u65b9\u6cd5\uff1a\u4f7f\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684 \u9876\u70b9\u7684\u4fe1\u606f \uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d \u9876\u70b9\u4e4b\u95f4\u7684\u90bb\u63a5\u5173\u7cfb \u9002\u7528\u4e8e \u7a20\u5bc6\u56fe \u90bb\u63a5\u77e9\u9635\u7684\u8868\u793a\u65b9\u6cd5 \u65e0\u5411\u56fe\uff1a$M[i][j] = M[j][i] = 1$ \u7279\u70b9\uff1a \u4e3a\u5bf9\u79f0\u77e9\u9635 \u7b2c$i$\u884c\u6216$i$\u5217\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u6070\u597d\u4e3a\u7b2c$i$\u4e2a\u9876\u70b9\u7684\u5ea6 \u6709\u5411\u56fe\uff1a$M[i][j] = 1$ \u5728\u6709\u5411\u56fe\u4e2d\u9700\u8981\u6ce8\u610f\u987a\u5e8f \u7279\u70b9\uff1a \u4e0d\u4e00\u5b9a\u5bf9\u79f0 \u7b2ci\u884c\u7684\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u4e3a\u7b2ci\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\uff0c\u7b2ci\u5217\u7684\u975e\u96f6\u5143\u7d20\u4e2a\u6570\u4e3a\u7b2ci\u4e2a\u9876\u70b9\u7684\u5165\u5ea6 \u7f51\uff08\u5e26\u6743\u56fe\uff09\uff1a$M[i][j] = w_{ij}$ \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u5feb\u901f\u5224\u65ad\u4e24\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fb9 \u65b9\u4fbf\u8ba1\u7b97\u5404\u9876\u70b9\u7684\u5ea6 \u7f3a\u70b9\uff1a \u4e0d\u4fbf\u4e8e\u589e\u5220\u9876\u70b9\uff0c\u9700\u8981\u6539\u53d8\u90bb\u63a5\u77e9\u9635\u7684\u5927\u5c0f \u4e0d\u4fbf\u4e8e\u8bbf\u95ee\u6240\u6709\u7684\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8 ==\u90bb\u63a5\u8868== \u4e00\u79cd\u94fe\u5f0f\u5b58\u50a8\uff0c\u5305\u542b\u9876\u70b9\u548c\u90bb\u63a5\u70b9 \u9002\u7528\u4e8e \u7a00\u758f\u56fe \u8868\u793a\u65b9\u5f0f \u65e0\u5411\u56fe\uff1a \u7279\u70b9\uff1a $n$\u4e2a\u9876\u70b9\u3001$e$\u6761\u8fb9->\u9876\u70b9\u8868\u6709$n$\u4e2a\u7ed3\u70b9\uff0c\u90bb\u63a5\u70b9\u8868\u6709$2e$\u4e2a\u7ed3\u70b9 \u9876\u70b9\u7684\u5ea6\u4e3a\u8be5\u9876\u70b9\u540e\u9762\u5355\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u6570 \u6709\u5411\u56fe\uff08\u51fa\u8fb9\uff09 \u7279\u70b9\uff1a $n$\u4e2a\u9876\u70b9\u3001$e$\u6761\u8fb9->\u9876\u70b9\u8868\u6709$n$\u4e2a\u7ed3\u70b9\uff0c\u90bb\u63a5\u70b9\u8868\u6709$e$\u4e2a\u7ed3\u70b9 \u51fa\u5ea6\u4e3a\u8be5\u9876\u70b9\u540e\u9762\u5355\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u6570 \u6709\u5411\u56fe\uff08\u5165\u8fb9\uff09\uff1a\u4e0e\u4e0a\u4e00\u4e2a\u76f8\u53cd \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u4fbf\u4e8e\u589e\u5220\u8282\u70b9 \u4fbf\u4e8e\u8bbf\u95ee\u6240\u6709\u90bb\u63a5\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6\u4f4e \u7f3a\u70b9\uff1a \u4e0d\u4fbf\u4e8e\u5224\u65ad\u4e24\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fb9\uff0c\u9700\u8981\u904d\u5386\u9876\u70b9\u540e\u9762\u7684\u90bb\u63a5\u70b9\u94fe\u8868 \u4e0d\u4fbf\u4e8e\u8ba1\u7b97\u4e2a\u9876\u70b9\u7684\u5ea6 \u5341\u5b57\u94fe\u8868 \u90bb\u63a5\u591a\u91cd\u8868 \u56fe\u7684\u904d\u5386 [[DFS\u4e0eBFS#BFS|\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09]] \u501f\u52a9\u961f\u5217\u6765\u5b9e\u73b0 \u7b97\u6cd5\u6b65\u9aa4\uff1a \u521d\u59cb\u5316\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\u672a\u88ab\u8bbf\u95ee\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u961f\u5217 \u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9$v$\u51fa\u53d1\uff0c\u8bbf\u95ee$v$\u5e76\u6807\u8bb0\u5df2\u8bbf\u95ee\uff0c\u5c06$v$\u5165\u961f \u5982\u679c\u961f\u5217\u975e\u7a7a\uff0c\u5219\u7ee7\u7eed\u6267\u884c\uff0c\u5426\u5219\u7b97\u6cd5 \u7ed3\u675f \u961f\u5934$v$\u51fa\u961f\uff0c\u4e00\u6b21\u8bbf\u95ee$v$\u7684\u6240\u6709\u672a\u88ab\u8bbf\u95ee\u7684\u90bb\u63a5\u70b9\uff0c\u6807\u8bb0\u5df2\u8bbf\u95ee\u5e76\u5165\u961f\uff0c\u91cd\u590d\u6b65\u9aa43 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a \u57fa\u4e8e\u90bb\u63a5\u77e9\u9635\u7684BFS\u7b97\u6cd5\uff1a$O(n^2)$ \u57fa\u4e8e\u90bb\u63a5\u8868\u7684BFS\u7b97\u6cd5\uff1a$O(n +e)$ \u5e94\u7528\uff1a \u6700\u77ed\u8def\uff1a \u7b80\u5355\u6700\u77ed\u8def [[Dijkstra]] \u6700\u5c0f\u751f\u6210\u6811\uff1a [[\u6700\u5c0f\u751f\u6210\u6811#Prim|Prim]] [[DFS\u4e0eBFS#DFS|\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09]] \u79d8\u7c4d\uff1a\u540e\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\uff0c\u5176\u4e34\u754c\u70b9\u5148\u88ab\u8bbf\u95ee \u501f\u52a9\u6808\u5b9e\u73b0\uff08\u9012\u5f52\uff09 \u7b97\u6cd5\u6b65\u9aa4\uff1a \u521d\u59cb\u5316\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u672a\u88ab\u8bbf\u95ee \u4ece\u56fe\u4e2d \u7684\u67d0\u4e2a\u9876\u70b9$v$\u51fa\u53d1\uff0c\u8bbf\u95ee$v$\u5e76\u6807\u8bb0\u5df2\u8bbf\u95ee \u4e00\u6b21\u68c0\u67e5$v$\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u5982\u679c$w$\u672a\u88ab\u8bbf\u95ee\uff0c\u5219\u4ece$w$\u51fa\u53d1\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08\u91cd\u590d2\u30013\u6b65\uff09 \u5e94\u7528 \u62ec\u53f7\u5f15\u7406 \u56fe\u7684\u5e94\u7528 [[Dijkstra|\u5355\u6e90\u6700\u77ed\u8def\u5f84\u2014\u2014Dijkstra]] [[Bellman-Ford]] [[SPFA]] [[Floyd|\u5404\u9876\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u2014\u2014Floyd]] [[\u6700\u5c0f\u751f\u6210\u6811#Prim|\u6700\u5c0f\u751f\u6210\u6811Prim]] [[\u6700\u5c0f\u751f\u6210\u6811#Kruskal|\u6700\u5c0f\u751f\u6210\u6811Kruskal]] [[\u62d3\u6251\u6392\u5e8f]]","title":"\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_1","text":"","title":"\u56fe"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_2","text":"","title":"[[\u57fa\u672c\u672f\u8bed]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_3","text":"","title":"\u56fe\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_4","text":"\u90bb\u63a5\u77e9\u9635\u662f\u8868\u793a\u9876\u70b9\u4e4b\u95f4\u5173\u7cfb\u7684\u77e9\u9635 \u5b58\u50a8\u65b9\u6cd5\uff1a\u4f7f\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d\u7684 \u9876\u70b9\u7684\u4fe1\u606f \uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5b58\u50a8\u56fe\u4e2d \u9876\u70b9\u4e4b\u95f4\u7684\u90bb\u63a5\u5173\u7cfb \u9002\u7528\u4e8e \u7a20\u5bc6\u56fe \u90bb\u63a5\u77e9\u9635\u7684\u8868\u793a\u65b9\u6cd5 \u65e0\u5411\u56fe\uff1a$M[i][j] = M[j][i] = 1$ \u7279\u70b9\uff1a \u4e3a\u5bf9\u79f0\u77e9\u9635 \u7b2c$i$\u884c\u6216$i$\u5217\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u6070\u597d\u4e3a\u7b2c$i$\u4e2a\u9876\u70b9\u7684\u5ea6 \u6709\u5411\u56fe\uff1a$M[i][j] = 1$ \u5728\u6709\u5411\u56fe\u4e2d\u9700\u8981\u6ce8\u610f\u987a\u5e8f \u7279\u70b9\uff1a \u4e0d\u4e00\u5b9a\u5bf9\u79f0 \u7b2ci\u884c\u7684\u975e\u96f6\u5143\u7d20\u7684\u4e2a\u6570\u4e3a\u7b2ci\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\uff0c\u7b2ci\u5217\u7684\u975e\u96f6\u5143\u7d20\u4e2a\u6570\u4e3a\u7b2ci\u4e2a\u9876\u70b9\u7684\u5165\u5ea6 \u7f51\uff08\u5e26\u6743\u56fe\uff09\uff1a$M[i][j] = w_{ij}$ \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u5feb\u901f\u5224\u65ad\u4e24\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fb9 \u65b9\u4fbf\u8ba1\u7b97\u5404\u9876\u70b9\u7684\u5ea6 \u7f3a\u70b9\uff1a \u4e0d\u4fbf\u4e8e\u589e\u5220\u9876\u70b9\uff0c\u9700\u8981\u6539\u53d8\u90bb\u63a5\u77e9\u9635\u7684\u5927\u5c0f \u4e0d\u4fbf\u4e8e\u8bbf\u95ee\u6240\u6709\u7684\u7ed3\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8","title":"==\u90bb\u63a5\u77e9\u9635=="},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_5","text":"\u4e00\u79cd\u94fe\u5f0f\u5b58\u50a8\uff0c\u5305\u542b\u9876\u70b9\u548c\u90bb\u63a5\u70b9 \u9002\u7528\u4e8e \u7a00\u758f\u56fe \u8868\u793a\u65b9\u5f0f \u65e0\u5411\u56fe\uff1a \u7279\u70b9\uff1a $n$\u4e2a\u9876\u70b9\u3001$e$\u6761\u8fb9->\u9876\u70b9\u8868\u6709$n$\u4e2a\u7ed3\u70b9\uff0c\u90bb\u63a5\u70b9\u8868\u6709$2e$\u4e2a\u7ed3\u70b9 \u9876\u70b9\u7684\u5ea6\u4e3a\u8be5\u9876\u70b9\u540e\u9762\u5355\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u6570 \u6709\u5411\u56fe\uff08\u51fa\u8fb9\uff09 \u7279\u70b9\uff1a $n$\u4e2a\u9876\u70b9\u3001$e$\u6761\u8fb9->\u9876\u70b9\u8868\u6709$n$\u4e2a\u7ed3\u70b9\uff0c\u90bb\u63a5\u70b9\u8868\u6709$e$\u4e2a\u7ed3\u70b9 \u51fa\u5ea6\u4e3a\u8be5\u9876\u70b9\u540e\u9762\u5355\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9\u6570 \u6709\u5411\u56fe\uff08\u5165\u8fb9\uff09\uff1a\u4e0e\u4e0a\u4e00\u4e2a\u76f8\u53cd \u4f18\u7f3a\u70b9\uff1a \u4f18\u70b9\uff1a \u4fbf\u4e8e\u589e\u5220\u8282\u70b9 \u4fbf\u4e8e\u8bbf\u95ee\u6240\u6709\u90bb\u63a5\u70b9 \u7a7a\u95f4\u590d\u6742\u5ea6\u4f4e \u7f3a\u70b9\uff1a \u4e0d\u4fbf\u4e8e\u5224\u65ad\u4e24\u9876\u70b9\u4e4b\u95f4\u662f\u5426\u6709\u8fb9\uff0c\u9700\u8981\u904d\u5386\u9876\u70b9\u540e\u9762\u7684\u90bb\u63a5\u70b9\u94fe\u8868 \u4e0d\u4fbf\u4e8e\u8ba1\u7b97\u4e2a\u9876\u70b9\u7684\u5ea6","title":"==\u90bb\u63a5\u8868=="},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_6","text":"","title":"\u5341\u5b57\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_7","text":"","title":"\u90bb\u63a5\u591a\u91cd\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_8","text":"","title":"\u56fe\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#dfsbfsbfsbfs","text":"\u501f\u52a9\u961f\u5217\u6765\u5b9e\u73b0","title":"[[DFS\u4e0eBFS#BFS|\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\uff08BFS\uff09]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_9","text":"\u521d\u59cb\u5316\u56fe\u4e2d\u6240\u6709\u7684\u9876\u70b9\u672a\u88ab\u8bbf\u95ee\uff0c\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u961f\u5217 \u4ece\u56fe\u4e2d\u7684\u67d0\u4e2a\u9876\u70b9$v$\u51fa\u53d1\uff0c\u8bbf\u95ee$v$\u5e76\u6807\u8bb0\u5df2\u8bbf\u95ee\uff0c\u5c06$v$\u5165\u961f \u5982\u679c\u961f\u5217\u975e\u7a7a\uff0c\u5219\u7ee7\u7eed\u6267\u884c\uff0c\u5426\u5219\u7b97\u6cd5 \u7ed3\u675f \u961f\u5934$v$\u51fa\u961f\uff0c\u4e00\u6b21\u8bbf\u95ee$v$\u7684\u6240\u6709\u672a\u88ab\u8bbf\u95ee\u7684\u90bb\u63a5\u70b9\uff0c\u6807\u8bb0\u5df2\u8bbf\u95ee\u5e76\u5165\u961f\uff0c\u91cd\u590d\u6b65\u9aa43","title":"\u7b97\u6cd5\u6b65\u9aa4\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_10","text":"\u57fa\u4e8e\u90bb\u63a5\u77e9\u9635\u7684BFS\u7b97\u6cd5\uff1a$O(n^2)$ \u57fa\u4e8e\u90bb\u63a5\u8868\u7684BFS\u7b97\u6cd5\uff1a$O(n +e)$","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_11","text":"\u6700\u77ed\u8def\uff1a \u7b80\u5355\u6700\u77ed\u8def [[Dijkstra]] \u6700\u5c0f\u751f\u6210\u6811\uff1a [[\u6700\u5c0f\u751f\u6210\u6811#Prim|Prim]]","title":"\u5e94\u7528\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#dfsbfsdfsdfs","text":"\u79d8\u7c4d\uff1a\u540e\u88ab\u8bbf\u95ee\u7684\u9876\u70b9\uff0c\u5176\u4e34\u754c\u70b9\u5148\u88ab\u8bbf\u95ee \u501f\u52a9\u6808\u5b9e\u73b0\uff08\u9012\u5f52\uff09","title":"[[DFS\u4e0eBFS#DFS|\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08DFS\uff09]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_12","text":"\u521d\u59cb\u5316\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u672a\u88ab\u8bbf\u95ee \u4ece\u56fe\u4e2d \u7684\u67d0\u4e2a\u9876\u70b9$v$\u51fa\u53d1\uff0c\u8bbf\u95ee$v$\u5e76\u6807\u8bb0\u5df2\u8bbf\u95ee \u4e00\u6b21\u68c0\u67e5$v$\u7684\u6240\u6709\u90bb\u63a5\u70b9\uff0c\u5982\u679c$w$\u672a\u88ab\u8bbf\u95ee\uff0c\u5219\u4ece$w$\u51fa\u53d1\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08\u91cd\u590d2\u30013\u6b65\uff09","title":"\u7b97\u6cd5\u6b65\u9aa4\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_13","text":"\u62ec\u53f7\u5f15\u7406","title":"\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_14","text":"","title":"\u56fe\u7684\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#dijkstradijkstra","text":"","title":"[[Dijkstra|\u5355\u6e90\u6700\u77ed\u8def\u5f84\u2014\u2014Dijkstra]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#bellman-ford","text":"","title":"[[Bellman-Ford]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#spfa","text":"","title":"[[SPFA]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#floydfloyd","text":"","title":"[[Floyd|\u5404\u9876\u70b9\u4e4b\u95f4\u6700\u77ed\u8def\u5f84\u2014\u2014Floyd]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#primprim","text":"","title":"[[\u6700\u5c0f\u751f\u6210\u6811#Prim|\u6700\u5c0f\u751f\u6210\u6811Prim]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#kruskalkruskal","text":"","title":"[[\u6700\u5c0f\u751f\u6210\u6811#Kruskal|\u6700\u5c0f\u751f\u6210\u6811Kruskal]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9B%BE/#_15","text":"","title":"[[\u62d3\u6251\u6392\u5e8f]]"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/","text":"\u57fa\u672c\u672f\u8bed \u56fe\u7684\u7c7b\u578b \u56fe\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u4e8c\u5143\u7ec4$G= $\u8868\u793a\uff0cV\u4e3a\u9876\u70b9\u96c6\uff0cE\u4e3a\u8fb9\u96c6 \u65e0\u5411\u56fe\uff1a\u65e0\u65b9\u5411\uff0c\u8fb9\u4f7f\u7528\u5706\u62ec\u53f7\u8868\u793a \u6709\u5411\u56fe\uff1a\u6709\u65b9\u5411\uff0c\u5f27\u4f7f\u7528\u5c16\u62ec\u53f7\u8868\u793a$ $ \uff0c$v_1$\u4e3a\u5f27\u5c3e\uff0c$v_3$\u4e3a\u5f27\u5934 \u7b80\u5355\u56fe\uff1a\u53ca\u4e0d\u542b\u5e73\u884c\u8fb9\u4e5f\u4e0d\u542b\u73af\u7684\u56fe\u79f0\u4e3a\u7b80\u5355\u56fe \u5b8c\u5168\u56fe\uff1a \u65e0\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u6709\u4e00\u6761\u8fb9 \u6bcf\u4e2a\u9876\u70b9\u5230\u5176\u4ed6$n-1$\u4e2a\u9876\u70b9\u90fd\u6709\u8fb9\uff0c\u4e00\u5171\u6709$\\frac{n(n-1)}{2}$\u6761\u8fb9 \u6709\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u6709\u4e24\u6761\u65b9\u5411\u76f8\u53cd\u7684\u5f27 \u6bcf\u4e2a\u9876\u70b9\u53d1\u51fa$n-1$\u6761\u8fb9\uff0c\u4e14\u8fdb\u6765$n-1$\u6761\u8fb9 \u5171$n(n-1)$ \u7a00\u758f\u56fe\u4e0e\u7a20\u5bc6\u56fe\uff1a\u4e00\u822c\u6765\u8bf4\uff1a$\\left\\vert E \\right\\vert < \\left\\vert V \\right\\vert*\\log{\\left\\vert V \\right\\vert}$ ,\u4e3a\u7a00\u758f\u56fe \u90bb\u63a5\u548c\u5173\u8054\uff1a \u90bb\u63a5\uff1a\u6307 \u9876\u70b9\u548c\u9876\u70b9 \u4e4b\u95f4\u7684\u5173\u7cfb \u5173\u8054\uff1a\u6307 \u8fb9\u548c\u9876\u70b9 \u4e4b\u95f4\u7684\u5173\u7cfb \u9876\u70b9\u7684\u5ea6\uff1a\u4e0e\u8be5\u9876\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u7684\u6570\u76ee \u8def\u5f84\u3001\u8def\u5f84\u957f\u5ea6\u548c\u8ddd\u79bb \u8def\u5f84\uff1a\u63a5\u7eed\u7684\u8fb9\u7684\u9876\u70b9\u6784\u6210\u7684\u5e8f\u5217 \u8def\u5f84\u957f\u5ea6\uff1a\u8def\u5f84\u4e0a\u8fb9\u6216\u5f27\u7684\u6570\u76ee \u8ddd\u79bb\uff1a\u4ece\u9876\u70b9\u5230\u53e6\u4e00\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 \u56de\u8def\uff08\u73af\uff09\u3001\u7b80\u5355\u8def\u5f84\u548c\u7b80\u5355\u56de\u8def \u56de\u8def\uff1a\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84 \u7b80\u5355\u8def\u5f84\uff1a\u9664\u8def\u5f84\u8d77\u70b9\u548c\u7ec8\u70b9 \u53ef\u4ee5 \u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u5747\u4e0d\u76f8\u540c\u7684\u8def\u5f84 \u7b80\u5355\u56de\u8def\uff1a\u9664\u8def\u5f84\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u5747\u4e0d\u76f8\u540c\u7684\u8def\u5f84 \u6b27\u62c9\u56de\u8def \uff1a\u7ecf\u8fc7\u56fe\u4e2d\u5404\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u56de\u8def \u5b50\u56fe\u4e0e\u751f\u6210\u5b50\u56fe \u5b50\u56fe\uff1a\u8bbe\u6709\u4e24\u4e2a\u56fe\uff1a$G=(V,E)\u3001G_1 = (V_1, E_1)$\uff0c\u5176\u4e2d\uff0c$V_1\\subseteq V\u3001E_1\\subseteq E$ ,\u5219\u79f0$G_1$\u4e3a$G$\u7684\u5b50\u56fe \u751f\u6210\u5b50\u56fe\uff1a\u4ece\u56fe\u4e2d\u9009\u62e9\u6240\u6709\u7684\u9876\u70b9\uff0c\u82e5\u5e72\u6761\u8fb9\u6784\u6210\u7684\u56fe\u79f0\u4e3a\u539f\u56fe\u7684\u751f\u6210\u5b50\u56fe ^e89c2f \u8fd9\u6b21\u4e00\u5b9a\u5f04\u61c2\u5b8c\u5168\u56fe\u3001\u8fde\u901a\u56fe\u3001\u8fde\u901a\u5206\u91cf\u3001\u5f3a\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u5206\u91cf\u3001\u6781\u5927\u8fde\u901a\u5206\u91cf\u3001\u6781\u5c0f\u8054\u901a\u5206\u91cf\u3001\u751f\u6210\u6811\u3001\u751f\u6210\u68ee\u6797\u7684\u533a\u522b_\u5c0f\u5c0f\u7684\u9999\u8f9b\u6599\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u5b8c\u5168\u56fe\u548c\u8fde\u901a\u56fe\u533a\u522b \u8fde\u901a\u56fe\u548c\u8fde\u901a\u5206\u91cf \u8fde\u901a\u56fe\uff1a\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u8fde\u901a\u7684\uff08\u5982\u4e0a\u56fe\u4e2d\u7684(a)\uff09 \u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe$G$\u7684 \u6781\u5927\u8fde\u901a\u5b50\u56fe \u79f0\u4e3a$G$\u7684\u8fde\u901a\u5206\u91cf \u6781\u5927\u8fde\u901a\u5b50\u56fe\uff1a\u8be5\u5b50\u56fe\u662f$G$\u7684\u8fde\u901a\u5b50\u56fe\uff0c\u5982\u679c\u518d\u52a0\u5165\u4e00\u4e2a\u9876\u70b9\uff0c\u8be5\u5b50\u56fe\u4e0d\u8fde\u901a \u5f3a\u8fde\u901a\u56fe\u548c\u5f3a\u8fde\u901a\u5206\u91cf \u5f3a\u8fde\u901a\u56fe\uff1a\u5728 \u6709\u5411\u56fe \u4e2d\uff0c\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u6709\u8def\u5f84 \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe$G$\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a$G$\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u6811\u548c\u6709\u5411\u6811 \u4ece\u56fe\u8bba\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6811\u662f\u4e00\u4e2a \u65e0\u73af\u8fde\u901a\u56fe \uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e94\u4e2a\u6761\u4ef6\uff1a $G$\u662f\u8fde\u901a\u56fe\u4e14$m=n-1$ $G$\u662f\u8fde\u901a\u56fe\u4e14\u65e0\u73af $G$\u662f\u8fde\u901a\u56fe\uff0c\u4f46\u5220\u9664\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u4e0d\u8fde\u901a $G$\u662f\u65e0\u73af\u56fe\uff0c\u4f46\u6dfb\u52a0\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u4f1a\u4ea7\u751f\u73af $G$\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9\u4e4b\u95f4\u4ec5\u5b58\u5728\u4e00\u6761\u7b80\u5355\u8def\u5f84 \u751f\u6210\u6811\u548c\u751f\u6210\u68ee\u6797 \u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff1a\u5220\u9664\u4efb\u4f55\u4e00\u6761\u8fb9\uff0c\u8be5\u5b50\u56fe\u90fd\u4e0d\u5728\u8fde\u901a \u751f\u6210\u6811\uff1a\u5305\u542b\u65e0\u5411\u56feG\u6240\u6709\u9876\u70b9\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe ^c58be0 \u751f\u6210\u68ee\u6797\uff1a\u5bf9\u975e\u8fde\u901a\u56fe\uff0c\u7531\u5404\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u7ec4\u6210\u7684\u96c6\u5408 \u4e8c\u5206\u56fe\uff1a\u5982\u679c\u9876\u70b9\u96c6V\u53ef\u5206\u5272\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u4e14\u6bcf\u6761\u8fb9\u6240\u5173\u8054\u7684\u4e24\u4e2a\u9876\u70b9\u5206\u522b\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u9876\u70b9\u96c6 \u8fb9\u7684\u5206\u7c7b \u6811\u8fb9\uff1a\u6df1\u5ea6\u4f18\u5148\u68ee\u6797\u4e2d\u7684\u8fb9 \u540e\u5411\u8fb9\uff1a\u540e\u5411\u8fb9$(u,v)$\u662f\u5c06\u7ed3\u70b9$u$\u8fde\u63a5\u5230\u5176\u5728\u6df1\u5ea6\u4f18\u5148\u6811\u7684\u7956\u5148\u8282\u70b9$v$ \u81ea\u5faa\u73af\u4e5f\u88ab\u8ba4\u4e3a\u662f\u540e\u5411\u8fb9 \u524d\u5411\u8fb9\uff1a\u524d\u5411\u8fb9$(u,v)$\u662f\u5c06\u7ed3\u70b9$u$\u8fde\u63a5\u5230\u5176\u5728\u6df1\u5ea6\u4f18\u5148\u6811\u7684\u540e\u4ee3\u8282\u70b9$v$ \u6a2a\u5411\u8fb9\uff1a\u5176\u4ed6\u6240\u6709\u8fb9","title":"\u57fa\u672c\u672f\u8bed"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/#_1","text":"","title":"\u57fa\u672c\u672f\u8bed"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/#_2","text":"\u56fe\u901a\u5e38\u4f7f\u7528\u4e00\u4e2a\u4e8c\u5143\u7ec4$G= $\u8868\u793a\uff0cV\u4e3a\u9876\u70b9\u96c6\uff0cE\u4e3a\u8fb9\u96c6 \u65e0\u5411\u56fe\uff1a\u65e0\u65b9\u5411\uff0c\u8fb9\u4f7f\u7528\u5706\u62ec\u53f7\u8868\u793a \u6709\u5411\u56fe\uff1a\u6709\u65b9\u5411\uff0c\u5f27\u4f7f\u7528\u5c16\u62ec\u53f7\u8868\u793a$ $ \uff0c$v_1$\u4e3a\u5f27\u5c3e\uff0c$v_3$\u4e3a\u5f27\u5934 \u7b80\u5355\u56fe\uff1a\u53ca\u4e0d\u542b\u5e73\u884c\u8fb9\u4e5f\u4e0d\u542b\u73af\u7684\u56fe\u79f0\u4e3a\u7b80\u5355\u56fe \u5b8c\u5168\u56fe\uff1a \u65e0\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u6709\u4e00\u6761\u8fb9 \u6bcf\u4e2a\u9876\u70b9\u5230\u5176\u4ed6$n-1$\u4e2a\u9876\u70b9\u90fd\u6709\u8fb9\uff0c\u4e00\u5171\u6709$\\frac{n(n-1)}{2}$\u6761\u8fb9 \u6709\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u6709\u4e24\u6761\u65b9\u5411\u76f8\u53cd\u7684\u5f27 \u6bcf\u4e2a\u9876\u70b9\u53d1\u51fa$n-1$\u6761\u8fb9\uff0c\u4e14\u8fdb\u6765$n-1$\u6761\u8fb9 \u5171$n(n-1)$ \u7a00\u758f\u56fe\u4e0e\u7a20\u5bc6\u56fe\uff1a\u4e00\u822c\u6765\u8bf4\uff1a$\\left\\vert E \\right\\vert < \\left\\vert V \\right\\vert*\\log{\\left\\vert V \\right\\vert}$ ,\u4e3a\u7a00\u758f\u56fe \u90bb\u63a5\u548c\u5173\u8054\uff1a \u90bb\u63a5\uff1a\u6307 \u9876\u70b9\u548c\u9876\u70b9 \u4e4b\u95f4\u7684\u5173\u7cfb \u5173\u8054\uff1a\u6307 \u8fb9\u548c\u9876\u70b9 \u4e4b\u95f4\u7684\u5173\u7cfb \u9876\u70b9\u7684\u5ea6\uff1a\u4e0e\u8be5\u9876\u70b9\u76f8\u5173\u8054\u7684\u8fb9\u7684\u6570\u76ee \u8def\u5f84\u3001\u8def\u5f84\u957f\u5ea6\u548c\u8ddd\u79bb \u8def\u5f84\uff1a\u63a5\u7eed\u7684\u8fb9\u7684\u9876\u70b9\u6784\u6210\u7684\u5e8f\u5217 \u8def\u5f84\u957f\u5ea6\uff1a\u8def\u5f84\u4e0a\u8fb9\u6216\u5f27\u7684\u6570\u76ee \u8ddd\u79bb\uff1a\u4ece\u9876\u70b9\u5230\u53e6\u4e00\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 \u56de\u8def\uff08\u73af\uff09\u3001\u7b80\u5355\u8def\u5f84\u548c\u7b80\u5355\u56de\u8def \u56de\u8def\uff1a\u7b2c\u4e00\u4e2a\u9876\u70b9\u548c\u6700\u540e\u4e00\u4e2a\u9876\u70b9\u76f8\u540c\u7684\u8def\u5f84 \u7b80\u5355\u8def\u5f84\uff1a\u9664\u8def\u5f84\u8d77\u70b9\u548c\u7ec8\u70b9 \u53ef\u4ee5 \u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u5747\u4e0d\u76f8\u540c\u7684\u8def\u5f84 \u7b80\u5355\u56de\u8def\uff1a\u9664\u8def\u5f84\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u5916\uff0c\u5176\u4f59\u9876\u70b9\u5747\u4e0d\u76f8\u540c\u7684\u8def\u5f84 \u6b27\u62c9\u56de\u8def \uff1a\u7ecf\u8fc7\u56fe\u4e2d\u5404\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u56de\u8def \u5b50\u56fe\u4e0e\u751f\u6210\u5b50\u56fe \u5b50\u56fe\uff1a\u8bbe\u6709\u4e24\u4e2a\u56fe\uff1a$G=(V,E)\u3001G_1 = (V_1, E_1)$\uff0c\u5176\u4e2d\uff0c$V_1\\subseteq V\u3001E_1\\subseteq E$ ,\u5219\u79f0$G_1$\u4e3a$G$\u7684\u5b50\u56fe \u751f\u6210\u5b50\u56fe\uff1a\u4ece\u56fe\u4e2d\u9009\u62e9\u6240\u6709\u7684\u9876\u70b9\uff0c\u82e5\u5e72\u6761\u8fb9\u6784\u6210\u7684\u56fe\u79f0\u4e3a\u539f\u56fe\u7684\u751f\u6210\u5b50\u56fe ^e89c2f \u8fd9\u6b21\u4e00\u5b9a\u5f04\u61c2\u5b8c\u5168\u56fe\u3001\u8fde\u901a\u56fe\u3001\u8fde\u901a\u5206\u91cf\u3001\u5f3a\u8fde\u901a\u56fe\u3001\u5f3a\u8fde\u901a\u5206\u91cf\u3001\u6781\u5927\u8fde\u901a\u5206\u91cf\u3001\u6781\u5c0f\u8054\u901a\u5206\u91cf\u3001\u751f\u6210\u6811\u3001\u751f\u6210\u68ee\u6797\u7684\u533a\u522b_\u5c0f\u5c0f\u7684\u9999\u8f9b\u6599\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u5b8c\u5168\u56fe\u548c\u8fde\u901a\u56fe\u533a\u522b \u8fde\u901a\u56fe\u548c\u8fde\u901a\u5206\u91cf \u8fde\u901a\u56fe\uff1a\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u90fd\u662f\u8fde\u901a\u7684\uff08\u5982\u4e0a\u56fe\u4e2d\u7684(a)\uff09 \u8fde\u901a\u5206\u91cf\uff1a\u65e0\u5411\u56fe$G$\u7684 \u6781\u5927\u8fde\u901a\u5b50\u56fe \u79f0\u4e3a$G$\u7684\u8fde\u901a\u5206\u91cf \u6781\u5927\u8fde\u901a\u5b50\u56fe\uff1a\u8be5\u5b50\u56fe\u662f$G$\u7684\u8fde\u901a\u5b50\u56fe\uff0c\u5982\u679c\u518d\u52a0\u5165\u4e00\u4e2a\u9876\u70b9\uff0c\u8be5\u5b50\u56fe\u4e0d\u8fde\u901a \u5f3a\u8fde\u901a\u56fe\u548c\u5f3a\u8fde\u901a\u5206\u91cf \u5f3a\u8fde\u901a\u56fe\uff1a\u5728 \u6709\u5411\u56fe \u4e2d\uff0c\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u6709\u8def\u5f84 \u5f3a\u8fde\u901a\u5206\u91cf\uff1a\u6709\u5411\u56fe$G$\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a$G$\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u6811\u548c\u6709\u5411\u6811 \u4ece\u56fe\u8bba\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6811\u662f\u4e00\u4e2a \u65e0\u73af\u8fde\u901a\u56fe \uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e94\u4e2a\u6761\u4ef6\uff1a $G$\u662f\u8fde\u901a\u56fe\u4e14$m=n-1$ $G$\u662f\u8fde\u901a\u56fe\u4e14\u65e0\u73af $G$\u662f\u8fde\u901a\u56fe\uff0c\u4f46\u5220\u9664\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u4e0d\u8fde\u901a $G$\u662f\u65e0\u73af\u56fe\uff0c\u4f46\u6dfb\u52a0\u4efb\u610f\u4e00\u6761\u8fb9\u5c31\u4f1a\u4ea7\u751f\u73af $G$\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9\u4e4b\u95f4\u4ec5\u5b58\u5728\u4e00\u6761\u7b80\u5355\u8def\u5f84 \u751f\u6210\u6811\u548c\u751f\u6210\u68ee\u6797 \u6781\u5c0f\u8fde\u901a\u5b50\u56fe\uff1a\u5220\u9664\u4efb\u4f55\u4e00\u6761\u8fb9\uff0c\u8be5\u5b50\u56fe\u90fd\u4e0d\u5728\u8fde\u901a \u751f\u6210\u6811\uff1a\u5305\u542b\u65e0\u5411\u56feG\u6240\u6709\u9876\u70b9\u7684\u6781\u5c0f\u8fde\u901a\u5b50\u56fe ^c58be0 \u751f\u6210\u68ee\u6797\uff1a\u5bf9\u975e\u8fde\u901a\u56fe\uff0c\u7531\u5404\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u751f\u6210\u6811\u7ec4\u6210\u7684\u96c6\u5408 \u4e8c\u5206\u56fe\uff1a\u5982\u679c\u9876\u70b9\u96c6V\u53ef\u5206\u5272\u4e3a\u4e24\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6\uff0c\u4e14\u6bcf\u6761\u8fb9\u6240\u5173\u8054\u7684\u4e24\u4e2a\u9876\u70b9\u5206\u522b\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u9876\u70b9\u96c6","title":"\u56fe\u7684\u7c7b\u578b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%9B%BE/%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/#_3","text":"\u6811\u8fb9\uff1a\u6df1\u5ea6\u4f18\u5148\u68ee\u6797\u4e2d\u7684\u8fb9 \u540e\u5411\u8fb9\uff1a\u540e\u5411\u8fb9$(u,v)$\u662f\u5c06\u7ed3\u70b9$u$\u8fde\u63a5\u5230\u5176\u5728\u6df1\u5ea6\u4f18\u5148\u6811\u7684\u7956\u5148\u8282\u70b9$v$ \u81ea\u5faa\u73af\u4e5f\u88ab\u8ba4\u4e3a\u662f\u540e\u5411\u8fb9 \u524d\u5411\u8fb9\uff1a\u524d\u5411\u8fb9$(u,v)$\u662f\u5c06\u7ed3\u70b9$u$\u8fde\u63a5\u5230\u5176\u5728\u6df1\u5ea6\u4f18\u5148\u6811\u7684\u540e\u4ee3\u8282\u70b9$v$ \u6a2a\u5411\u8fb9\uff1a\u5176\u4ed6\u6240\u6709\u8fb9","title":"\u8fb9\u7684\u5206\u7c7b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f \u6982\u8ff0 \u5206\u7c7b \u589e\u6392\u5e8f\u4e0e\u51cf\u6392\u5e8f \u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f \u7a33\u5b9a\u6027\uff1a\u6307\u5f53\u5173\u952e\u5b57\u76f8\u7b49\u65f6\uff0c\u6392\u5e8f\u524d\u540e\u7684\u4f4d\u7f6e\u53d8\u5316 \u57fa\u672c\u65b9\u6cd5\uff1a [[\u63d2\u5165\u6392\u5e8f]]\uff1a [[\u63d2\u5165\u6392\u5e8f#\u76f4\u63a5\u63d2\u5165\u6392\u5e8f|\u76f4\u63a5\u63d2\u5165\u6392\u5e8f]] [[\u63d2\u5165\u6392\u5e8f#\u5e0c\u5c14\u6392\u5e8f|\u5e0c\u5c14\u6392\u5e8f]] \u4ea4\u6362\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\uff1a \u7b80\u5355\u9009\u62e9\u6392\u5e8f \u5806\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5206\u914d\u6392\u5e8f \u6876\u6392\u5e8f \u57fa\u6570\u6392\u5e8f","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/#_2","text":"","title":"\u6982\u8ff0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/#_3","text":"\u589e\u6392\u5e8f\u4e0e\u51cf\u6392\u5e8f \u5185\u90e8\u6392\u5e8f\u548c\u5916\u90e8\u6392\u5e8f \u7a33\u5b9a\u6027\uff1a\u6307\u5f53\u5173\u952e\u5b57\u76f8\u7b49\u65f6\uff0c\u6392\u5e8f\u524d\u540e\u7684\u4f4d\u7f6e\u53d8\u5316 \u57fa\u672c\u65b9\u6cd5\uff1a [[\u63d2\u5165\u6392\u5e8f]]\uff1a [[\u63d2\u5165\u6392\u5e8f#\u76f4\u63a5\u63d2\u5165\u6392\u5e8f|\u76f4\u63a5\u63d2\u5165\u6392\u5e8f]] [[\u63d2\u5165\u6392\u5e8f#\u5e0c\u5c14\u6392\u5e8f|\u5e0c\u5c14\u6392\u5e8f]] \u4ea4\u6362\u6392\u5e8f \u5192\u6ce1\u6392\u5e8f \u5feb\u901f\u6392\u5e8f \u9009\u62e9\u6392\u5e8f\uff1a \u7b80\u5355\u9009\u62e9\u6392\u5e8f \u5806\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u5206\u914d\u6392\u5e8f \u6876\u6392\u5e8f \u57fa\u6570\u6392\u5e8f","title":"\u5206\u7c7b"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","text":"\u63d2\u5165\u6392\u5e8f \u57fa\u672c\u601d\u60f3\uff1a\u5c06\u5e26\u6392\u5e8f\u8868\u770b\u4f5c\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u5de6\u8fb9\u4e3a\u6709\u5e8f\u533a\uff0c\u53f3\u8fb9\u4e3a\u65e0\u5e8f\u533a\uff0c\u6392\u5e8f\u7684\u8fc7\u7a0b\u5373\u5c06\u53f3\u8fb9\u65e0\u5e8f\u533a\u4e2d\u7684\u5143\u7d20\u9010\u4e2a\u63d2\u5165\u5230\u5de6\u8fb9\u7684\u6709\u5e8f\u533a\uff0c\u6784\u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u533a \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u7b97\u6cd5\u6b65\u9aa4 \u8bbe\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u5b58\u50a8\u5728\u6570\u7ec4 r[1\u2026\u2026n] \u4e2d\uff0c\u5c06\u7b2c\u4e00\u4e2a\u8bb0\u5f55 r[1] \u89c6\u4f5c\u5de6\u8fb9\u7684\u6709\u5e8f\u5e8f\u5217\uff0c r[2\u2026\u2026n] \u89c6\u4f5c\u53f3\u8fb9\u7684\u65e0\u5e8f\u5e8f\u5217 \u4f9d\u6b21\u5c06\u53f3\u8fb9\u7684\u65e0\u5e8f\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u6709\u5e8f\u5e8f\u5217\u4e2d \u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u6700\u597d\u60c5\u51b5\uff1a\u672c\u8eab\u6709\u5e8f->$O(n)$ \u6700\u574f\u60c5\u51b5\uff1a\u672c\u8eab\u9006\u5e8f->$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$ \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a\u6392\u5e8f \u6700\u540e\u4e00\u8d9f\u6392\u5e8f\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u6240\u6709\u7684\u5143\u7d20\u90fd\u4e0d\u5728\u5176\u6700\u7ec8\u4f4d\u7f6e\u4e0a\u7684\u60c5\u51b5 \u5e0c\u5c14\u6392\u5e8f \u57fa\u672c\u601d\u60f3\uff1a\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u4e3a\u82e5\u5e72\u7ec4\uff0c\u5728\u6bcf\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff0c\u4f7f\u5f97\u6574\u4e2a\u5e8f\u5217\u57fa\u672c\u6709\u5e8f\uff0c\u7136\u540e\u518d\u5bf9\u6574\u4e2a\u5e8f\u5217\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u5206\u7ec4\u7684\u65b9\u5f0f\uff1a\u95f4\u9694\u65b9\u6cd5\u5206\u7ec4 \u8bbe\u7f6e\u6b65\u957f$d$\uff0c\u4e0b\u6807\u76f8\u5dee$d$\u7684\u4e3a\u4e00\u7ec4 \u53d6\u503c\uff1a$d_1 = n / 2, d_2 = d_1 / 2\u2026\u2026$ \u7b97\u6cd5\u6b65\u9aa4 \u8bb0\u5f55\u5f85\u6392\u5e8f\u5217 r[1\u2026\u2026n] \uff0c\u589e\u91cf\u5e8f\u5217 d[1\u2026\u2026n] \u4f9d\u6b21\u6309\u7167\u6240\u53d6\u5f97\u589e\u91cf\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u6700\u597d\u60c5\u51b5\uff1a$O(n\\log{n})$ \u6700\u574f\u60c5\u51b5\uff1a$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$ \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\u6392\u5e8f\uff08\u5206\u7ec4\u4e2d\u6392\u5e8f\u53ef\u80fd\u5bfc\u81f4\u8be5\u4e0d\u7a33\u5b9a\u6027\uff09","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_1","text":"\u57fa\u672c\u601d\u60f3\uff1a\u5c06\u5e26\u6392\u5e8f\u8868\u770b\u4f5c\u5de6\u53f3\u4e24\u4e2a\u90e8\u5206\uff0c\u5de6\u8fb9\u4e3a\u6709\u5e8f\u533a\uff0c\u53f3\u8fb9\u4e3a\u65e0\u5e8f\u533a\uff0c\u6392\u5e8f\u7684\u8fc7\u7a0b\u5373\u5c06\u53f3\u8fb9\u65e0\u5e8f\u533a\u4e2d\u7684\u5143\u7d20\u9010\u4e2a\u63d2\u5165\u5230\u5de6\u8fb9\u7684\u6709\u5e8f\u533a\uff0c\u6784\u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u533a","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_2","text":"","title":"\u76f4\u63a5\u63d2\u5165\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_3","text":"\u8bbe\u5f85\u6392\u5e8f\u7684\u8bb0\u5f55\u5b58\u50a8\u5728\u6570\u7ec4 r[1\u2026\u2026n] \u4e2d\uff0c\u5c06\u7b2c\u4e00\u4e2a\u8bb0\u5f55 r[1] \u89c6\u4f5c\u5de6\u8fb9\u7684\u6709\u5e8f\u5e8f\u5217\uff0c r[2\u2026\u2026n] \u89c6\u4f5c\u53f3\u8fb9\u7684\u65e0\u5e8f\u5e8f\u5217 \u4f9d\u6b21\u5c06\u53f3\u8fb9\u7684\u65e0\u5e8f\u5e8f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5230\u6709\u5e8f\u5e8f\u5217\u4e2d","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_4","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u6700\u597d\u60c5\u51b5\uff1a\u672c\u8eab\u6709\u5e8f->$O(n)$ \u6700\u574f\u60c5\u51b5\uff1a\u672c\u8eab\u9006\u5e8f->$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$ \u7a33\u5b9a\u6027\uff1a\u7a33\u5b9a\u6392\u5e8f \u6700\u540e\u4e00\u8d9f\u6392\u5e8f\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u6240\u6709\u7684\u5143\u7d20\u90fd\u4e0d\u5728\u5176\u6700\u7ec8\u4f4d\u7f6e\u4e0a\u7684\u60c5\u51b5","title":"\u590d\u6742\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_5","text":"\u57fa\u672c\u601d\u60f3\uff1a\u5c06\u5f85\u6392\u5e8f\u5217\u5206\u4e3a\u82e5\u5e72\u7ec4\uff0c\u5728\u6bcf\u7ec4\u5185\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f\uff0c\u4f7f\u5f97\u6574\u4e2a\u5e8f\u5217\u57fa\u672c\u6709\u5e8f\uff0c\u7136\u540e\u518d\u5bf9\u6574\u4e2a\u5e8f\u5217\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u5206\u7ec4\u7684\u65b9\u5f0f\uff1a\u95f4\u9694\u65b9\u6cd5\u5206\u7ec4 \u8bbe\u7f6e\u6b65\u957f$d$\uff0c\u4e0b\u6807\u76f8\u5dee$d$\u7684\u4e3a\u4e00\u7ec4 \u53d6\u503c\uff1a$d_1 = n / 2, d_2 = d_1 / 2\u2026\u2026$","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_6","text":"\u8bb0\u5f55\u5f85\u6392\u5e8f\u5217 r[1\u2026\u2026n] \uff0c\u589e\u91cf\u5e8f\u5217 d[1\u2026\u2026n] \u4f9d\u6b21\u6309\u7167\u6240\u53d6\u5f97\u589e\u91cf\u5bf9\u6bcf\u4e00\u7ec4\u8fdb\u884c\u76f4\u63a5\u63d2\u5165\u6392\u5e8f","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \u6700\u597d\u60c5\u51b5\uff1a$O(n\\log{n})$ \u6700\u574f\u60c5\u51b5\uff1a$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$ \u7a33\u5b9a\u6027\uff1a\u4e0d\u7a33\u5b9a\u6392\u5e8f\uff08\u5206\u7ec4\u4e2d\u6392\u5e8f\u53ef\u80fd\u5bfc\u81f4\u8be5\u4e0d\u7a33\u5b9a\u6027\uff09","title":"\u590d\u6742\u5ea6"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/","text":"\u4e8c\u53c9\u6811 \u5b9a\u4e49 \u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u9897\u5b50\u6811 \u5b50\u6811\u5b58\u5728\u5de6\u53f3\u4e4b\u5206\uff0c\u6b21\u5e8f\u4e0d\u80fd\u4efb\u610f\u98a0\u5012 \u6027\u8d28 \u5728\u4e8c\u53c9\u6811\u7684\u7b2c$i$\u5c42\u4e0a\u81f3\u591a\u6709$2^{i-1}$\u4e2a\u8282\u70b9 \u6df1\u5ea6\u4e3a$k$\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709$2^k-1$\u4e2a\u8282\u70b9($k>=1$) \u5bf9\u4efb\u4f55\u4e00\u68f5\u4e8c\u53c9\u6811T\uff0c\u5982\u679c\u5176\u7ec8\u7aef\u7ed3\u70b9\u6811\u4e3a$n_0$\uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u4e3a$n_2$\uff0c\u5219$n_0=n_2+1$ \u6ee1\u4e8c\u53c9\u6811 \uff1a\u6df1\u5ea6\u4e3a$k$\u4e14\u6709$2^k-1$\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5373\u6bcf\u5c42\u90fd\u6709\u6700\u5927\u8282\u70b9\u6570 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a\u9664\u6700\u540e\u4e00\u5c42\u5916\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684 \u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u82e5\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u7f16\u53f7\uff0c\u5219\u7f16\u53f7\u4e3ai\u7684\u7ed3\u70b9\uff0c\u5de6\u5b69\u5b50\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$2i$\uff0c\u53f3\u5b69\u5b50\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$2i+1$\uff0c\u53cc\u4eb2\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$i/2$\uff0c\u8fd9\u6837\u7684 \u7279\u70b9\u65b9\u4fbf\u4e86\u540e\u7eed\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u4e8c\u53c9\u6811 \u4e00\u4e2a\u5177\u6709$n$\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811,\u5176\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570$n_0$\u4e3a:$\\lceil \\frac{n}{2} \\rceil$ \uff0c\u6216\u8005$\\lfloor \\frac{n+1}{2} \\rfloor$ \u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 - \u975e\u5e38\u9002\u7528\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b58\u50a8 - \u5bf9\u4e8e\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u4f4d\u7f6e\u4e0a\u88650\uff0c\u6216\u5176\u4ed6\u6807\u5fd7\uff0c\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u6ca1\u6709\u5b69\u5b50 \uff08\u6d6a\u8d39\u7a7a\u95f4\uff09 \u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 \u4f7f\u7528\u4e8c\u53c9\u94fe\u8868\u5b58\u50a8 struct BiNode{ char data; //\u6570\u636e\u57df BiNode *lchild,*rchild; //\u5de6\u53f3\u5b69\u5b50 }; \u4f7f\u7528\u4e09\u53c9\u94fe\u8868\u5b58\u50a8 \u4e8c\u53c9\u6811\u7684\u521b\u5efa \u4e8c\u53c9\u6811\u7684\u5404\u79cd\u521b\u5efa\u65b9\u6cd5_\u73b2max\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u4e8c\u53c9\u6811\u7684\u521b\u5efa 1. \u8865\u7a7a\u6cd5 1. \u5229\u7528\u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u8fdb\u884c\u521b\u5efa 2. \u6570\u636e\u901a\u8fc7\u547d\u4ee4\u884c\u8f93\u5165 3. \u7a7a\u7ed3\u70b9\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u8868\u793a \u6ce8\u610f\uff1a\u7531\u4e8e\u4f7f\u7528\u7684\u65f6\u5148\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5230\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\uff08\u4ee3\u8868\u7a7a\uff09\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u6570\u91cf\u4e3a\u4e8c\u53c9\u6811\u7684\u5c42\u6570\uff0c\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8981\u9002\u91cf\uff0c\u5426\u5219\u6570\u91cf\u8fc7\u591a\u7684\u8bdd\uff0c\u4e8c\u53c9\u6811\u7684\u5c42\u6570\u8fc7\u591a\uff0c\u53ef\u80fd\u8ba9\u7ed3\u70b9\u6570\u91cf\u8fc7\u591a\uff0c\u4ea7\u751f\u7a0b\u5e8f\u9519\u8bef\u7684\u9519\u89c9 2. \u4ee3\u7801\u5b9e\u73b0\uff1a void CreateBiTree(BiNode* &p){ char x; cin >> x; if(x == '#') p = NULL; //\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\u65f6\u4e3a\u7a7a else{ p = new BiNode; p->data = x; CreateBiTree(p->lchild); //\u8fdb\u884c\u5de6\u5b69\u5b50\u7684\u521b\u5efa CreateBiTree(p->rchild); //\u8fdb\u884c\u53f3\u5b69\u5b50\u7684\u521b\u5efa } } \u4e8c\u53c9\u6811\u7684\u904d\u5386 \u4f7f\u7528 \u9012\u5f52 \u5b9e\u73b0\u5bf9\u4e8c\u53c9\u6811\u7684\u904d\u5386 \u5b9e\u9645\u4e0a\u65f6\u5c06\u4e00\u4e2a \u975e\u7ebf\u6027\u7ed3\u6784\u8fdb\u884c\u7ebf\u6027\u5316 \u7684\u64cd\u4f5c \u5148\u5e8f\u904d\u5386 \u6b65\u9aa4 \u8bbf\u95ee\u6839\u8282\u70b9 \u5148\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u5148\u5e8f\u904d\u5386\u53f3\u5b50\u6811 - \u4ee3\u7801\u5b9e\u73b0\uff1a void PreOrderTravellser(BiNode* &p){ if(p == NULL) return; cout << p -> data << endl; PreOrderTravellser(p->lchild); PreOrderTravellser(p->rchild); } \u4e2d\u5e8f\u904d\u5386 \u6b65\u9aa4 \u4e2d\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u8bbf\u95ee\u6839\u8282\u70b9 \u4e2d\u5e8f\u904d\u5386\u53f3\u5b50\u6811 - \u4ee3\u7801\u5b9e\u73b0\uff1a void InOrderTravellser(BiNode* &p){ if(p == NULL) return; InOrderTravellser(p->lchild); cout << p->data << endl; InOrderTravellser(p->rchild); } \u540e\u5e8f\u904d\u5386 \u6b65\u9aa4 \u540e\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u540e\u5e8f\u904d\u5386\u53f3\u5b50\u6811 \u8bbf\u95ee\u6839\u8282\u70b9 - \u4ee3\u7801\u5b9e\u73b0\uff1a void PostOrderTravellser(BiNode* &p){ if(p == NULL) return; PostOrderTravellser(p->lchild); PostOrderTravellser(p->rchild); cout << p->data << endl; } \u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u904d\u5386\u4e4b\u95f4\u7684\u533a\u522b\u4ec5\u4ec5\u662f\u5148\u8f93\u51fa\u3001\u9012\u5f52\u5de6\u5b69\u5b50\u3001\u9012\u5f52\u53f3\u5b69\u5b50\u7684\u987a\u5e8f\u4e4b\u95f4\u7684\u533a\u522b \u5c42\u6b21\u904d\u5386 \u9010\u5c42\u5f80\u4e0b\u904d\u5386 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u5f15\u5165\uff1a \u4e8c\u53c9\u6811\u91c7\u7528\u4e8c\u53c9\u94fe\u8868\u5b58\u50a8\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u5982\u679c\u4e8c\u53c9\u94fe\u8868\u6709$n$\u4e2a\u8282\u70b9\uff0c\u5219\u4e00\u5171\u6709$2n$\u4e2a\u6307\u9488\u57df\uff0c\u800c\u53ea\u6709$n-1$\u4e2a\u662f\u5b9e\u6307\u9488\uff0c\u5176\u4f59$n+1$\u4e2a\u90fd\u662f\u7a7a\u6307\u9488\uff0c\u4e3a\u4e86\u5145\u5206\u5229\u7528\u7a7a\u6307\u9488\uff0c\u6211\u4eec\u4f7f\u7528\u7a7a\u6307\u9488\u8bb0\u5f55\u8282\u70b9\u7684\u524d\u9a71\u6216\u540e\u7ee7\u7684\u4fe1\u606f - \u524d\u9a71\u4e0e\u540e\u7ee7\uff1a\u6307\u4ee5\u7279\u5b9a\u7684\u65b9\u5f0f\u904d\u5386\u65f6\uff0c\u7ebf\u6027\u5316\u4e4b\u540e\u7684\u524d\u9a71\u548c\u540e\u7ee7 \u65b9\u6cd5\uff1a \u5982\u679c\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u5219 lchild \u6307\u5411\u5de6\u5b69\u5b50\uff0c\u5426\u5219 lchild \u6307\u5411\u5176\u524d\u9a71\uff0c\u53f3\u5b69\u5b50\u540c\u7406\uff0c\u540c\u65f6\uff0c\u518d\u4f7f\u7528\u4e00\u4e2a \u6807\u5fd7\u57df \uff0c\u533a\u5206\u6307\u5411\u7684\u662f\u5b69\u5b50\u8fd8\u662f\u524d\u9a71/\u540e\u7ee7\uff0c\u8282\u70b9\u5982\u4e0b\u56fe\uff1a \u6982\u5ff5 \u7ebf\u7d22\u94fe\u8868\uff1a\u5e26\u6709\u6807\u5fd7\u57df\u7684\u4e8c\u53c9\u94fe\u8868 \u7ebf\u7d22\uff1a\u6307\u5411\u524d\u9a71\u548c\u540e\u7ee7\u7684 \u6307\u9488 \u7ebf\u7d22\u4e8c\u53c9\u6811\uff1a\u5e26\u6709\u7ebf\u7d22\u7684\u4e8c\u53c9\u6811 \u7ebf\u7d22\u5316\uff1a \u4ee5\u67d0\u79cd\u904d\u5386\u65b9\u5f0f \u5c06\u4e8c\u53c9\u6811\u8f6c\u5316\u4e3a\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u8fc7\u7a0b \u6784\u9020\u7ebf\u7d22\u4e8c\u53c9\u6811 \u4e8c\u53c9\u6811\u7ebf\u7d22\u5316\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5b9e\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u4fee\u6539\u7a7a\u6307\u9488\u7684\u8fc7\u7a0b \u5982\u679c\u5f53\u524d\u8282\u70b9 p \u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5219\u8be5\u8282\u70b9\u7684 lchild \u6307\u5411\u5176\u524d\u9a71\uff0c\u5373 p->lchild=pre \u5982\u679c pre \u8282\u70b9\u7684\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5219\u8be5\u8282\u70b9\u7684 rchild \u6307\u5411\u5176\u540e\u7ee7\uff0c\u5373 pre->rchild=p \u904d\u5386\u7ebf\u7d22\u4e8c\u53c9\u6811 \u5229\u7528\u524d\u9a71\u548c\u540e\u7ee7\u7684\u4fe1\u606f\u8fdb\u884c\u904d\u5386 \u5bf9\u4e8e\u9891\u7e41\u7684\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\u7684\u8fd0\u7b97\uff0c\u7ebf\u7d22\u4e8c\u53c9\u6811\u4f18\u4e8e\u666e\u901a\u4e8c\u53c9\u6811 \u5bf9\u4e8e\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u7ebf\u7d22\u4e8c\u53c9\u6811\u6bd4\u666e\u901a\u4e8c\u53c9\u6811\u5f00\u9500\u5927\uff08\u9664\u4e86\u63d2\u5165\u548c\u5220\u9664\u5916\uff0c\u8fd8\u9700\u8981\u4fee\u6539\u76f8\u5e94\u7684\u7ebf\u7d22\uff09 \u5e94\u7528 [[\u6811\u8868\u67e5\u627e#\u4e8c\u53c9\u67e5\u627e\u6811|\u4e8c\u53c9\u67e5\u627e\u6811]]","title":"\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_1","text":"","title":"\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","text":"\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u53ea\u6709\u4e24\u9897\u5b50\u6811 \u5b50\u6811\u5b58\u5728\u5de6\u53f3\u4e4b\u5206\uff0c\u6b21\u5e8f\u4e0d\u80fd\u4efb\u610f\u98a0\u5012","title":"\u5b9a\u4e49"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_3","text":"\u5728\u4e8c\u53c9\u6811\u7684\u7b2c$i$\u5c42\u4e0a\u81f3\u591a\u6709$2^{i-1}$\u4e2a\u8282\u70b9 \u6df1\u5ea6\u4e3a$k$\u7684\u4e8c\u53c9\u6811\u81f3\u591a\u6709$2^k-1$\u4e2a\u8282\u70b9($k>=1$) \u5bf9\u4efb\u4f55\u4e00\u68f5\u4e8c\u53c9\u6811T\uff0c\u5982\u679c\u5176\u7ec8\u7aef\u7ed3\u70b9\u6811\u4e3a$n_0$\uff0c\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u6570\u4e3a$n_2$\uff0c\u5219$n_0=n_2+1$ \u6ee1\u4e8c\u53c9\u6811 \uff1a\u6df1\u5ea6\u4e3a$k$\u4e14\u6709$2^k-1$\u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5373\u6bcf\u5c42\u90fd\u6709\u6700\u5927\u8282\u70b9\u6570 \u5b8c\u5168\u4e8c\u53c9\u6811 \uff1a\u9664\u6700\u540e\u4e00\u5c42\u5916\uff0c\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684 \u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u82e5\u4ece\u4e0a\u81f3\u4e0b\uff0c\u4ece\u5de6\u81f3\u53f3\u7f16\u53f7\uff0c\u5219\u7f16\u53f7\u4e3ai\u7684\u7ed3\u70b9\uff0c\u5de6\u5b69\u5b50\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$2i$\uff0c\u53f3\u5b69\u5b50\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$2i+1$\uff0c\u53cc\u4eb2\u7684\u7f16\u53f7\u4e00\u5b9a\u4e3a$i/2$\uff0c\u8fd9\u6837\u7684 \u7279\u70b9\u65b9\u4fbf\u4e86\u540e\u7eed\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4\u5b58\u50a8\u4e8c\u53c9\u6811 \u4e00\u4e2a\u5177\u6709$n$\u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811,\u5176\u53f6\u5b50\u8282\u70b9\u7684\u4e2a\u6570$n_0$\u4e3a:$\\lceil \\frac{n}{2} \\rceil$ \uff0c\u6216\u8005$\\lfloor \\frac{n+1}{2} \\rfloor$","title":"\u6027\u8d28"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_4","text":"","title":"\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_5","text":"- \u975e\u5e38\u9002\u7528\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b58\u50a8 - \u5bf9\u4e8e\u666e\u901a\u4e8c\u53c9\u6811\u7684\u5b58\u50a8\uff0c\u53ef\u4ee5\u5728\u5176\u4ed6\u4f4d\u7f6e\u4e0a\u88650\uff0c\u6216\u5176\u4ed6\u6807\u5fd7\uff0c\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u6ca1\u6709\u5b69\u5b50 \uff08\u6d6a\u8d39\u7a7a\u95f4\uff09","title":"\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_6","text":"\u4f7f\u7528\u4e8c\u53c9\u94fe\u8868\u5b58\u50a8 struct BiNode{ char data; //\u6570\u636e\u57df BiNode *lchild,*rchild; //\u5de6\u53f3\u5b69\u5b50 }; \u4f7f\u7528\u4e09\u53c9\u94fe\u8868\u5b58\u50a8","title":"\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_7","text":"\u4e8c\u53c9\u6811\u7684\u5404\u79cd\u521b\u5efa\u65b9\u6cd5_\u73b2max\u7684\u535a\u5ba2-CSDN\u535a\u5ba2_\u4e8c\u53c9\u6811\u7684\u521b\u5efa 1. \u8865\u7a7a\u6cd5 1. \u5229\u7528\u5148\u5e8f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u8fdb\u884c\u521b\u5efa 2. \u6570\u636e\u901a\u8fc7\u547d\u4ee4\u884c\u8f93\u5165 3. \u7a7a\u7ed3\u70b9\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u8868\u793a \u6ce8\u610f\uff1a\u7531\u4e8e\u4f7f\u7528\u7684\u65f6\u5148\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5230\u7b2c\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\uff08\u4ee3\u8868\u7a7a\uff09\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u7684\u6570\u91cf\u4e3a\u4e8c\u53c9\u6811\u7684\u5c42\u6570\uff0c\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8981\u9002\u91cf\uff0c\u5426\u5219\u6570\u91cf\u8fc7\u591a\u7684\u8bdd\uff0c\u4e8c\u53c9\u6811\u7684\u5c42\u6570\u8fc7\u591a\uff0c\u53ef\u80fd\u8ba9\u7ed3\u70b9\u6570\u91cf\u8fc7\u591a\uff0c\u4ea7\u751f\u7a0b\u5e8f\u9519\u8bef\u7684\u9519\u89c9 2. \u4ee3\u7801\u5b9e\u73b0\uff1a void CreateBiTree(BiNode* &p){ char x; cin >> x; if(x == '#') p = NULL; //\u8f93\u5165\u7279\u6b8a\u5b57\u7b26\u65f6\u4e3a\u7a7a else{ p = new BiNode; p->data = x; CreateBiTree(p->lchild); //\u8fdb\u884c\u5de6\u5b69\u5b50\u7684\u521b\u5efa CreateBiTree(p->rchild); //\u8fdb\u884c\u53f3\u5b69\u5b50\u7684\u521b\u5efa } }","title":"\u4e8c\u53c9\u6811\u7684\u521b\u5efa"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_8","text":"\u4f7f\u7528 \u9012\u5f52 \u5b9e\u73b0\u5bf9\u4e8c\u53c9\u6811\u7684\u904d\u5386 \u5b9e\u9645\u4e0a\u65f6\u5c06\u4e00\u4e2a \u975e\u7ebf\u6027\u7ed3\u6784\u8fdb\u884c\u7ebf\u6027\u5316 \u7684\u64cd\u4f5c","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_9","text":"\u6b65\u9aa4 \u8bbf\u95ee\u6839\u8282\u70b9 \u5148\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u5148\u5e8f\u904d\u5386\u53f3\u5b50\u6811 - \u4ee3\u7801\u5b9e\u73b0\uff1a void PreOrderTravellser(BiNode* &p){ if(p == NULL) return; cout << p -> data << endl; PreOrderTravellser(p->lchild); PreOrderTravellser(p->rchild); }","title":"\u5148\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_10","text":"\u6b65\u9aa4 \u4e2d\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u8bbf\u95ee\u6839\u8282\u70b9 \u4e2d\u5e8f\u904d\u5386\u53f3\u5b50\u6811 - \u4ee3\u7801\u5b9e\u73b0\uff1a void InOrderTravellser(BiNode* &p){ if(p == NULL) return; InOrderTravellser(p->lchild); cout << p->data << endl; InOrderTravellser(p->rchild); }","title":"\u4e2d\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_11","text":"\u6b65\u9aa4 \u540e\u5e8f\u904d\u5386\u5de6\u5b50\u6811 \u540e\u5e8f\u904d\u5386\u53f3\u5b50\u6811 \u8bbf\u95ee\u6839\u8282\u70b9 - \u4ee3\u7801\u5b9e\u73b0\uff1a void PostOrderTravellser(BiNode* &p){ if(p == NULL) return; PostOrderTravellser(p->lchild); PostOrderTravellser(p->rchild); cout << p->data << endl; } \u5148\u5e8f\u3001\u4e2d\u5e8f\u3001\u540e\u5e8f\u904d\u5386\u4e4b\u95f4\u7684\u533a\u522b\u4ec5\u4ec5\u662f\u5148\u8f93\u51fa\u3001\u9012\u5f52\u5de6\u5b69\u5b50\u3001\u9012\u5f52\u53f3\u5b69\u5b50\u7684\u987a\u5e8f\u4e4b\u95f4\u7684\u533a\u522b","title":"\u540e\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_12","text":"\u9010\u5c42\u5f80\u4e0b\u904d\u5386","title":"\u5c42\u6b21\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_13","text":"","title":"\u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_14","text":"\u4e8c\u53c9\u6811\u91c7\u7528\u4e8c\u53c9\u94fe\u8868\u5b58\u50a8\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6307\u9488\u57df\uff0c\u5982\u679c\u4e8c\u53c9\u94fe\u8868\u6709$n$\u4e2a\u8282\u70b9\uff0c\u5219\u4e00\u5171\u6709$2n$\u4e2a\u6307\u9488\u57df\uff0c\u800c\u53ea\u6709$n-1$\u4e2a\u662f\u5b9e\u6307\u9488\uff0c\u5176\u4f59$n+1$\u4e2a\u90fd\u662f\u7a7a\u6307\u9488\uff0c\u4e3a\u4e86\u5145\u5206\u5229\u7528\u7a7a\u6307\u9488\uff0c\u6211\u4eec\u4f7f\u7528\u7a7a\u6307\u9488\u8bb0\u5f55\u8282\u70b9\u7684\u524d\u9a71\u6216\u540e\u7ee7\u7684\u4fe1\u606f - \u524d\u9a71\u4e0e\u540e\u7ee7\uff1a\u6307\u4ee5\u7279\u5b9a\u7684\u65b9\u5f0f\u904d\u5386\u65f6\uff0c\u7ebf\u6027\u5316\u4e4b\u540e\u7684\u524d\u9a71\u548c\u540e\u7ee7","title":"\u5f15\u5165\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_15","text":"\u5982\u679c\u8282\u70b9\u6709\u5de6\u5b69\u5b50\uff0c\u5219 lchild \u6307\u5411\u5de6\u5b69\u5b50\uff0c\u5426\u5219 lchild \u6307\u5411\u5176\u524d\u9a71\uff0c\u53f3\u5b69\u5b50\u540c\u7406\uff0c\u540c\u65f6\uff0c\u518d\u4f7f\u7528\u4e00\u4e2a \u6807\u5fd7\u57df \uff0c\u533a\u5206\u6307\u5411\u7684\u662f\u5b69\u5b50\u8fd8\u662f\u524d\u9a71/\u540e\u7ee7\uff0c\u8282\u70b9\u5982\u4e0b\u56fe\uff1a","title":"\u65b9\u6cd5\uff1a"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_16","text":"\u7ebf\u7d22\u94fe\u8868\uff1a\u5e26\u6709\u6807\u5fd7\u57df\u7684\u4e8c\u53c9\u94fe\u8868 \u7ebf\u7d22\uff1a\u6307\u5411\u524d\u9a71\u548c\u540e\u7ee7\u7684 \u6307\u9488 \u7ebf\u7d22\u4e8c\u53c9\u6811\uff1a\u5e26\u6709\u7ebf\u7d22\u7684\u4e8c\u53c9\u6811 \u7ebf\u7d22\u5316\uff1a \u4ee5\u67d0\u79cd\u904d\u5386\u65b9\u5f0f \u5c06\u4e8c\u53c9\u6811\u8f6c\u5316\u4e3a\u7ebf\u7d22\u4e8c\u53c9\u6811\u7684\u8fc7\u7a0b","title":"\u6982\u5ff5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_17","text":"\u4e8c\u53c9\u6811\u7ebf\u7d22\u5316\u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5b9e\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\u4fee\u6539\u7a7a\u6307\u9488\u7684\u8fc7\u7a0b \u5982\u679c\u5f53\u524d\u8282\u70b9 p \u7684\u5de6\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5219\u8be5\u8282\u70b9\u7684 lchild \u6307\u5411\u5176\u524d\u9a71\uff0c\u5373 p->lchild=pre \u5982\u679c pre \u8282\u70b9\u7684\u53f3\u5b69\u5b50\u4e3a\u7a7a\uff0c\u5219\u8be5\u8282\u70b9\u7684 rchild \u6307\u5411\u5176\u540e\u7ee7\uff0c\u5373 pre->rchild=p","title":"\u6784\u9020\u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_18","text":"\u5229\u7528\u524d\u9a71\u548c\u540e\u7ee7\u7684\u4fe1\u606f\u8fdb\u884c\u904d\u5386 \u5bf9\u4e8e\u9891\u7e41\u7684\u67e5\u627e\u524d\u9a71\u548c\u540e\u7ee7\u7684\u8fd0\u7b97\uff0c\u7ebf\u7d22\u4e8c\u53c9\u6811\u4f18\u4e8e\u666e\u901a\u4e8c\u53c9\u6811 \u5bf9\u4e8e\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\uff0c\u7ebf\u7d22\u4e8c\u53c9\u6811\u6bd4\u666e\u901a\u4e8c\u53c9\u6811\u5f00\u9500\u5927\uff08\u9664\u4e86\u63d2\u5165\u548c\u5220\u9664\u5916\uff0c\u8fd8\u9700\u8981\u4fee\u6539\u76f8\u5e94\u7684\u7ebf\u7d22\uff09","title":"\u904d\u5386\u7ebf\u7d22\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91/#_19","text":"[[\u6811\u8868\u67e5\u627e#\u4e8c\u53c9\u67e5\u627e\u6811|\u4e8c\u53c9\u67e5\u627e\u6811]]","title":"\u5e94\u7528"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/","text":"\u6811 \u5b9a\u4e49\u7ed3\u70b9 \u5b9a\u4e49\uff1an\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408 \u975e\u7a7a\u6811\u7684\u4e24\u4e2a\u6761\u4ef6 \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6210\u4e3a\u6839\u7684\u8282\u70b9 \u9664\u6839\u8282\u70b9\u5916\uff0c\u5176\u4f59\u8282\u70b9\u53ef\u4ee5\u5206\u4e3am(m \u2265 0)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6 \u51e0\u4e2a\u672f\u8bed \u8282\u70b9 \u8282\u70b9\u7684\u5ea6 \uff1a\u8282\u70b9\u62e5\u6709\u7684\u5b50\u6811\u4e2a\u6570 \u6811\u7684\u5ea6\uff1a\u6811\u4e2d\u8282\u70b9\u7684\u6700\u5927\u5ea6\u6570 \u7ec8\u7aef\u8282\u70b9\uff1a\u5ea6\u4e3a0\u7684\u8282\u70b9\uff0c\u53c8\u79f0\u4e3a \u53f6\u5b50 \u5206\u652f\u8282\u70b9\uff1a\u5ea6\u5927\u4e8e0\u7684\u8282\u70b9\uff0c\u9664\u4e86\u53f6\u5b50\u90fd\u662f\u5206\u652f\u8282\u70b9 \u5185\u90e8\u8282\u70b9\uff1a\u9664\u4e86\u6811\u6839\u548c\u53f6\u5b50\u90fd\u662f\u5185\u90e8\u8282\u70b9 \u8282\u70b9\u7684\u5c42\u6b21\uff1a\u4ece\u6839\u5230\u8282\u70b9\u7684\u5c42\u6570\uff08\u6839\u8282\u70b9\u4e3a\u7b2c1\u5c42\uff09 \u6811\u7684\u6df1\u5ea6\uff1a\u6700\u5927\u5c42\u6570 \u8def\u5f84 \uff1a\u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5e8f\u5217 \u8def\u5f84\u957f\u5ea6\uff1a\u4e24\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8fb9\u6570 \u53cc\u4eb2\u3001\u5b69\u5b50\uff1a\u8282\u70b9\u7684\u5b50\u6811\u7684\u6839 \u5144\u5f1f\uff1a\u53cc\u4eb2\u76f8\u540c\u7684\u8282\u70b9 \u5802\u5144\u5f1f\uff1a\u53cc\u4eb2\u662f\u5144\u5f1f\u7684\u8282\u70b9 \u7956\u5148\uff1a\u4ece\u8be5\u8282\u70b9\u5230\u6811\u6839\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9 \u5b50\u5b59\uff1a\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9 \u6709\u5e8f\u6811\uff1a\u8282\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u6709\u5e8f\uff0c\u4e0d\u80fd\u4e92\u6362\u4f4d\u7f6e \u65e0\u5e8f\u6811\uff1a\u8282\u70b9\u54e5\u5b50\u6811\u53ef\u4ee5\u4e92\u6362\u4f4d\u7f6e \u68ee\u6797\uff1am(m \u2265 0)\u9897\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u96c6\u5408 \u6811\u7684\u5b58\u50a8\u7ed3\u6784 \u987a\u5e8f\u5b58\u50a8 \u53cc\u4eb2\u8868\u793a\u6cd5 \u65e0\u6cd5\u7684\u5230\u8be5\u8282\u70b9\u7684\u5b69\u5b50 \u5b69\u5b50\u8868\u793a\u6cd5 \u65e0\u6cd5\u76f4\u63a5\u5f97\u5230\u8be5\u8282\u70b9\u7684\u53cc\u4eb2 \u53ea\u80fd\u6309\u7167\u6570\u7684\u6700\u5927\u5ea6\u5206\u914d\u5b69\u5b50\u7a7a\u95f4\uff0c\u53ef\u80fd\u5bfc\u81f4\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4 \u53cc\u4eb2\u5b69\u5b50\u8868\u793a\u6cd5 \u53ef\u4ee5\u5f97\u5230\u5b69\u5b50\u548c\u53cc\u4eb2 \u540c\u5b69\u5b50\u8868\u793a\u6cd5\uff0c\u53ef\u80fd\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4 \u94fe\u5f0f\u5b58\u50a8 \u5b69\u5b50\u94fe\u8868\u8868\u793a\u6cd5 \u7c7b\u4f3c\u4e8e\u90bb\u63a5\u8868\uff1adata\u5b58\u50a8\u6570\u636e\u5143\u7d20\uff0cfirst\u4e3a\u6307\u5411\u7b2c\u4e00\u4e2a\u5b69\u5b50\u7684\u6307\u9488 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5 \u8282\u70b9\u9664\u4e86\u5b58\u50a8\u6570\u636e\u5143\u7d20\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u6307\u9488\u57df lchild \u548c rchild \uff0c\u88ab\u79f0\u4e3a \u4e8c\u53c9\u94fe\u8868 \uff0c lchild \u5b58\u50a8 \u7b2c\u4e00\u4e2a\u5b69\u5b50\u7684\u5730\u5740 \uff0c rchild \u5b58\u50a8 \u53f3\u5144\u5f1f\u5730\u5740 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u79d8\u8bc0\uff1a \u957f\u5b50\u5f53\u4f5c\u5de6\u5b69\u5b50\uff0c\u5144\u5f1f\u5173\u7cfb\u5411\u53f3\u659c \u6811\u3001\u68ee\u6797\u4e0e[[\u4e8c\u53c9\u6811]]\u7684\u8f6c\u6362 \u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811 \u4f7f\u7528\u5144\u5f1f\u5b69\u5b50\u8868\u793a\u6cd5\uff0c\u5c06\u666e\u901a\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811 \u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u6811 \u9006\u4f5c\u7528\u5373\u53ef\u5b9e\u73b0 \u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362 \u68ee\u6797\u662f\u7531$m$\u68f5\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u96c6\u5408 \u628a\u68ee\u6797\u91cc\u7684\u6bcf\u4e00\u68f5\u6811\u7684 \u6811\u6839\u770b\u4f5c\u5144\u5f1f\u5173\u7cfb \uff0c\u5176\u4ed6\u8f6c\u6362\u4e0e\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u4e00\u81f4 \u6811\u548c\u68ee\u6797\u7684\u904d\u5386 \u6811\u7684\u904d\u5386 \u9012\u5f52 \u5148\u6839\u904d\u5386 \u5148\u8bbf\u95ee\u6839\uff0c\u7136\u540e\u6309\u4ece\u5de6\u5411\u53f3\u7684\u987a\u5e8f\uff0c\u5148\u6839\u904d\u5386\u8282\u70b9\u7684\u6bcf\u4e00\u523b\u5b50\u6811\uff0c\u7b2c\u4e00\u9897\u5b50\u6811\u904d\u5386\u5b8c\u6bd5\u624d\u53ef\u4ee5\u904d\u5386\u7b2c\u4e8c\u9897\u5b50\u6811 \u4e0e[[\u4e8c\u53c9\u6811#\u5148\u5e8f\u904d\u5386|\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386]]\u4e00\u81f4 \u540e\u6839\u904d\u5386 \u5148\u6309\u7167\u4ece\u5de6\u5411\u53f3\u7684\u987a\u5e8f\u540e\u8ddf\u904d\u5386\u6bcf\u4e00\u523b\u5b50\u6811\uff0c\u6ca1\u6709\u5b50\u6811\u6216\u5b50\u6811\u5df2\u904d\u5386\u5b8c\u6bd5\uff0c\u624d\u53ef\u4ee5\u8bbf\u95ee\u6839 \u4e0e[[\u4e8c\u53c9\u6811#\u4e2d\u5e8f\u904d\u5386|\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386]]\u4e00\u81f4 \u68ee\u6797\u7684\u904d\u5386 \u5148\u5e8f\u904d\u5386 \u5982\u679c\u68ee\u6797\u975e\u7a7a\uff1a - \u8bbf\u95ee \u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9 - \u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u7684\u5b50\u6811\u68ee\u6797 - \u5148\u5e8f\u904d\u5386\u9664\u7b2c\u4e00\u68f5\u6811\u5916\uff0c\u5269\u4f59\u7684\u6811\u6784\u6210\u7684\u68ee\u6797 \u8bbf\u95ee\u987a\u5e8f\u4e0e\u8be5\u68ee\u6797 \u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386 \u987a\u5e8f\u4e00\u81f4 \u4e2d\u5e8f\u904d\u5386 \u5982\u679c\u68ee\u6797\u975e\u7a7a\uff1a - \u4e2d\u5e8f\u904d\u5386 \u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u7684\u5b50\u6811\u68ee\u6797 - \u8bbf\u95ee\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9 - \u4e2d\u5e8f\u904d\u5386\u9664\u7b2c\u4e00\u68f5\u6811\u4e4b\u5916\uff0c\u5269\u4f59\u7684\u6811\u6784\u6210\u7684\u68ee\u6797 \u8bbf\u95ee\u987a\u5e8f\u4e0e\u8be5\u68ee\u6797 \u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u987a\u5e8f\u76f8\u540c \u6811\u7684\u5e94\u7528 [[Huffman]] [[\u6811\u8868\u67e5\u627e#\u4e8c\u53c9\u67e5\u627e\u6811|\u4e8c\u53c9\u67e5\u627e\u6811]]","title":"\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_1","text":"","title":"\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_2","text":"\u5b9a\u4e49\uff1an\u4e2a\u7ed3\u70b9\u7684\u6709\u9650\u96c6\u5408 \u975e\u7a7a\u6811\u7684\u4e24\u4e2a\u6761\u4ef6 \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u6210\u4e3a\u6839\u7684\u8282\u70b9 \u9664\u6839\u8282\u70b9\u5916\uff0c\u5176\u4f59\u8282\u70b9\u53ef\u4ee5\u5206\u4e3am(m \u2265 0)\u4e2a\u4e92\u4e0d\u76f8\u4ea4\u7684\u6709\u9650\u96c6 \u51e0\u4e2a\u672f\u8bed \u8282\u70b9 \u8282\u70b9\u7684\u5ea6 \uff1a\u8282\u70b9\u62e5\u6709\u7684\u5b50\u6811\u4e2a\u6570 \u6811\u7684\u5ea6\uff1a\u6811\u4e2d\u8282\u70b9\u7684\u6700\u5927\u5ea6\u6570 \u7ec8\u7aef\u8282\u70b9\uff1a\u5ea6\u4e3a0\u7684\u8282\u70b9\uff0c\u53c8\u79f0\u4e3a \u53f6\u5b50 \u5206\u652f\u8282\u70b9\uff1a\u5ea6\u5927\u4e8e0\u7684\u8282\u70b9\uff0c\u9664\u4e86\u53f6\u5b50\u90fd\u662f\u5206\u652f\u8282\u70b9 \u5185\u90e8\u8282\u70b9\uff1a\u9664\u4e86\u6811\u6839\u548c\u53f6\u5b50\u90fd\u662f\u5185\u90e8\u8282\u70b9 \u8282\u70b9\u7684\u5c42\u6b21\uff1a\u4ece\u6839\u5230\u8282\u70b9\u7684\u5c42\u6570\uff08\u6839\u8282\u70b9\u4e3a\u7b2c1\u5c42\uff09 \u6811\u7684\u6df1\u5ea6\uff1a\u6700\u5927\u5c42\u6570 \u8def\u5f84 \uff1a\u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5e8f\u5217 \u8def\u5f84\u957f\u5ea6\uff1a\u4e24\u8282\u70b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u8fb9\u6570 \u53cc\u4eb2\u3001\u5b69\u5b50\uff1a\u8282\u70b9\u7684\u5b50\u6811\u7684\u6839 \u5144\u5f1f\uff1a\u53cc\u4eb2\u76f8\u540c\u7684\u8282\u70b9 \u5802\u5144\u5f1f\uff1a\u53cc\u4eb2\u662f\u5144\u5f1f\u7684\u8282\u70b9 \u7956\u5148\uff1a\u4ece\u8be5\u8282\u70b9\u5230\u6811\u6839\u7ecf\u8fc7\u7684\u6240\u6709\u8282\u70b9 \u5b50\u5b59\uff1a\u8282\u70b9\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9 \u6709\u5e8f\u6811\uff1a\u8282\u70b9\u7684\u5404\u5b50\u6811\u4ece\u5de6\u81f3\u53f3\u6709\u5e8f\uff0c\u4e0d\u80fd\u4e92\u6362\u4f4d\u7f6e \u65e0\u5e8f\u6811\uff1a\u8282\u70b9\u54e5\u5b50\u6811\u53ef\u4ee5\u4e92\u6362\u4f4d\u7f6e \u68ee\u6797\uff1am(m \u2265 0)\u9897\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u96c6\u5408","title":"\u5b9a\u4e49\u7ed3\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_3","text":"\u987a\u5e8f\u5b58\u50a8 \u53cc\u4eb2\u8868\u793a\u6cd5 \u65e0\u6cd5\u7684\u5230\u8be5\u8282\u70b9\u7684\u5b69\u5b50 \u5b69\u5b50\u8868\u793a\u6cd5 \u65e0\u6cd5\u76f4\u63a5\u5f97\u5230\u8be5\u8282\u70b9\u7684\u53cc\u4eb2 \u53ea\u80fd\u6309\u7167\u6570\u7684\u6700\u5927\u5ea6\u5206\u914d\u5b69\u5b50\u7a7a\u95f4\uff0c\u53ef\u80fd\u5bfc\u81f4\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4 \u53cc\u4eb2\u5b69\u5b50\u8868\u793a\u6cd5 \u53ef\u4ee5\u5f97\u5230\u5b69\u5b50\u548c\u53cc\u4eb2 \u540c\u5b69\u5b50\u8868\u793a\u6cd5\uff0c\u53ef\u80fd\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4 \u94fe\u5f0f\u5b58\u50a8 \u5b69\u5b50\u94fe\u8868\u8868\u793a\u6cd5 \u7c7b\u4f3c\u4e8e\u90bb\u63a5\u8868\uff1adata\u5b58\u50a8\u6570\u636e\u5143\u7d20\uff0cfirst\u4e3a\u6307\u5411\u7b2c\u4e00\u4e2a\u5b69\u5b50\u7684\u6307\u9488 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5 \u8282\u70b9\u9664\u4e86\u5b58\u50a8\u6570\u636e\u5143\u7d20\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u4e2a\u6307\u9488\u57df lchild \u548c rchild \uff0c\u88ab\u79f0\u4e3a \u4e8c\u53c9\u94fe\u8868 \uff0c lchild \u5b58\u50a8 \u7b2c\u4e00\u4e2a\u5b69\u5b50\u7684\u5730\u5740 \uff0c rchild \u5b58\u50a8 \u53f3\u5144\u5f1f\u5730\u5740 \u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u79d8\u8bc0\uff1a \u957f\u5b50\u5f53\u4f5c\u5de6\u5b69\u5b50\uff0c\u5144\u5f1f\u5173\u7cfb\u5411\u53f3\u659c","title":"\u6811\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_4","text":"\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811 \u4f7f\u7528\u5144\u5f1f\u5b69\u5b50\u8868\u793a\u6cd5\uff0c\u5c06\u666e\u901a\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811 \u4e8c\u53c9\u6811\u8f6c\u6362\u4e3a\u6811 \u9006\u4f5c\u7528\u5373\u53ef\u5b9e\u73b0 \u68ee\u6797\u548c\u4e8c\u53c9\u6811\u7684\u8f6c\u6362 \u68ee\u6797\u662f\u7531$m$\u68f5\u4e0d\u76f8\u4ea4\u7684\u6811\u7ec4\u6210\u7684\u96c6\u5408 \u628a\u68ee\u6797\u91cc\u7684\u6bcf\u4e00\u68f5\u6811\u7684 \u6811\u6839\u770b\u4f5c\u5144\u5f1f\u5173\u7cfb \uff0c\u5176\u4ed6\u8f6c\u6362\u4e0e\u6811\u8f6c\u6362\u4e3a\u4e8c\u53c9\u6811\u4e00\u81f4","title":"\u6811\u3001\u68ee\u6797\u4e0e[[\u4e8c\u53c9\u6811]]\u7684\u8f6c\u6362"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_5","text":"","title":"\u6811\u548c\u68ee\u6797\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_6","text":"\u9012\u5f52","title":"\u6811\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_7","text":"\u5148\u8bbf\u95ee\u6839\uff0c\u7136\u540e\u6309\u4ece\u5de6\u5411\u53f3\u7684\u987a\u5e8f\uff0c\u5148\u6839\u904d\u5386\u8282\u70b9\u7684\u6bcf\u4e00\u523b\u5b50\u6811\uff0c\u7b2c\u4e00\u9897\u5b50\u6811\u904d\u5386\u5b8c\u6bd5\u624d\u53ef\u4ee5\u904d\u5386\u7b2c\u4e8c\u9897\u5b50\u6811 \u4e0e[[\u4e8c\u53c9\u6811#\u5148\u5e8f\u904d\u5386|\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386]]\u4e00\u81f4","title":"\u5148\u6839\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_8","text":"\u5148\u6309\u7167\u4ece\u5de6\u5411\u53f3\u7684\u987a\u5e8f\u540e\u8ddf\u904d\u5386\u6bcf\u4e00\u523b\u5b50\u6811\uff0c\u6ca1\u6709\u5b50\u6811\u6216\u5b50\u6811\u5df2\u904d\u5386\u5b8c\u6bd5\uff0c\u624d\u53ef\u4ee5\u8bbf\u95ee\u6839 \u4e0e[[\u4e8c\u53c9\u6811#\u4e2d\u5e8f\u904d\u5386|\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386]]\u4e00\u81f4","title":"\u540e\u6839\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_9","text":"","title":"\u68ee\u6797\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_10","text":"\u5982\u679c\u68ee\u6797\u975e\u7a7a\uff1a - \u8bbf\u95ee \u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9 - \u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u7684\u5b50\u6811\u68ee\u6797 - \u5148\u5e8f\u904d\u5386\u9664\u7b2c\u4e00\u68f5\u6811\u5916\uff0c\u5269\u4f59\u7684\u6811\u6784\u6210\u7684\u68ee\u6797 \u8bbf\u95ee\u987a\u5e8f\u4e0e\u8be5\u68ee\u6797 \u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386 \u987a\u5e8f\u4e00\u81f4","title":"\u5148\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_11","text":"\u5982\u679c\u68ee\u6797\u975e\u7a7a\uff1a - \u4e2d\u5e8f\u904d\u5386 \u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9\u7684\u5b50\u6811\u68ee\u6797 - \u8bbf\u95ee\u7b2c\u4e00\u68f5\u6811\u7684\u6839\u8282\u70b9 - \u4e2d\u5e8f\u904d\u5386\u9664\u7b2c\u4e00\u68f5\u6811\u4e4b\u5916\uff0c\u5269\u4f59\u7684\u6811\u6784\u6210\u7684\u68ee\u6797 \u8bbf\u95ee\u987a\u5e8f\u4e0e\u8be5\u68ee\u6797 \u5bf9\u5e94\u7684\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 \u987a\u5e8f\u76f8\u540c","title":"\u4e2d\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/%E6%A0%91/#_12","text":"[[Huffman]] [[\u6811\u8868\u67e5\u627e#\u4e8c\u53c9\u67e5\u627e\u6811|\u4e8c\u53c9\u67e5\u627e\u6811]]","title":"\u6811\u7684\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/STL/","text":"STL C++\u8bed\u8a00\u7684\u6838\u5fc3\u4f18\u52bf\u4e4b\u4e00\uff1a\u4fbf\u4e8e\u8f6f\u4ef6\u7684\u91cd\u7528 \u4f53\u73b0\u91cd\u7528\u7684\u4e24\u4e2a\u65b9\u9762\uff1a 1. \u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\uff1a\u7ee7\u627f\u3001\u591a\u6001\uff0c\u6807\u51c6\u7c7b\u5e93 2. \u6cdb\u578b\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u601d\u60f3\uff1a\u6a21\u677f\u3001\u6807\u51c6\u7c7b\u5e93 \u6807\u51c6\u7c7b\u5e93\uff08STL\uff09\uff1a\u5305\u62ec\u4e86\u901a\u7528\u6570\u636e\u7ed3\u6784\u548c\u57fa\u672c\u7b97\u6cd5\uff0c\u63d0\u4f9b\u7edf\u4e00\u6807\u51c6\u7684\u516c\u5171\u63a5\u53e3\uff0c\u4f7f\u7528\u65b9\u4fbf\u5feb\u6377 \u7ec4\u6210\u7ed3\u6784 \u5bb9\u5668 \u7528\u6765\u5bb9\u7eb3\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784 \u4e09\u5927\u7c7b\uff1a \u987a\u5e8f\u5bb9\u5668 vector\uff1a\u53ef\u968f\u673a\u8bbf\u95ee\uff0c\u540e\u90e8\u63d2\u5165\u5220\u9664 deque\uff1a\u53ef\u968f\u673a\u8bbf\u95ee\uff0c\u524d\u540e\u63d2\u5165\u5220\u9664 list\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664 \u5173\u8054\u5bb9\u5668\uff08\u4f7f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u63d2\u5165\u3001\u68c0\u7d22\u7684\u65f6\u95f4\u5747\u4e3a$O(\\log{N})$ (milti)set\uff1a\u5feb\u901f\u67e5\u627e\uff0c\uff08\u6709\uff09\u65e0\u91cd\u590d\u5143\u7d20 (multi)map\uff1a\u4e00\u4e00\u5bf9\u5e94\uff0c\uff08\u6709\uff09\u65e0\u91cd\u590d\u5143\u7d20 \u9002\u914d\u5bb9\u5668 stack queue priority_queue\uff1a\u4f18\u5148\u961f\u5217 \u5171\u6709\u7684\u6210\u5458\u51fd\u6570\uff1a \u57fa\u672c\u8fd0\u7b97\u7b26\uff1a=\u3001<\u3001<=\u3001== \u3001\u2026\u2026 empty() max_size() size() swap() begin()\u3001end()\u3001insert()\u3001erase()\u7b49 \u5bf9\u4e8e\u4f7f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684STL\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7ed3\u6784\u4f53\uff0c\u5bf9\u6570\u636e\u7c7b\u578b\u505a\u7279\u6b8a\u7684\u6392\u5e8f\u64cd\u4f5c\u6216\u8005\u662f\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6784\u9020\u65b9\u5f0f\u5982\u4e0b\uff08\u4ee5set\u4e3a\u4f8b\uff09\uff1a - set<\u7c7b\u578b,\u6bd4\u8f83\u7ed3\u6784\u4f53> \u5bf9\u8c61\u540d \u6bd4\u8f83\u7ed3\u6784\u4f53\u7684\u58f0\u660e\uff1a struct comp{ bool operator()(const type &a, const type &b){ \u6bd4\u8f83\u673a\u5236:return true/false } } \u8fed\u4ee3\u5668 \u7c7b\u4f3c\u4f20\u7edfC\u7684\u6307\u9488\uff0c\u53ef\u4f9d\u6b21\u5b58\u53d6\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u5bf9\u8c61 \u8303\u56f4\u8868\u793a\uff1a \u5b58\u5728const\u4e0e\u975econst\u4e24\u79cd\uff1a\u975econst\u53ef\u4ee5\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20 \u5b9a\u4e49\u5bb9\u5668\u7c7b\u7684\u65b9\u6cd5\uff1a \u5bb9\u5668\u7c7b\u540d::iterator \u53d8\u91cf\u540d \u6216 \u5bb9\u5668\u7c7b\u540d::const_iterator \u53d8\u91cf\u540d \u8bbf\u95ee\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u7684\u65b9\u5f0f\uff1a\u4e0e\u6307\u9488\u76f8\u540c\uff1a *iterator \u529f\u80fd\u7531\u5f31\u5230\u5f3a\u53ef\u5206\u4e3a\u4e94\u79cd\uff1a \u8f93\u5165\uff1a\u63d0\u4f9b\u5bf9\u6570\u636e\u7684\u53ea\u8bfb\u8bbf\u95ee\uff08cout\uff09 \u8f93\u51fa\uff1a\u63d0\u4f9b\u5bf9\u6570\u636e\u7684\u53ea\u5199\u8bbf\u95ee\uff08cin\uff09 \u6b63\u5411\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u80fd\u4e00\u6b21\u4e00\u4e2a\u5411\u524d\u63a8\u8fdb \u53cc\u5411\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u80fd\u4e00\u6b21\u4e00\u4e2a\u5411\u524d\u6216\u540e\u63a8\u8fdb \u968f\u673a\u8bbf\u95ee\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u968f\u673a\u79fb\u52a8 \u5bf9\u8fed\u4ee3\u5668\u7684\u9650\u5236\u8d8a\u5c11\u8d8a\u597d \u80fd\u591f\u652f\u6301\u5927\u90e8\u5206\u7684\u573a\u666f \u7279\u6b8a\u7684\u573a\u666f\u53ef\u4ee5\u81ea\u884c\u6dfb\u52a0\u9650\u5236 \u5bf9\u4e8ecin\u3001cout\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u4f7f\u7528 ostream_iterator<int> inwriter(cout, \" \"); copy(begin(), end(), inwriter); \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8981\u8f93\u51fa\u7684\u76ee\u7684\u5730\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u95f4\u9694\u7b26 \u7b97\u6cd5 \u901a\u8fc7\u8fed\u4ee3\u5668\u6765\u624d\u505a\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u51fd\u6570\u6a21\u677f \u9002\u914d\u5668 \u5229\u7528\u57fa\u7840\u5bb9\u5668\u5bf9\u8c61\uff0c\u52a0\u4ee5\u5305\u88c5\u3001\u6539\u53d8\u63a5\u53e3\uff0c\u4ee5\u9002\u5e94\u53e6\u4e00\u79cd\u9700\u6c42 \u51fd\u6570\u5bf9\u8c61 \u8f83\u4e3a\u4f4e\u9636\u7684\u5bf9\u8c61\uff0c\u7528\u6765\u66ff\u4ee3\u4f20\u7edf\u7684\u51fd\u6570\u6307\u9488 \u533f\u540d\u5bf9\u8c61\u4ec5\u5b58\u5728\u4e8e\u6784\u9020\u8be5\u5bf9\u8c61\u7684\u90a3\u4e00\u884c\u4ee3\u7801","title":"STL"},{"location":"%E7%AE%97%E6%B3%95/STL/#stl","text":"C++\u8bed\u8a00\u7684\u6838\u5fc3\u4f18\u52bf\u4e4b\u4e00\uff1a\u4fbf\u4e8e\u8f6f\u4ef6\u7684\u91cd\u7528 \u4f53\u73b0\u91cd\u7528\u7684\u4e24\u4e2a\u65b9\u9762\uff1a 1. \u9762\u5411\u5bf9\u8c61\u7684\u601d\u60f3\uff1a\u7ee7\u627f\u3001\u591a\u6001\uff0c\u6807\u51c6\u7c7b\u5e93 2. \u6cdb\u578b\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u601d\u60f3\uff1a\u6a21\u677f\u3001\u6807\u51c6\u7c7b\u5e93 \u6807\u51c6\u7c7b\u5e93\uff08STL\uff09\uff1a\u5305\u62ec\u4e86\u901a\u7528\u6570\u636e\u7ed3\u6784\u548c\u57fa\u672c\u7b97\u6cd5\uff0c\u63d0\u4f9b\u7edf\u4e00\u6807\u51c6\u7684\u516c\u5171\u63a5\u53e3\uff0c\u4f7f\u7528\u65b9\u4fbf\u5feb\u6377","title":"STL"},{"location":"%E7%AE%97%E6%B3%95/STL/#_1","text":"","title":"\u7ec4\u6210\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/STL/#_2","text":"\u7528\u6765\u5bb9\u7eb3\u5404\u79cd\u6570\u636e\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784 \u4e09\u5927\u7c7b\uff1a \u987a\u5e8f\u5bb9\u5668 vector\uff1a\u53ef\u968f\u673a\u8bbf\u95ee\uff0c\u540e\u90e8\u63d2\u5165\u5220\u9664 deque\uff1a\u53ef\u968f\u673a\u8bbf\u95ee\uff0c\u524d\u540e\u63d2\u5165\u5220\u9664 list\uff1a\u53cc\u5411\u94fe\u8868\uff0c\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664 \u5173\u8054\u5bb9\u5668\uff08\u4f7f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u63d2\u5165\u3001\u68c0\u7d22\u7684\u65f6\u95f4\u5747\u4e3a$O(\\log{N})$ (milti)set\uff1a\u5feb\u901f\u67e5\u627e\uff0c\uff08\u6709\uff09\u65e0\u91cd\u590d\u5143\u7d20 (multi)map\uff1a\u4e00\u4e00\u5bf9\u5e94\uff0c\uff08\u6709\uff09\u65e0\u91cd\u590d\u5143\u7d20 \u9002\u914d\u5bb9\u5668 stack queue priority_queue\uff1a\u4f18\u5148\u961f\u5217 \u5171\u6709\u7684\u6210\u5458\u51fd\u6570\uff1a \u57fa\u672c\u8fd0\u7b97\u7b26\uff1a=\u3001<\u3001<=\u3001== \u3001\u2026\u2026 empty() max_size() size() swap() begin()\u3001end()\u3001insert()\u3001erase()\u7b49 \u5bf9\u4e8e\u4f7f\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\u7684STL\u5bb9\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7ed3\u6784\u4f53\uff0c\u5bf9\u6570\u636e\u7c7b\u578b\u505a\u7279\u6b8a\u7684\u6392\u5e8f\u64cd\u4f5c\u6216\u8005\u662f\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6784\u9020\u65b9\u5f0f\u5982\u4e0b\uff08\u4ee5set\u4e3a\u4f8b\uff09\uff1a - set<\u7c7b\u578b,\u6bd4\u8f83\u7ed3\u6784\u4f53> \u5bf9\u8c61\u540d \u6bd4\u8f83\u7ed3\u6784\u4f53\u7684\u58f0\u660e\uff1a struct comp{ bool operator()(const type &a, const type &b){ \u6bd4\u8f83\u673a\u5236:return true/false } }","title":"\u5bb9\u5668"},{"location":"%E7%AE%97%E6%B3%95/STL/#_3","text":"\u7c7b\u4f3c\u4f20\u7edfC\u7684\u6307\u9488\uff0c\u53ef\u4f9d\u6b21\u5b58\u53d6\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u5bf9\u8c61 \u8303\u56f4\u8868\u793a\uff1a \u5b58\u5728const\u4e0e\u975econst\u4e24\u79cd\uff1a\u975econst\u53ef\u4ee5\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20 \u5b9a\u4e49\u5bb9\u5668\u7c7b\u7684\u65b9\u6cd5\uff1a \u5bb9\u5668\u7c7b\u540d::iterator \u53d8\u91cf\u540d \u6216 \u5bb9\u5668\u7c7b\u540d::const_iterator \u53d8\u91cf\u540d \u8bbf\u95ee\u8fed\u4ee3\u5668\u6307\u5411\u5143\u7d20\u7684\u65b9\u5f0f\uff1a\u4e0e\u6307\u9488\u76f8\u540c\uff1a *iterator \u529f\u80fd\u7531\u5f31\u5230\u5f3a\u53ef\u5206\u4e3a\u4e94\u79cd\uff1a \u8f93\u5165\uff1a\u63d0\u4f9b\u5bf9\u6570\u636e\u7684\u53ea\u8bfb\u8bbf\u95ee\uff08cout\uff09 \u8f93\u51fa\uff1a\u63d0\u4f9b\u5bf9\u6570\u636e\u7684\u53ea\u5199\u8bbf\u95ee\uff08cin\uff09 \u6b63\u5411\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u80fd\u4e00\u6b21\u4e00\u4e2a\u5411\u524d\u63a8\u8fdb \u53cc\u5411\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u80fd\u4e00\u6b21\u4e00\u4e2a\u5411\u524d\u6216\u540e\u63a8\u8fdb \u968f\u673a\u8bbf\u95ee\uff1a\u63d0\u4f9b\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u968f\u673a\u79fb\u52a8 \u5bf9\u8fed\u4ee3\u5668\u7684\u9650\u5236\u8d8a\u5c11\u8d8a\u597d \u80fd\u591f\u652f\u6301\u5927\u90e8\u5206\u7684\u573a\u666f \u7279\u6b8a\u7684\u573a\u666f\u53ef\u4ee5\u81ea\u884c\u6dfb\u52a0\u9650\u5236 \u5bf9\u4e8ecin\u3001cout\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u4f7f\u7528 ostream_iterator<int> inwriter(cout, \" \"); copy(begin(), end(), inwriter); \u6784\u9020\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8981\u8f93\u51fa\u7684\u76ee\u7684\u5730\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u95f4\u9694\u7b26","title":"\u8fed\u4ee3\u5668"},{"location":"%E7%AE%97%E6%B3%95/STL/#_4","text":"\u901a\u8fc7\u8fed\u4ee3\u5668\u6765\u624d\u505a\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u51fd\u6570\u6a21\u677f","title":"\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/STL/#_5","text":"\u5229\u7528\u57fa\u7840\u5bb9\u5668\u5bf9\u8c61\uff0c\u52a0\u4ee5\u5305\u88c5\u3001\u6539\u53d8\u63a5\u53e3\uff0c\u4ee5\u9002\u5e94\u53e6\u4e00\u79cd\u9700\u6c42","title":"\u9002\u914d\u5668"},{"location":"%E7%AE%97%E6%B3%95/STL/#_6","text":"\u8f83\u4e3a\u4f4e\u9636\u7684\u5bf9\u8c61\uff0c\u7528\u6765\u66ff\u4ee3\u4f20\u7edf\u7684\u51fd\u6570\u6307\u9488 \u533f\u540d\u5bf9\u8c61\u4ec5\u5b58\u5728\u4e8e\u6784\u9020\u8be5\u5bf9\u8c61\u7684\u90a3\u4e00\u884c\u4ee3\u7801","title":"\u51fd\u6570\u5bf9\u8c61"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF%E6%B3%95/","text":"\u56de\u6eaf\u6cd5 \u4e00\u3001\u56de\u6eaf\u6cd5\u57fa\u7840 \u601d\u60f3\uff1a \u80fd\u8fdb\u5219\u8fdb\uff0c\u8fdb\u4e0d\u4e86\u5219\u6362\uff0c\u6362\u4e0d\u4e86\u5219\u9000 \uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09 \u8981\u7d20\uff1a \u9996\u5148\u786e\u5b9a\u89e3\u7684\u5f62\u5f0f\uff0c\u786e\u5b9a\u95ee\u9898\u7684 \u89e3\u7a7a\u95f4 \u89e3\u7a7a\u95f4\uff1a \u5b9a\u4e49\uff1a\u6240\u6709\u89e3\u7ec4\u6210\u7684\u7a7a\u95f4 \u89e3\u7a7a\u95f4\u7684\u7ec4\u7ec7\u7ed3\u6784\uff1a\u9700\u8981\u6309\u7167\u4e00\u5b9a\u5957\u8def\uff0c\u5373\u4e00\u5b9a\u7684\u7ec4\u7ec7\u7ed3\u6784\u641c\u7d22\u6700\u4f18\u89e3\uff0c\u628a\u8fd9\u79cd\u7ec4\u7ec7\u7ed3\u6784\u5f62\u8c61\u5730\u7528\u6811\u8868\u793a\u51fa\u6765\uff0c\u5c31\u6210\u4e3a \u89e3\u7a7a\u95f4\u6811 \u641c\u7d22\u89e3\u7a7a\u95f4\uff1a \u9690\u7ea6\u675f\uff1a\u5bf9\u80fd\u5426\u5f97\u5230\u95ee\u9898\u7684\u53ef\u884c\u89e3\u6216\u6700\u4f18\u89e3\u505a\u51fa\u7684\u7ea6\u675f \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u6ca1\u6709\u6bd4\u8e39\u5f00\u518d\u6cbf\u7740\u8be5\u7ed3\u70b9\u7684\u5206\u652f\u7ee7\u7eed\u641c\u7d22\uff0c\u7531\u6b64\u9690\u7ea6\u675f\u4e5f\u79f0\u4e3a \u526a\u679d\u51fd\u6570 \uff08 \u4e0d\u518d\u641c\u7d22\u8be5\u5206\u652f \uff09 eg\uff1a3\u4e2a\u7269\u4f53\u768401[[\u80cc\u5305\u95ee\u9898]]\u4e2d\uff0c\u524d\u4e24\u4e2a\u7269\u4f53\u653e\u5165\u540e\uff0c\u5df2\u7ecf\u8d85\u91cd\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u641c\u7d22\u8be5\u5206\u652f \u9690\u7ea6\u675f\uff08\u526a\u679d\u51fd\u6570\uff09\u5305\u542b\u4e86 \u7ea6\u675f\u51fd\u6570 \u548c \u9650\u754c\u51fd\u6570 \u89e3\u7a7a\u95f4\u7684\u5927\u5c0f\u548c\u526a\u679d\u51fd\u6570\u7684\u597d\u574f\u90fd\u76f4\u63a5\u5f71\u54cd\u641c\u7d22\u6548\u7387 \u51e0\u4e2a\u672f\u8bed\u7684\u8bf4\u660e\uff1a 1. \u6269\u5c55\u7ed3\u70b9\uff1a\u4e00\u4e2a\u6b63\u5728\u751f\u6210\u5b69\u5b50\u7684\u7ed3\u70b9 2. \u6d3b\u7ed3\u70b9\uff1a\u4e00\u4e2a\u81ea\u8eab\u751f\u6210\uff0c\u4f46\u5b69\u5b50\u8fd8\u6ca1\u6709\u5168\u90e8\u751f\u6210\u7684\u7ed3\u70b9 3. \u6b7b\u7ed3\u70b9\uff1a\u4e00\u4e2a\u5b69\u5b50\u5df2\u7ecf\u5168\u90e8\u751f\u6210\u7684\u7ed3\u70b9 4. \u5b50\u5b59\uff1a\u7ed3\u70b9E\u7684\u5b50\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u662fE\u7684\u5b50\u5b59 5. \u7956\u5b97\uff1a\u4ece\u7ed3\u70b9E\u5230\u6811\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u662fE\u7684\u7956\u5b97 \u89e3\u9898\u7684\u65b9\u6cd5 \u5b9a\u4e49\u89e3\u7a7a\u95f4 \u901a\u8fc7\u663e\u7ea6\u675f\u9650\u5b9a\u89e3\u7a7a\u95f4\u7684\u5927\u5c0f \u786e\u5b9a\u89e3\u7a7a\u95f4\u7684\u7ec4\u7ec7\u7ed3\u6784 \u89e3\u7a7a\u95f4\u5206\u4e3a\u5b50\u96c6\u6811\u3001\u6392\u5217\u6811\u3001m\u53c9\u6811\u7b49 \u641c\u7d22\u89e3\u7a7a\u95f4 \u56de\u6eaf\u6cd5\u662f\u6309\u7167\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b56\u7565\uff0c\u6839\u636e\u9690\u7ea6\u675f\uff0c\u5728\u89e3\u7a7a\u95f4\u4e2d\u641c\u7d22\u95ee\u9898\u7684\u53ef\u884c\u89e3\u6216\u6700\u4f18\u89e3\uff0c\u5f53\u53d1\u73b0\u5f53\u524d\u7ed3\u70b9\u4e0d\u6ee1\u8db3\u6c42\u89e3\u6761\u4ef6\u65f6\uff0c\u5c31\u56de\u6eaf\u5c1d\u8bd5\u5176\u4ed6\u7684\u8def\u5f84 \u5982\u679c\u95ee\u9898 \u53ea\u662f\u8981\u6c42\u53ef\u884c\u89e3 \uff0c\u5219 \u53ea\u9700\u8981\u8bbe\u5b9a\u7ea6\u675f\u51fd\u6570 \u5373\u53ef \u5982\u679c\u8981\u6c42 \u6700\u4f18\u89e3 \uff0c\u5219\u9700\u8981\u8bbe\u5b9a \u7ea6\u675f\u51fd\u6570 \u548c \u9650\u754c\u51fd\u6570 \u56de\u6eaf\u6cd5\u89e3\u9898\u7684\u5173\u952e\uff1a\u8bbe\u8ba1\u6709\u6548\u7684\u663e\u7ea6\u675f\u548c\u9690\u7ea6\u675f","title":"\u56de\u6eaf\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_1","text":"","title":"\u56de\u6eaf\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF%E6%B3%95/#_2","text":"\u601d\u60f3\uff1a \u80fd\u8fdb\u5219\u8fdb\uff0c\u8fdb\u4e0d\u4e86\u5219\u6362\uff0c\u6362\u4e0d\u4e86\u5219\u9000 \uff08\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff09 \u8981\u7d20\uff1a \u9996\u5148\u786e\u5b9a\u89e3\u7684\u5f62\u5f0f\uff0c\u786e\u5b9a\u95ee\u9898\u7684 \u89e3\u7a7a\u95f4 \u89e3\u7a7a\u95f4\uff1a \u5b9a\u4e49\uff1a\u6240\u6709\u89e3\u7ec4\u6210\u7684\u7a7a\u95f4 \u89e3\u7a7a\u95f4\u7684\u7ec4\u7ec7\u7ed3\u6784\uff1a\u9700\u8981\u6309\u7167\u4e00\u5b9a\u5957\u8def\uff0c\u5373\u4e00\u5b9a\u7684\u7ec4\u7ec7\u7ed3\u6784\u641c\u7d22\u6700\u4f18\u89e3\uff0c\u628a\u8fd9\u79cd\u7ec4\u7ec7\u7ed3\u6784\u5f62\u8c61\u5730\u7528\u6811\u8868\u793a\u51fa\u6765\uff0c\u5c31\u6210\u4e3a \u89e3\u7a7a\u95f4\u6811 \u641c\u7d22\u89e3\u7a7a\u95f4\uff1a \u9690\u7ea6\u675f\uff1a\u5bf9\u80fd\u5426\u5f97\u5230\u95ee\u9898\u7684\u53ef\u884c\u89e3\u6216\u6700\u4f18\u89e3\u505a\u51fa\u7684\u7ea6\u675f \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5c31\u6ca1\u6709\u6bd4\u8e39\u5f00\u518d\u6cbf\u7740\u8be5\u7ed3\u70b9\u7684\u5206\u652f\u7ee7\u7eed\u641c\u7d22\uff0c\u7531\u6b64\u9690\u7ea6\u675f\u4e5f\u79f0\u4e3a \u526a\u679d\u51fd\u6570 \uff08 \u4e0d\u518d\u641c\u7d22\u8be5\u5206\u652f \uff09 eg\uff1a3\u4e2a\u7269\u4f53\u768401[[\u80cc\u5305\u95ee\u9898]]\u4e2d\uff0c\u524d\u4e24\u4e2a\u7269\u4f53\u653e\u5165\u540e\uff0c\u5df2\u7ecf\u8d85\u91cd\uff0c\u5219\u4e0d\u518d\u7ee7\u7eed\u641c\u7d22\u8be5\u5206\u652f \u9690\u7ea6\u675f\uff08\u526a\u679d\u51fd\u6570\uff09\u5305\u542b\u4e86 \u7ea6\u675f\u51fd\u6570 \u548c \u9650\u754c\u51fd\u6570 \u89e3\u7a7a\u95f4\u7684\u5927\u5c0f\u548c\u526a\u679d\u51fd\u6570\u7684\u597d\u574f\u90fd\u76f4\u63a5\u5f71\u54cd\u641c\u7d22\u6548\u7387 \u51e0\u4e2a\u672f\u8bed\u7684\u8bf4\u660e\uff1a 1. \u6269\u5c55\u7ed3\u70b9\uff1a\u4e00\u4e2a\u6b63\u5728\u751f\u6210\u5b69\u5b50\u7684\u7ed3\u70b9 2. \u6d3b\u7ed3\u70b9\uff1a\u4e00\u4e2a\u81ea\u8eab\u751f\u6210\uff0c\u4f46\u5b69\u5b50\u8fd8\u6ca1\u6709\u5168\u90e8\u751f\u6210\u7684\u7ed3\u70b9 3. \u6b7b\u7ed3\u70b9\uff1a\u4e00\u4e2a\u5b69\u5b50\u5df2\u7ecf\u5168\u90e8\u751f\u6210\u7684\u7ed3\u70b9 4. \u5b50\u5b59\uff1a\u7ed3\u70b9E\u7684\u5b50\u6811\u4e0a\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u662fE\u7684\u5b50\u5b59 5. \u7956\u5b97\uff1a\u4ece\u7ed3\u70b9E\u5230\u6811\u6839\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u90fd\u662fE\u7684\u7956\u5b97 \u89e3\u9898\u7684\u65b9\u6cd5 \u5b9a\u4e49\u89e3\u7a7a\u95f4 \u901a\u8fc7\u663e\u7ea6\u675f\u9650\u5b9a\u89e3\u7a7a\u95f4\u7684\u5927\u5c0f \u786e\u5b9a\u89e3\u7a7a\u95f4\u7684\u7ec4\u7ec7\u7ed3\u6784 \u89e3\u7a7a\u95f4\u5206\u4e3a\u5b50\u96c6\u6811\u3001\u6392\u5217\u6811\u3001m\u53c9\u6811\u7b49 \u641c\u7d22\u89e3\u7a7a\u95f4 \u56de\u6eaf\u6cd5\u662f\u6309\u7167\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b56\u7565\uff0c\u6839\u636e\u9690\u7ea6\u675f\uff0c\u5728\u89e3\u7a7a\u95f4\u4e2d\u641c\u7d22\u95ee\u9898\u7684\u53ef\u884c\u89e3\u6216\u6700\u4f18\u89e3\uff0c\u5f53\u53d1\u73b0\u5f53\u524d\u7ed3\u70b9\u4e0d\u6ee1\u8db3\u6c42\u89e3\u6761\u4ef6\u65f6\uff0c\u5c31\u56de\u6eaf\u5c1d\u8bd5\u5176\u4ed6\u7684\u8def\u5f84 \u5982\u679c\u95ee\u9898 \u53ea\u662f\u8981\u6c42\u53ef\u884c\u89e3 \uff0c\u5219 \u53ea\u9700\u8981\u8bbe\u5b9a\u7ea6\u675f\u51fd\u6570 \u5373\u53ef \u5982\u679c\u8981\u6c42 \u6700\u4f18\u89e3 \uff0c\u5219\u9700\u8981\u8bbe\u5b9a \u7ea6\u675f\u51fd\u6570 \u548c \u9650\u754c\u51fd\u6570 \u56de\u6eaf\u6cd5\u89e3\u9898\u7684\u5173\u952e\uff1a\u8bbe\u8ba1\u6709\u6548\u7684\u663e\u7ea6\u675f\u548c\u9690\u7ea6\u675f","title":"\u4e00\u3001\u56de\u6eaf\u6cd5\u57fa\u7840"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/","text":"\u5e38\u7528\u4ee3\u7801\u6a21\u677f \u57fa\u7840\u7b97\u6cd5 \u6570\u636e\u7ed3\u6784 \u641c\u7d22\u4e0e\u56fe\u8bba \u6570\u5b66\u77e5\u8bc6","title":"\u5e38\u7528\u4ee3\u7801\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_1","text":"","title":"\u5e38\u7528\u4ee3\u7801\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_2","text":"","title":"\u57fa\u7840\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_3","text":"","title":"\u6570\u636e\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_4","text":"","title":"\u641c\u7d22\u4e0e\u56fe\u8bba"},{"location":"%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/#_5","text":"","title":"\u6570\u5b66\u77e5\u8bc6"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/","text":"\u9012\u5f52 \u57fa\u672c\u6982\u5ff5 \u51fd\u6570\u4f53\u5185\u76f4\u63a5\u8c03\u7528\u81ea\u5df1\uff1a\u76f4\u63a5\u9012\u5f52 \u51fd\u6570\u901a\u8fc7\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff0c\u53cd\u8fc7\u6765\u8c03\u7528\u81ea\u5df1\uff1a\u95f4\u63a5\u9012\u5f52 \u4efb\u610f\u5faa\u73af\u90fd\u80fd\u5199\u6210\u9012\u5f52 \u9012\u5f52\u7a0b\u5e8f\u7684\u9605\u8bfb \u6839\u636e\u8c03\u7528\u7684\u60c5\u51b5\uff0c\u5c06\u51fd\u6570\u4f5c\u4e3a\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u4f7f\u7528\u6709\u5411\u8fb9\u8fdb\u884c\u8fde\u63a5 \u4ece\u9012\u5f52\u7684\u51fa\u53e3\u70b9\u5f00\u59cb\uff0c\u9010\u6b21\u8fd4\u56de\uff0c\u5728\u8fb9\u4e0a\u4f7f\u7528\u8fd4\u56de\u503c\u4f5c\u4e3a\u8fb9\u7684\u6743\u91cd \u9012\u5f52\u7684\u4e09\u8981\u7d20 \u5199\u9012\u5f52\u4ee3\u7801\u65f6\uff0c\u901a\u8fc7\u4ee5\u4e0b \u4e09\u4e2a\u8981\u7d20 \u6765\u5199\uff08\u4ee5\u4e0b\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u4e3a\u4f8b\uff09 \u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684 \u53c2\u6570\u548c\u8fd4\u56de\u503c void preorder(BiNode<T>* node) \u901a\u8fc7\u5bf9\u95ee\u9898\u7684\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5199\u51fa\u5c3e\u9012\u5f52\u6765\u63d0\u9ad8\u9012\u5f52\u7684\u6548\u7387 \u786e\u5b9a \u7ec8\u6b62\u6761\u4ef6 if(node == NULL) return; \u786e\u5b9a \u6bcf\u5c42\u9012\u5f52\u7684\u903b\u8f91 C++ visit(node); preorder(node->lchild); preorder(node->rchild); \u4f18\u7f3a\u70b9 \u4f18\u70b9 \u5bb9\u6613\u7f16\u7a0b\u5b9e\u73b0 \u5065\u58ee\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u597d \u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u7684\u7b97\u529b \u4ee3\u7801\u7b80\u77ed\uff0c\u4fbf\u4e8e\u9605\u8bfb \u7f3a\u70b9 \u65f6\u7a7a\u6548\u7387\u4f4e","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_1","text":"","title":"\u9012\u5f52"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_2","text":"\u51fd\u6570\u4f53\u5185\u76f4\u63a5\u8c03\u7528\u81ea\u5df1\uff1a\u76f4\u63a5\u9012\u5f52 \u51fd\u6570\u901a\u8fc7\u8c03\u7528\u5176\u4ed6\u51fd\u6570\uff0c\u53cd\u8fc7\u6765\u8c03\u7528\u81ea\u5df1\uff1a\u95f4\u63a5\u9012\u5f52 \u4efb\u610f\u5faa\u73af\u90fd\u80fd\u5199\u6210\u9012\u5f52","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_3","text":"\u6839\u636e\u8c03\u7528\u7684\u60c5\u51b5\uff0c\u5c06\u51fd\u6570\u4f5c\u4e3a\u56fe\u4e2d\u7684\u8282\u70b9\uff0c\u4f7f\u7528\u6709\u5411\u8fb9\u8fdb\u884c\u8fde\u63a5 \u4ece\u9012\u5f52\u7684\u51fa\u53e3\u70b9\u5f00\u59cb\uff0c\u9010\u6b21\u8fd4\u56de\uff0c\u5728\u8fb9\u4e0a\u4f7f\u7528\u8fd4\u56de\u503c\u4f5c\u4e3a\u8fb9\u7684\u6743\u91cd","title":"\u9012\u5f52\u7a0b\u5e8f\u7684\u9605\u8bfb"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_4","text":"\u5199\u9012\u5f52\u4ee3\u7801\u65f6\uff0c\u901a\u8fc7\u4ee5\u4e0b \u4e09\u4e2a\u8981\u7d20 \u6765\u5199\uff08\u4ee5\u4e0b\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\u4e3a\u4f8b\uff09 \u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7684 \u53c2\u6570\u548c\u8fd4\u56de\u503c void preorder(BiNode<T>* node) \u901a\u8fc7\u5bf9\u95ee\u9898\u7684\u5177\u4f53\u5206\u6790\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5199\u51fa\u5c3e\u9012\u5f52\u6765\u63d0\u9ad8\u9012\u5f52\u7684\u6548\u7387 \u786e\u5b9a \u7ec8\u6b62\u6761\u4ef6 if(node == NULL) return; \u786e\u5b9a \u6bcf\u5c42\u9012\u5f52\u7684\u903b\u8f91 C++ visit(node); preorder(node->lchild); preorder(node->rchild);","title":"\u9012\u5f52\u7684\u4e09\u8981\u7d20"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_5","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_6","text":"\u5bb9\u6613\u7f16\u7a0b\u5b9e\u73b0 \u5065\u58ee\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u597d \u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u7684\u7b97\u529b \u4ee3\u7801\u7b80\u77ed\uff0c\u4fbf\u4e8e\u9605\u8bfb","title":"\u4f18\u70b9"},{"location":"%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/#_7","text":"\u65f6\u7a7a\u6548\u7387\u4f4e","title":"\u7f3a\u70b9"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A6%82%E8%BF%B0/","text":"\u52a8\u6001\u89c4\u5212\u6982\u8ff0","title":"\u52a8\u6001\u89c4\u5212\u6982\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%A6%82%E8%BF%B0/#_1","text":"","title":"\u52a8\u6001\u89c4\u5212\u6982\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","text":"\u80cc\u5305\u95ee\u9898 01\u80cc\u5305\u95ee\u9898 f[i][j] \u8868\u793a\u524di\u4e2a\u7269\u4f53\uff0c\u518d\u4f53\u79ef\u4e3aj\u60c5\u51b5\u4e0b\u7684\u603b\u4ef7\u503c\u662f\u591a\u5c11 1. \u4e0d\u53d6\u7b2ci\u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff1a f[i][j] = f[i - 1][j]; 2. \u53d6\u7b2ci\u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff1a f[i][j] = f[i - 1][j - v[i]]; \u6700\u5927\u4ef7\u503c\uff1a maxprice = max{i} \u521d\u59cb\u5316\uff1a f[0][0] = 0; //\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4 #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int v[N], w[N], f[N][N]; //f\u6570\u7ec4\u8868\u793ai\u4e2a\u7269\u54c1\uff0cj\u4f53\u79ef\u4e0b\u7684\u6700\u5927\u4ef7\u503c int main(){ int n,m; cin >> n >> m; for(int i = 1;i <= n;i ++){ scanf(\"%d%d\", &v[i], &w[i]); } for(int i = 1;i <= n;i++){ for(int j = 0;j <= m;j++){ f[i][j] = f[i - 1][j]; //\u4e0d\u653e\u5165\u7684\u4ef7\u503c if(j >= v[i]){ f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); //\u6bd4\u8f83\u653e\u5165\u4e0e\u4e0d\u653e\u5165\u7684\u4ef7\u503c } } } cout <<f[n][m]; return 0; } \u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684\u72b6\u6001\u8f6c\u79fb\u5206\u6790 \u8f6c\u4e3a\u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684\u9010\u6b65\u5206\u6790 //\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4d #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int v[N], w[N], f[N]; //f\u6570\u7ec4\u8868\u793aj\u4f53\u79ef\u4e0b\u7684\u6700\u5927\u4ef7\u503c int main(){ int n,m; cin >> n >> m; for(int i = 1;i <= n;i ++){ scanf(\"%d%d\", &v[i], &w[i]); } for(int i = 1;i <= n;i++){ for(int j = m;j >= v[i];j--){ f[j] = max(f[j], f[j - v[i]] + w[i]); //\u6bd4\u8f83\u653e\u5165\u4e0e\u4e0d\u653e\u5165\u7684\u4ef7\u503c } } cout <<f[m]; return 0; } \u5b8c\u5168\u80cc\u5305\u95ee\u9898 \u6709 N \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int v[N], w[N]; int f[N][N]; int main(){ int m, n; cin >> n >> m; for(int i = 1;i <= n;i++) cin >> v[i] >> w[i]; for(int i = 1;i <= n;i++){ for(int j = 0;j <= m;j++){ f[i][j] = f[i - 1][j]; if(j >= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]); } } cout << f[n][m]; return 0; }","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_1","text":"","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#01","text":"f[i][j] \u8868\u793a\u524di\u4e2a\u7269\u4f53\uff0c\u518d\u4f53\u79ef\u4e3aj\u60c5\u51b5\u4e0b\u7684\u603b\u4ef7\u503c\u662f\u591a\u5c11 1. \u4e0d\u53d6\u7b2ci\u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff1a f[i][j] = f[i - 1][j]; 2. \u53d6\u7b2ci\u4e2a\u7269\u54c1\u7684\u60c5\u51b5\uff1a f[i][j] = f[i - 1][j - v[i]]; \u6700\u5927\u4ef7\u503c\uff1a maxprice = max{i} \u521d\u59cb\u5316\uff1a f[0][0] = 0; //\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4 #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int v[N], w[N], f[N][N]; //f\u6570\u7ec4\u8868\u793ai\u4e2a\u7269\u54c1\uff0cj\u4f53\u79ef\u4e0b\u7684\u6700\u5927\u4ef7\u503c int main(){ int n,m; cin >> n >> m; for(int i = 1;i <= n;i ++){ scanf(\"%d%d\", &v[i], &w[i]); } for(int i = 1;i <= n;i++){ for(int j = 0;j <= m;j++){ f[i][j] = f[i - 1][j]; //\u4e0d\u653e\u5165\u7684\u4ef7\u503c if(j >= v[i]){ f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]); //\u6bd4\u8f83\u653e\u5165\u4e0e\u4e0d\u653e\u5165\u7684\u4ef7\u503c } } } cout <<f[n][m]; return 0; } \u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684\u72b6\u6001\u8f6c\u79fb\u5206\u6790 \u8f6c\u4e3a\u4e00\u7ef4\u60c5\u51b5\u4e0b\u7684\u9010\u6b65\u5206\u6790 //\u4f7f\u7528\u4e00\u7ef4\u6570\u7ec4d #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1010; int v[N], w[N], f[N]; //f\u6570\u7ec4\u8868\u793aj\u4f53\u79ef\u4e0b\u7684\u6700\u5927\u4ef7\u503c int main(){ int n,m; cin >> n >> m; for(int i = 1;i <= n;i ++){ scanf(\"%d%d\", &v[i], &w[i]); } for(int i = 1;i <= n;i++){ for(int j = m;j >= v[i];j--){ f[j] = max(f[j], f[j - v[i]] + w[i]); //\u6bd4\u8f83\u653e\u5165\u4e0e\u4e0d\u653e\u5165\u7684\u4ef7\u503c } } cout <<f[m]; return 0; }","title":"01\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_2","text":"\u6709 N \u79cd\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f V \u7684\u80cc\u5305\uff0c\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002 #include <iostream> #include <algorithm> using namespace std; const int N = 1010; int v[N], w[N]; int f[N][N]; int main(){ int m, n; cin >> n >> m; for(int i = 1;i <= n;i++) cin >> v[i] >> w[i]; for(int i = 1;i <= n;i++){ for(int j = 0;j <= m;j++){ f[i][j] = f[i - 1][j]; if(j >= v[i]) f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]); } } cout << f[n][m]; return 0; }","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/","text":"\u4e8c\u5206 \u672c\u8d28\uff1a\u4e0d\u540c\u6027\u8d28\u7684\u8fb9\u754c \u4e00\u3001\u6574\u6570 \u6b65\u9aa4 \u627e\u4e2d\u95f4\u503c\uff1a mid = (l + r) >> 1 mid = (l + r + 1) >> 1 \u4e09\u4e2a\u8981\u70b9 \u5224\u65ad mid \u5728\u54ea\u4e00\u8fb9\uff0c\u662f\u5426\u5305\u542b\u5728\u5185 mid \u600e\u4e48\u53d6 \u4e24\u79cd mid = (l + r) >> 1 \uff08\u5411\u4e0b\u53d6\u6574\uff09 (l, mid) (mid + 1, r) mid = (l + r + 1) >> 1 \uff08\u5411\u4e0b\u3001\u4e0a\u53d6\u6574\uff09 (l, mid - 1) (mid, r) //789 sh #include <iostream> using namespace std; const int N = 100000; int arr[N]; int main() { int n, q; scanf(\"%d%d\", &n, &q); for (int i = 0; i < n; i++) { scanf(\"%d\", &arr[i]); } int num, l, r; for (int i = 0; i < q; i++) { scanf(\"%d\", &num); int l = 0, r = n - 1; while (l < r) { int mid = l + r >> 1; if (arr[mid] >= num) { r = mid; } else { l = mid + 1; } } if (arr[l] != num) //\u5373\u6ca1\u6709\u627e\u5230 { cout << \"-1 -1\" << endl; } else { cout << l << \" \";## int l = 0, r = n - 1; while (l < r) { int mid = l + r + 1 >> 1; if (arr[mid] <= num) { l = mid; } else { r = mid - 1; } } cout << l << endl; } } return 0; } \u4e8c\u3001\u6d6e\u70b9\u6570 //790 \u6570\u7684\u4e09\u6b21\u65b9\u6839 #include <iostream> using namespace std; int main(){ double l = -10000, r = 10000; double n; cin >> n; while(r - l > 1e-8){ double mid = (l + r) / 2; if(mid * mid * mid < n){ l = mid; } else{ r = mid; } } printf(\"%lf\", l); return 0; }","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/#_1","text":"\u672c\u8d28\uff1a\u4e0d\u540c\u6027\u8d28\u7684\u8fb9\u754c","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/#_2","text":"\u6b65\u9aa4 \u627e\u4e2d\u95f4\u503c\uff1a mid = (l + r) >> 1 mid = (l + r + 1) >> 1 \u4e09\u4e2a\u8981\u70b9 \u5224\u65ad mid \u5728\u54ea\u4e00\u8fb9\uff0c\u662f\u5426\u5305\u542b\u5728\u5185 mid \u600e\u4e48\u53d6 \u4e24\u79cd mid = (l + r) >> 1 \uff08\u5411\u4e0b\u53d6\u6574\uff09 (l, mid) (mid + 1, r) mid = (l + r + 1) >> 1 \uff08\u5411\u4e0b\u3001\u4e0a\u53d6\u6574\uff09 (l, mid - 1) (mid, r) //789 sh #include <iostream> using namespace std; const int N = 100000; int arr[N]; int main() { int n, q; scanf(\"%d%d\", &n, &q); for (int i = 0; i < n; i++) { scanf(\"%d\", &arr[i]); } int num, l, r; for (int i = 0; i < q; i++) { scanf(\"%d\", &num); int l = 0, r = n - 1; while (l < r) { int mid = l + r >> 1; if (arr[mid] >= num) { r = mid; } else { l = mid + 1; } } if (arr[l] != num) //\u5373\u6ca1\u6709\u627e\u5230 { cout << \"-1 -1\" << endl; } else { cout << l << \" \";## int l = 0, r = n - 1; while (l < r) { int mid = l + r + 1 >> 1; if (arr[mid] <= num) { l = mid; } else { r = mid - 1; } } cout << l << endl; } } return 0; }","title":"\u4e00\u3001\u6574\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/#_3","text":"//790 \u6570\u7684\u4e09\u6b21\u65b9\u6839 #include <iostream> using namespace std; int main(){ double l = -10000, r = 10000; double n; cin >> n; while(r - l > 1e-8){ double mid = (l + r) / 2; if(mid * mid * mid < n){ l = mid; } else{ r = mid; } } printf(\"%lf\", l); return 0; }","title":"\u4e8c\u3001\u6d6e\u70b9\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/","text":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206 \u4e00\u7ef4\u524d\u7f00\u548c \u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff08\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u539f\u6570\u7ec4\uff09\uff0c\u7528\u6765\u5b58\u50a8 i \u8282\u70b9\u524d\u7684\u6240\u6709\u6570\u4e4b\u548c \u53ef\u4ee5\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u83b7\u53d6\u548c\u6216\u8005\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u548c \u4e8c\u7ef4\u524d\u7f00\u548c - \u7531\u4e0a\u56fe\u53ef\u4ee5\u5f97\u5230\uff1a s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j] - \u7531\u8be5\u5f0f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u65b9\u9635\u7684\u548c \u5dee\u5206 \u524d\u7f00\u548c\u7684\u9006\u8fd0\u7b97","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_1","text":"","title":"\u524d\u7f00\u548c\u4e0e\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_2","text":"\u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff08\u6216\u8005\u76f4\u63a5\u4f7f\u7528\u539f\u6570\u7ec4\uff09\uff0c\u7528\u6765\u5b58\u50a8 i \u8282\u70b9\u524d\u7684\u6240\u6709\u6570\u4e4b\u548c \u53ef\u4ee5\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u83b7\u53d6\u548c\u6216\u8005\u67d0\u4e2a\u533a\u95f4\u5185\u7684\u548c","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_3","text":"- \u7531\u4e0a\u56fe\u53ef\u4ee5\u5f97\u5230\uff1a s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j] - \u7531\u8be5\u5f0f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u65b9\u9635\u7684\u548c","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86/#_4","text":"\u524d\u7f00\u548c\u7684\u9006\u8fd0\u7b97","title":"\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/","text":"\u53cc\u6307\u9488\u7b97\u6cd5 \u4e00\u822c\u7ed3\u6784 for(int i = 0,j = 0;i < n;i++){ while(j < i && check(i, j)) j++; //\u6bcf\u9053\u9898\u76ee\u7684\u5177\u4f53\u903b\u8f91 } \u6838\u5fc3\u7528\u9014\uff1a\u4f18\u5316\uff08\u5c06\u53cc\u91cd\u5faa\u73af\u4f18\u5316 O(n^2)->O(n) \uff09 \u4f18\u5316\u65b9\u5f0f\uff1a\u627e\u5355\u8c03\u6027 eg1\uff1a\u8f93\u51fa\u4e00\u53e5\u8bdd\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd #include <iostream> #include <string.h> using namespace std; int main(){ char str[1000]; gets(str); int n = strlen(str); for(int i = 0;i < n;i++){ int j = i; //\u6307\u5411\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd while(j < n && str[j] != ' ') j++; //\u8ba9j\u6307\u9488\u6307\u5411\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd for(int k = i;k < j;k++) cout << str[k]; //\u8f93\u51fa\u5f53\u524d\u5355\u8bcd cout << endl; i = j; //\u8ba9i\u6307\u9488\u6307\u5411\u5355\u8bcd\u4e4b\u95f4\u7684\u7a7a\u683c\uff0c\u6bcf\u6b21\u5faa\u73af\u540e\uff0c\u90fd\u4f1a\u518d\u6b21\u4f7fi\u6307\u9488\u6307\u5411\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd } } \u4e00\u3001799\u6700\u957f\u8fde\u7eed\u4e0d\u91cd\u590d\u5b50\u5e8f\u5217 #include <iostream> using namespace std; const int N = 1e6 + 10; int q[N],s[N]; //s[N]\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u6570\u51fa\u73b0\u7684\u6b21\u6570 int main(){ int n; cin >> n; for(int i = 1;i <= n;i++){ scanf(\"%d\",&q[i]); } int res = 0; for(int i = 1, j = 1;i <= n;i++){ s[q[i]]++; //\u7edf\u8ba1q[i] while(s[q[i]] > 1){ //\u5982\u679cq[i]\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u6570\u662f\u51fa\u73b0\u8fc7\u7684 s[q[j]]--; j++; } res = max(res, i - j + 1); } cout << res; return 0; } \u4e8c\u3001800\u6570\u7ec4\u5143\u7d20\u7684\u76ee\u6807\u548c #include <iostream> using namespace std; const int N = 1e5+10; typedef long long ll; ll A[N],B[N]; int main(){ int n,m,x; cin >> n >> m >> x; for(int i = 0;i < n;i++){ scanf(\"%lld\",&A[i]); } for(int j = 0;j < m;j++){ scanf(\"%lld\",&B[j]); } for(int i = 0, j = m - 1;i < n;i++){ while(A[i] + B[j] > x) j--; if(A[i] + B[j] == x) cout << i << \" \" << j; } return 0; } \u4e09\u30012816\u5224\u65ad\u5b50\u5e8f\u5217 #include <iostream> using namespace std; const int N = 1e5+10; typedef long long ll; ll A[N],B[N]; int main(){ int n,m; cin >> n >> m; int i,j; for(i = 0;i < n;i++) scanf(\"%lld\",&A[i]); for(i = 0;i < m;i++) scanf(\"%lld\",&B[i]); for(i = 0,j = 0;i < n,j<m;j++){ if(B[j] == A[i]) i++; if(i == n) break; } if(i == n) {cout << \"Yes\";} else cout << \"No\"; return 0; }","title":"\u53cc\u6307\u9488\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u53cc\u6307\u9488\u7b97\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#_2","text":"for(int i = 0,j = 0;i < n;i++){ while(j < i && check(i, j)) j++; //\u6bcf\u9053\u9898\u76ee\u7684\u5177\u4f53\u903b\u8f91 }","title":"\u4e00\u822c\u7ed3\u6784"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#on2-on","text":"","title":"\u6838\u5fc3\u7528\u9014\uff1a\u4f18\u5316\uff08\u5c06\u53cc\u91cd\u5faa\u73af\u4f18\u5316O(n^2)-&gt;O(n)\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u4f18\u5316\u65b9\u5f0f\uff1a\u627e\u5355\u8c03\u6027"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#eg1","text":"#include <iostream> #include <string.h> using namespace std; int main(){ char str[1000]; gets(str); int n = strlen(str); for(int i = 0;i < n;i++){ int j = i; //\u6307\u5411\u6bcf\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd while(j < n && str[j] != ' ') j++; //\u8ba9j\u6307\u9488\u6307\u5411\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd for(int k = i;k < j;k++) cout << str[k]; //\u8f93\u51fa\u5f53\u524d\u5355\u8bcd cout << endl; i = j; //\u8ba9i\u6307\u9488\u6307\u5411\u5355\u8bcd\u4e4b\u95f4\u7684\u7a7a\u683c\uff0c\u6bcf\u6b21\u5faa\u73af\u540e\uff0c\u90fd\u4f1a\u518d\u6b21\u4f7fi\u6307\u9488\u6307\u5411\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd } }","title":"eg1\uff1a\u8f93\u51fa\u4e00\u53e5\u8bdd\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#799","text":"#include <iostream> using namespace std; const int N = 1e6 + 10; int q[N],s[N]; //s[N]\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u6570\u51fa\u73b0\u7684\u6b21\u6570 int main(){ int n; cin >> n; for(int i = 1;i <= n;i++){ scanf(\"%d\",&q[i]); } int res = 0; for(int i = 1, j = 1;i <= n;i++){ s[q[i]]++; //\u7edf\u8ba1q[i] while(s[q[i]] > 1){ //\u5982\u679cq[i]\u51fa\u73b0\u6b21\u6570\u5927\u4e8e1\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u6570\u662f\u51fa\u73b0\u8fc7\u7684 s[q[j]]--; j++; } res = max(res, i - j + 1); } cout << res; return 0; }","title":"\u4e00\u3001799\u6700\u957f\u8fde\u7eed\u4e0d\u91cd\u590d\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#800","text":"#include <iostream> using namespace std; const int N = 1e5+10; typedef long long ll; ll A[N],B[N]; int main(){ int n,m,x; cin >> n >> m >> x; for(int i = 0;i < n;i++){ scanf(\"%lld\",&A[i]); } for(int j = 0;j < m;j++){ scanf(\"%lld\",&B[j]); } for(int i = 0, j = m - 1;i < n;i++){ while(A[i] + B[j] > x) j--; if(A[i] + B[j] == x) cout << i << \" \" << j; } return 0; }","title":"\u4e8c\u3001800\u6570\u7ec4\u5143\u7d20\u7684\u76ee\u6807\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88%E7%AE%97%E6%B3%95/#2816","text":"#include <iostream> using namespace std; const int N = 1e5+10; typedef long long ll; ll A[N],B[N]; int main(){ int n,m; cin >> n >> m; int i,j; for(i = 0;i < n;i++) scanf(\"%lld\",&A[i]); for(i = 0;i < m;i++) scanf(\"%lld\",&B[i]); for(i = 0,j = 0;i < n,j<m;j++){ if(B[j] == A[i]) i++; if(i == n) break; } if(i == n) {cout << \"Yes\";} else cout << \"No\"; return 0; }","title":"\u4e09\u30012816\u5224\u65ad\u5b50\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f \u4e00\u3001\u5feb\u901f\u6392\u5e8f \u6838\u5fc3\u601d\u60f3\u2014\u2014\u5206\u6cbb\u6cd5 ^0ea077 \u6b65\u9aa4 \u786e\u5b9a\u5206\u754c\u70b9\uff1a q[l] \u3001 q[(l+r)/2] \u3001 q[r] \u3001\u968f\u673a \u8c03\u6574\u533a\u95f4\uff1a\u5206\u4e3a\u4e24\u4efd\uff0c\u5de6\u8fb9\u5927\uff08\u5c0f\uff09\uff0c\u53f3\u8fb9\u5c0f\uff08\u5927\uff09 \u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4 \u8c03\u6574\u533a\u95f4\uff1a \u53cc\u6307\u9488\uff08\u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u4e24\u8fb9\uff0c\u5f80\u4e2d\u95f4\u8d70\uff0c\u76f4\u5230\u76f8\u9047\uff09 #include <iostream> using namespace std; const int N = 1e6 + 10; int q[N]; int n; void qsort(int q[], int l, int r) { if (l >= r) return; int s = q[l + r >> 1], i = l - 1, j = r + 1; while (i < j) { do i++; while (q[i] < s); do j--; while (q[j] > s); if (i < j) swap(q[i], q[j]); } qsort(q, l, j); qsort(q, j + 1, r); } int main() { int n; scanf(\"%d\", &n); for (int i = 0; i < n; i++) scanf(\"%d\", &q[i]); qsort(q, 0, n - 1); for (int i = 0; i < n; i++) printf(\"%d \", q[i]); return 0; } \u4e8c\u3001\u5f52\u5e76\u6392\u5e8f \u6838\u5fc3\u601d\u60f3\u2014\u2014\u5206\u6cbb \u6b65\u9aa4 \u627e\u5206\u754c\u70b9\uff1a (l + r)/2 \u9012\u5f52\u6392\u5e8f\u5de6\u8fb9\u53f3\u8fb9 \u5f52\u5e76\u2014\u2014\u5408\u4e8c\u4e3a\u4e00 #include <iostream> using namespace std; const int N = 1000010; int n; int q[N], temp[N]; void merge_sort(int q[], int l, int r) { if (l >= r) { return; } int mid = (l + r) >> 1; merge_sort(q, l, mid), merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i <= mid && j <= r) { if (q[i] <= q[j]) { temp[k++] = q[i++]; } else { temp[k++] = q[j++]; } } while (i <= mid) { temp[k++] = q[i++]; } while (j <= r) { temp[k++] = q[j++]; } for (i = l, j = 0; i <= r; i++, j++) { q[i] = temp[j]; } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &q[i]); } merge_sort(q, 0, n - 1); for (int i = 0; i < n; i++) { printf(\"%d \", q[i]); } return 0; }","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_1","text":"","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_2","text":"\u6838\u5fc3\u601d\u60f3\u2014\u2014\u5206\u6cbb\u6cd5 ^0ea077 \u6b65\u9aa4 \u786e\u5b9a\u5206\u754c\u70b9\uff1a q[l] \u3001 q[(l+r)/2] \u3001 q[r] \u3001\u968f\u673a \u8c03\u6574\u533a\u95f4\uff1a\u5206\u4e3a\u4e24\u4efd\uff0c\u5de6\u8fb9\u5927\uff08\u5c0f\uff09\uff0c\u53f3\u8fb9\u5c0f\uff08\u5927\uff09 \u9012\u5f52\u5904\u7406\u5de6\u53f3\u4e24\u8fb9\u7684\u533a\u95f4 \u8c03\u6574\u533a\u95f4\uff1a \u53cc\u6307\u9488\uff08\u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u4e24\u8fb9\uff0c\u5f80\u4e2d\u95f4\u8d70\uff0c\u76f4\u5230\u76f8\u9047\uff09 #include <iostream> using namespace std; const int N = 1e6 + 10; int q[N]; int n; void qsort(int q[], int l, int r) { if (l >= r) return; int s = q[l + r >> 1], i = l - 1, j = r + 1; while (i < j) { do i++; while (q[i] < s); do j--; while (q[j] > s); if (i < j) swap(q[i], q[j]); } qsort(q, l, j); qsort(q, j + 1, r); } int main() { int n; scanf(\"%d\", &n); for (int i = 0; i < n; i++) scanf(\"%d\", &q[i]); qsort(q, 0, n - 1); for (int i = 0; i < n; i++) printf(\"%d \", q[i]); return 0; }","title":"\u4e00\u3001\u5feb\u901f\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/#_3","text":"\u6838\u5fc3\u601d\u60f3\u2014\u2014\u5206\u6cbb \u6b65\u9aa4 \u627e\u5206\u754c\u70b9\uff1a (l + r)/2 \u9012\u5f52\u6392\u5e8f\u5de6\u8fb9\u53f3\u8fb9 \u5f52\u5e76\u2014\u2014\u5408\u4e8c\u4e3a\u4e00 #include <iostream> using namespace std; const int N = 1000010; int n; int q[N], temp[N]; void merge_sort(int q[], int l, int r) { if (l >= r) { return; } int mid = (l + r) >> 1; merge_sort(q, l, mid), merge_sort(q, mid + 1, r); int k = 0, i = l, j = mid + 1; while (i <= mid && j <= r) { if (q[i] <= q[j]) { temp[k++] = q[i++]; } else { temp[k++] = q[j++]; } } while (i <= mid) { temp[k++] = q[i++]; } while (j <= r) { temp[k++] = q[j++]; } for (i = l, j = 0; i <= r; i++, j++) { q[i] = temp[j]; } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; i++) { scanf(\"%d\", &q[i]); } merge_sort(q, 0, n - 1); for (int i = 0; i < n; i++) { printf(\"%d \", q[i]); } return 0; }","title":"\u4e8c\u3001\u5f52\u5e76\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/","text":"\u6574\u6570\u79bb\u6563\u5316 \u4e00\u3001\u4e24\u4e2a\u95ee\u9898\uff1a \u6570\u7ec4\u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\uff1a \u53bb\u91cd \u5982\u4f55\u7b97\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u79bb\u6563\u5316\uff08\u6620\u5c04\uff09\u540e\u662f\u591a\u5c11\uff08\u4e8c\u5206) \u4e09\u3001\u6a21\u677f vector<int> alls; //\u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c sort(alls.begin(), alls.end()); //\u5c06\u6240\u6709\u7684\u503c\u6392\u5e8f alls.erase(unique(alls.begin(),alls.end()),alls.end()); //\u53bb\u9664\u91cd\u590d\u5143\u7d20 //\u4e8c\u5206\u6c42\u51fax\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u7684\u503c int find(int x){ //\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e int l = 0, r = alls.size()-1; while(l < r){ int mid = l + r >> 1; if(alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; } EG\uff1a802\u533a\u95f4\u548c \u5047\u5b9a\u6709\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u6570\u8f74\uff0c\u6570\u8f74\u4e0a\u6bcf\u4e2a\u5750\u6807\u4e0a\u7684\u6570\u90fd\u662f 0\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u9996\u5148\u8fdb\u884c n \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e00\u4f4d\u7f6e x \u4e0a\u7684\u6570\u52a0 c\u3002 \u63a5\u4e0b\u6765\uff0c\u8fdb\u884c m \u6b21\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u4f60\u9700\u8981\u6c42\u51fa\u5728\u533a\u95f4 [l,r][l,r] \u4e4b\u95f4\u7684\u6240\u6709\u6570\u7684\u548c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 x \u548c c\u3002 \u518d\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\u3002 \u8f93\u51fa\u683c\u5f0f \u5171 m \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u8be2\u95ee\u4e2d\u6240\u6c42\u7684\u533a\u95f4\u5185\u6570\u5b57\u548c\u3002 \u6570\u636e\u8303\u56f4 \u2212109\u2264x\u2264109\u2212109\u2264x\u2264109, 1\u2264n,m\u22641051\u2264n,m\u2264105, \u2212109\u2264l\u2264r\u2264109\u2212109\u2264l\u2264r\u2264109, \u221210000\u2264c\u226410000 #include <iostream> #include <vector> #include <algorithm> using namespace std; typedef pair<int, int> PII; const int N = 300010; int n, m; int a[N], s[N]; vector<int> alls; //\u5b58\u50a8\u6240\u6709\u6709\u9700\u8981\u7684\u4f4d\u7f6e vector<PII> add, query; int find(int x) { int l = 0, r = alls.size() - 1; while (l < r) { int mid = l + r >> 1; if (alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; } int main() { cin >> n >> m; for (int i = 0; i < n; i ++ ) { int x, c; cin >> x >> c; add.push_back({x, c}); alls.push_back(x); } for (int i = 0; i < m; i ++ ) { int l, r; cin >> l >> r; query.push_back({l, r}); alls.push_back(l); alls.push_back(r); } // \u53bb\u91cd sort(alls.begin(), alls.end()); alls.erase(unique(alls.begin(), alls.end()), alls.end()); // \u5904\u7406\u63d2\u5165 for (auto item : add) { int x = find(item.first); a[x] += item.second; } // \u9884\u5904\u7406\u524d\u7f00\u548c for (int i = 1; i <= alls.size(); i ++ ) s[i] = s[i - 1] + a[i]; // \u5904\u7406\u8be2\u95ee for (auto item : query) { int l = find(item.first), r = find(item.second); cout << s[r] - s[l - 1] << endl; } return 0; } \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/40105/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u6574\u6570\u79bb\u6563\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_1","text":"","title":"\u6574\u6570\u79bb\u6563\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_2","text":"\u6570\u7ec4\u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\uff1a \u53bb\u91cd \u5982\u4f55\u7b97\u51fa\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u503c\u79bb\u6563\u5316\uff08\u6620\u5c04\uff09\u540e\u662f\u591a\u5c11\uff08\u4e8c\u5206)","title":"\u4e00\u3001\u4e24\u4e2a\u95ee\u9898\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_3","text":"vector<int> alls; //\u5b58\u50a8\u6240\u6709\u5f85\u79bb\u6563\u5316\u7684\u503c sort(alls.begin(), alls.end()); //\u5c06\u6240\u6709\u7684\u503c\u6392\u5e8f alls.erase(unique(alls.begin(),alls.end()),alls.end()); //\u53bb\u9664\u91cd\u590d\u5143\u7d20 //\u4e8c\u5206\u6c42\u51fax\u5bf9\u5e94\u7684\u79bb\u6563\u5316\u7684\u503c int find(int x){ //\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ex\u7684\u4f4d\u7f6e int l = 0, r = alls.size()-1; while(l < r){ int mid = l + r >> 1; if(alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; }","title":"\u4e09\u3001\u6a21\u677f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#eg802","text":"\u5047\u5b9a\u6709\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u6570\u8f74\uff0c\u6570\u8f74\u4e0a\u6bcf\u4e2a\u5750\u6807\u4e0a\u7684\u6570\u90fd\u662f 0\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u9996\u5148\u8fdb\u884c n \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5c06\u67d0\u4e00\u4f4d\u7f6e x \u4e0a\u7684\u6570\u52a0 c\u3002 \u63a5\u4e0b\u6765\uff0c\u8fdb\u884c m \u6b21\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\uff0c\u4f60\u9700\u8981\u6c42\u51fa\u5728\u533a\u95f4 [l,r][l,r] \u4e4b\u95f4\u7684\u6240\u6709\u6570\u7684\u548c\u3002","title":"EG\uff1a802\u533a\u95f4\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_4","text":"\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c m\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 x \u548c c\u3002 \u518d\u63a5\u4e0b\u6765 m \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 l \u548c r\u3002","title":"\u8f93\u5165\u683c\u5f0f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_5","text":"\u5171 m \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u8be2\u95ee\u4e2d\u6240\u6c42\u7684\u533a\u95f4\u5185\u6570\u5b57\u548c\u3002","title":"\u8f93\u51fa\u683c\u5f0f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%95%B4%E6%95%B0%E7%A6%BB%E6%95%A3%E5%8C%96/#_6","text":"\u2212109\u2264x\u2264109\u2212109\u2264x\u2264109, 1\u2264n,m\u22641051\u2264n,m\u2264105, \u2212109\u2264l\u2264r\u2264109\u2212109\u2264l\u2264r\u2264109, \u221210000\u2264c\u226410000 #include <iostream> #include <vector> #include <algorithm> using namespace std; typedef pair<int, int> PII; const int N = 300010; int n, m; int a[N], s[N]; vector<int> alls; //\u5b58\u50a8\u6240\u6709\u6709\u9700\u8981\u7684\u4f4d\u7f6e vector<PII> add, query; int find(int x) { int l = 0, r = alls.size() - 1; while (l < r) { int mid = l + r >> 1; if (alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; } int main() { cin >> n >> m; for (int i = 0; i < n; i ++ ) { int x, c; cin >> x >> c; add.push_back({x, c}); alls.push_back(x); } for (int i = 0; i < m; i ++ ) { int l, r; cin >> l >> r; query.push_back({l, r}); alls.push_back(l); alls.push_back(r); } // \u53bb\u91cd sort(alls.begin(), alls.end()); alls.erase(unique(alls.begin(), alls.end()), alls.end()); // \u5904\u7406\u63d2\u5165 for (auto item : add) { int x = find(item.first); a[x] += item.second; } // \u9884\u5904\u7406\u524d\u7f00\u548c for (int i = 1; i <= alls.size(); i ++ ) s[i] = s[i - 1] + a[i]; // \u5904\u7406\u8be2\u95ee for (auto item : query) { int l = find(item.first), r = find(item.second); cout << s[r] - s[l - 1] << endl; } return 0; } \u4f5c\u8005\uff1ayxc \u94fe\u63a5\uff1ahttps://www.acwing.com/activity/content/code/content/40105/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u6570\u636e\u8303\u56f4"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/","text":"\u9ad8\u7cbe\u5ea6\u8ba1\u7b97 \u4e00\u3001\u9ad8\u7cbe\u5ea6\u52a0\u6cd5(A+B) \u4f4d\u6570 10^6\uff08\u5c06\u6bcf\u4e00\u4f4d\u5b58\u5230\u6570\u7ec4\u4e2d\uff09 \u6570\u7ec4\u4e2d\u7684\u987a\u5e8f\uff1a\u4e2a\u5341\u767e\u5343\u2026\u2026 \u8fdb\u4f4d\u7684\u5904\u7406\u65b9\u5f0f\uff1a\u5b9a\u4e49\u4e00\u4e2a t #include <iostream> #include <vector> #include <cstring> using namespace std; vector<int> add(vector<int> &A, vector<int> &B){ vector<int> C; int t = 0; for(long unsigned int i = 0;i < A.size() || i < B.size();i++){ if(i < A.size()) t += A[i]; if(i < B.size()) t += B[i]; C.push_back(t%10); t/=10; } if(t) C.push_back(1); return C; } int main(){ string a,b; vector<int> A,B; cin >> a >> b; for(int i = a.size() - 1 ;i >= 0 ; i--) A.push_back(a[i] - '0'); for(int i = b.size() - 1 ; i >= 0;i--) B.push_back(b[i] - '0'); vector<int> C = add(A,B); for(int i = C.size() - 1;i >= 0;i--) printf(\"%d\",C[i]); return 0; } \u4e8c\u3001\u9ad8\u7cbe\u5ea6\u51cf\u6cd5(A-B) \u4f4d\u6570 10^6 \u4e09\u3001\u9ad8\u7cbe\u5ea6\u4e58\u6cd5(A*B) A\u4f4d\u657010^6\uff0cB<=10000 \u56db\u3001\u9ad8\u7cbe\u5ea6\u9664\u6cd5(A/B)","title":"\u9ad8\u7cbe\u5ea6\u8ba1\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/#_1","text":"","title":"\u9ad8\u7cbe\u5ea6\u8ba1\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/#ab","text":"\u4f4d\u6570 10^6\uff08\u5c06\u6bcf\u4e00\u4f4d\u5b58\u5230\u6570\u7ec4\u4e2d\uff09 \u6570\u7ec4\u4e2d\u7684\u987a\u5e8f\uff1a\u4e2a\u5341\u767e\u5343\u2026\u2026 \u8fdb\u4f4d\u7684\u5904\u7406\u65b9\u5f0f\uff1a\u5b9a\u4e49\u4e00\u4e2a t #include <iostream> #include <vector> #include <cstring> using namespace std; vector<int> add(vector<int> &A, vector<int> &B){ vector<int> C; int t = 0; for(long unsigned int i = 0;i < A.size() || i < B.size();i++){ if(i < A.size()) t += A[i]; if(i < B.size()) t += B[i]; C.push_back(t%10); t/=10; } if(t) C.push_back(1); return C; } int main(){ string a,b; vector<int> A,B; cin >> a >> b; for(int i = a.size() - 1 ;i >= 0 ; i--) A.push_back(a[i] - '0'); for(int i = b.size() - 1 ; i >= 0;i--) B.push_back(b[i] - '0'); vector<int> C = add(A,B); for(int i = C.size() - 1;i >= 0;i--) printf(\"%d\",C[i]); return 0; }","title":"\u4e00\u3001\u9ad8\u7cbe\u5ea6\u52a0\u6cd5(A+B)"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/#a-b","text":"\u4f4d\u6570 10^6","title":"\u4e8c\u3001\u9ad8\u7cbe\u5ea6\u51cf\u6cd5(A-B)"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/#ab_1","text":"A\u4f4d\u657010^6\uff0cB<=10000","title":"\u4e09\u3001\u9ad8\u7cbe\u5ea6\u4e58\u6cd5(A*B)"},{"location":"%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/#ab_2","text":"","title":"\u56db\u3001\u9ad8\u7cbe\u5ea6\u9664\u6cd5(A/B)"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Bellman-Ford/","text":"","title":"Bellman Ford"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/B%E6%A0%91/","text":"B\u6811","title":"B\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/B%E6%A0%91/#b","text":"","title":"B\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/DFS%E4%B8%8EBFS/","text":"DFS\u4e0eBFS \u7531\u6570\u636e\u7ed3\u6784\u7684\u89c6\u89d2 DFS\uff1astack BFS\uff1aqueue \u7a7a\u95f4 DFS\uff1a$O(h)$ BFS: $O(2^h)$ BFS\u53ef\u641c\u6700\u77ed\u8def\u5f84 DFS \u56de\u6eaf\uff1a\u5229\u7528\u9012\u5f52\u6808\uff08\u9012\u5f52\u672c\u8eab\u5c31\u662f\u57fa\u4e8e\u65b9\u6cd5\u8c03\u7528\u6808\u6765\u5b9e\u73b0\uff09 \u5168\u6392\u5217 #include <iostream> using namespace std; const int N = 10; int path[N]; //\u5b58\u50a8\u8def\u5f84 int n; bool st[N]; void dfs(int u){ //u\u7528\u4e8e\u8bb0\u5f55\u6b65\u6570 if(u == n){ //\u5982\u679c\u6b65\u6570\u7b49\u4e8en for(int i = 0;i < n;i++) printf(\"%d \", path[i]); //\u6253\u5370 puts(\"\"); return; } for(int i = 1;i <= n;i++){ if(!st[i]){ path[u] = i; //\u547d\u540d\u8def\u5f84\u70b9 st[i] = true; //\u6807\u8bb0\u4f7f\u7528\u8fc7\u7684\u6570\u5b57 dfs(u + 1); //\u4e0b\u4e00\u6b65 st[i] = false; //\u6062\u590d\u6807\u8bb0 } } } int main(){ cin >> n; dfs(0); return 0; } \u526a\u679d\uff1a\u63d0\u524d\u5224\u65ad\u5f53\u524d\u60c5\u51b5\u662f\u5426\u6210\u7acb\uff0c\u53ca\u65f6\u6b62\u635f n\u7687\u540e //\u7b2c\u4e00\u79cd\u641c\u7d22\u987a\u5e8f #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; int chess[N]; bool col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int u){ if(u == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ for(int j = 1;j <= n;j++){ if(j == chess[i]) printf(\"Q\"); else printf(\".\"); } puts(\"\"); } puts(\"\"); } for(int i = 1;i <= n;i++){ if(!(col[i]) && !(mp[u + i]) && !(np[n - u + i])){ chess[u] = i; col[i] = mp[u + i] = np[n - u + i] = true; //\u6807\u8bb0 dfs(u+1); col[i] = mp[u + i] = np[n - u + i] = false; //\u6062\u590d\u6807\u8bb0 } } } int main(){ cin >> n; dfs(0); return 0; } //\u7b2c\u4e8c\u79cd\u89e3\u6cd5 #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; char chess[N][N]; bool row[N], col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int x, int y, int cnt){ if(y == n){ y = 0; x ++; } if(x == n){ if(cnt == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ puts(chess[i]); } puts(\"\"); } return; } if(!row[x] && !(col[y]) && !(mp[x + y]) && !(np[x - y + n])){ chess[x][y] = 'Q'; row[x] = col[y] = mp[x + y] = np[x - y + n] = true; //\u6807\u8bb0 dfs(x, y + 1, cnt + 1); row[x] = col[y] = mp[x + y] = np[x - y + n] = false; chess[x][y] = '.'; } dfs(x, y + 1, cnt); } int main(){ cin >> n; for(int i = 0;i < n;i++){ for(int j = 0;j < n;j++){ chess[i][j] = '.'; } } dfs(0, 0, 0); return 0; } \u4f7f\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a void nQueenModified(int row, int cur, int llimit, int rlimit){ if(row > n){ //\u653e\u7f6e\u5b8c\u6bd5\u540e\uff0c\u6253\u5370\u68cb\u76d8 printChess(); cnt ++; return; } int ban = cur | llimit | rlimit; //\u6c42\u89e3\u5f53\u524d\u884c\u4e0d\u53ef\u653e\u7f6e\u7684\u5730\u65b9 for(int i = 1;i <= n;i++){ if(ban & (1 << i)) continue; //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u53ef\u653e\u7f6e\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af chess[row][i] = 'Q'; //\u653e\u7f6e\u7687\u540e //\u6839\u636e\u653e\u7f6e\u60c5\u51b5\uff0c\u8fdb\u5165\u4e0b\u4e00\u884c\u8fdb\u884c\u7687\u540e\u7684\u653e\u7f6e nQueenModified(row + 1, cur | (1 << i), (llimit | (1 << i)) << 1, (rlimit | (1 << i)) >> 1); chess[row][i] = '.'; //\u6062\u590d\u72b6\u6001 } } BFS \u5e94\u7528\uff1a\u6700\u77ed\u8def\uff08\u8fb9\u6743\u4e3a1\uff09 \u91cd\u70b9\uff1a \u961f\u5217 \u8ddd\u79bb\u8bb0\u5f55 \u4e00\u822c\u6709\uff1a d[N] \u7528\u4e8e\u50a8\u5b58\u6b65\u6570 \u6a21\u677f queue <\u2014\u2014 \u521d\u59cb\u5316 while(!queue.empty()){ queue.pop(); queue.push(); } \u8d70\u8ff7\u5bab\u95ee\u9898 #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; char chess[N][N]; bool row[N], col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int x, int y, int cnt){ if(y == n){ y = 0; x ++; } if(x == n){ if(cnt == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ puts(chess[i]); } puts(\"\"); } return; } if(!row[x] && !(col[y]) && !(mp[x + y]) && !(np[x - y + n])){ chess[x][y] = 'Q'; row[x] = col[y] = mp[x + y] = np[x - y + n] = true; //\u6807\u8bb0 dfs(x, y + 1, cnt + 1); row[x] = col[y] = mp[x + y] = np[x - y + n] = false; chess[x][y] = '.'; } dfs(x, y + 1, cnt); } int main(){ cin >> n; for(int i = 0;i < n;i++){ for(int j = 0;j < n;j++){ chess[i][j] = '.'; } } dfs(0, 0, 0); return 0; } \u516b\u6570\u7801 \u96be\u70b9\uff1a \u72b6\u6001\u8868\u793a\u590d\u6742\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32\u8bb0\u5f55\uff0c( queue<string> ) \u5982\u4f55\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u72b6\u6001\u7684\u8ddd\u79bb\uff1a\u54c8\u5e0c\u8868 unordered_map<string,int> dst #include <iostream> #include <cstring> #include <algorithm> #include <queue> #include <unordered_map> using namespace std; queue<string> q; unordered_map<string, int> dst; string start; int bfs(string start){ q.push(start); dst[start] = 0; string end = \"12345678x\"; int d[4] = {1, -1, 3, -3}; //\u8fd9\u6837\u8868\u793a\u9519\u8bef\uff0c\u53ef\u80fd\u51fa\u73b0\u8de8\u884c\u7684\u60c5\u51b5 int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1}; while(q.size()){ string t = q.front(); q.pop(); if(t == end) return dst[t]; int step = dst[t]; int k = t.find('x'); //\u8fd4\u56dex\u7684\u4e0b\u6807 int x = k / 3, y = k % 3; for(int i = 0;i < 4;i++){ int a = x + dx[i], b = y + dy[i]; if(a >= 0 && a < 3 && b >= 0 && b < 3){ swap(t[k], t[a * 3 + b]); if(!dst.count(t)){ dst[t] = step + 1; q.push(t); } swap(t[k], t[a * 3 + b]); //\u56de\u590d\u72b6\u6001\uff0c\u907f\u514d\u5bf9\u4e0b\u4e00\u4e2a\u72b6\u6001\u4ea7\u751f\u5f71\u54cd } } } return -1; } int main(){ for(int i = 0;i < 9;i++){ char c; cin >> c; start += c; } //cout << start << endl; cout << bfs(start) << endl; return 0; }","title":"DFS\u4e0eBFS"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/DFS%E4%B8%8EBFS/#dfsbfs","text":"\u7531\u6570\u636e\u7ed3\u6784\u7684\u89c6\u89d2 DFS\uff1astack BFS\uff1aqueue \u7a7a\u95f4 DFS\uff1a$O(h)$ BFS: $O(2^h)$ BFS\u53ef\u641c\u6700\u77ed\u8def\u5f84","title":"DFS\u4e0eBFS"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/DFS%E4%B8%8EBFS/#dfs","text":"\u56de\u6eaf\uff1a\u5229\u7528\u9012\u5f52\u6808\uff08\u9012\u5f52\u672c\u8eab\u5c31\u662f\u57fa\u4e8e\u65b9\u6cd5\u8c03\u7528\u6808\u6765\u5b9e\u73b0\uff09 \u5168\u6392\u5217 #include <iostream> using namespace std; const int N = 10; int path[N]; //\u5b58\u50a8\u8def\u5f84 int n; bool st[N]; void dfs(int u){ //u\u7528\u4e8e\u8bb0\u5f55\u6b65\u6570 if(u == n){ //\u5982\u679c\u6b65\u6570\u7b49\u4e8en for(int i = 0;i < n;i++) printf(\"%d \", path[i]); //\u6253\u5370 puts(\"\"); return; } for(int i = 1;i <= n;i++){ if(!st[i]){ path[u] = i; //\u547d\u540d\u8def\u5f84\u70b9 st[i] = true; //\u6807\u8bb0\u4f7f\u7528\u8fc7\u7684\u6570\u5b57 dfs(u + 1); //\u4e0b\u4e00\u6b65 st[i] = false; //\u6062\u590d\u6807\u8bb0 } } } int main(){ cin >> n; dfs(0); return 0; } \u526a\u679d\uff1a\u63d0\u524d\u5224\u65ad\u5f53\u524d\u60c5\u51b5\u662f\u5426\u6210\u7acb\uff0c\u53ca\u65f6\u6b62\u635f n\u7687\u540e //\u7b2c\u4e00\u79cd\u641c\u7d22\u987a\u5e8f #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; int chess[N]; bool col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int u){ if(u == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ for(int j = 1;j <= n;j++){ if(j == chess[i]) printf(\"Q\"); else printf(\".\"); } puts(\"\"); } puts(\"\"); } for(int i = 1;i <= n;i++){ if(!(col[i]) && !(mp[u + i]) && !(np[n - u + i])){ chess[u] = i; col[i] = mp[u + i] = np[n - u + i] = true; //\u6807\u8bb0 dfs(u+1); col[i] = mp[u + i] = np[n - u + i] = false; //\u6062\u590d\u6807\u8bb0 } } } int main(){ cin >> n; dfs(0); return 0; } //\u7b2c\u4e8c\u79cd\u89e3\u6cd5 #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; char chess[N][N]; bool row[N], col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int x, int y, int cnt){ if(y == n){ y = 0; x ++; } if(x == n){ if(cnt == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ puts(chess[i]); } puts(\"\"); } return; } if(!row[x] && !(col[y]) && !(mp[x + y]) && !(np[x - y + n])){ chess[x][y] = 'Q'; row[x] = col[y] = mp[x + y] = np[x - y + n] = true; //\u6807\u8bb0 dfs(x, y + 1, cnt + 1); row[x] = col[y] = mp[x + y] = np[x - y + n] = false; chess[x][y] = '.'; } dfs(x, y + 1, cnt); } int main(){ cin >> n; for(int i = 0;i < n;i++){ for(int j = 0;j < n;j++){ chess[i][j] = '.'; } } dfs(0, 0, 0); return 0; } \u4f7f\u7528\u4f4d\u8fd0\u7b97\u4f18\u5316\uff1a void nQueenModified(int row, int cur, int llimit, int rlimit){ if(row > n){ //\u653e\u7f6e\u5b8c\u6bd5\u540e\uff0c\u6253\u5370\u68cb\u76d8 printChess(); cnt ++; return; } int ban = cur | llimit | rlimit; //\u6c42\u89e3\u5f53\u524d\u884c\u4e0d\u53ef\u653e\u7f6e\u7684\u5730\u65b9 for(int i = 1;i <= n;i++){ if(ban & (1 << i)) continue; //\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u53ef\u653e\u7f6e\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u8f6e\u5faa\u73af chess[row][i] = 'Q'; //\u653e\u7f6e\u7687\u540e //\u6839\u636e\u653e\u7f6e\u60c5\u51b5\uff0c\u8fdb\u5165\u4e0b\u4e00\u884c\u8fdb\u884c\u7687\u540e\u7684\u653e\u7f6e nQueenModified(row + 1, cur | (1 << i), (llimit | (1 << i)) << 1, (rlimit | (1 << i)) >> 1); chess[row][i] = '.'; //\u6062\u590d\u72b6\u6001 } }","title":"DFS"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/DFS%E4%B8%8EBFS/#bfs","text":"\u5e94\u7528\uff1a\u6700\u77ed\u8def\uff08\u8fb9\u6743\u4e3a1\uff09 \u91cd\u70b9\uff1a \u961f\u5217 \u8ddd\u79bb\u8bb0\u5f55 \u4e00\u822c\u6709\uff1a d[N] \u7528\u4e8e\u50a8\u5b58\u6b65\u6570 \u6a21\u677f queue <\u2014\u2014 \u521d\u59cb\u5316 while(!queue.empty()){ queue.pop(); queue.push(); } \u8d70\u8ff7\u5bab\u95ee\u9898 #include <iostream> using namespace std; const int N = 20; //\u5bf9\u89d2\u7ebf\u6570\u91cf\u662f\u4e24\u500d int n; char chess[N][N]; bool row[N], col[N], mp[N], np[N]; //\u884c\uff0c\u4e3b\u5bf9\u89d2\u7ebf\uff0c\u526f\u5bf9\u89d2\u7ebf void dfs(int x, int y, int cnt){ if(y == n){ y = 0; x ++; } if(x == n){ if(cnt == n){ //\u6253\u5370 for(int i = 0;i < n;i++){ puts(chess[i]); } puts(\"\"); } return; } if(!row[x] && !(col[y]) && !(mp[x + y]) && !(np[x - y + n])){ chess[x][y] = 'Q'; row[x] = col[y] = mp[x + y] = np[x - y + n] = true; //\u6807\u8bb0 dfs(x, y + 1, cnt + 1); row[x] = col[y] = mp[x + y] = np[x - y + n] = false; chess[x][y] = '.'; } dfs(x, y + 1, cnt); } int main(){ cin >> n; for(int i = 0;i < n;i++){ for(int j = 0;j < n;j++){ chess[i][j] = '.'; } } dfs(0, 0, 0); return 0; } \u516b\u6570\u7801 \u96be\u70b9\uff1a \u72b6\u6001\u8868\u793a\u590d\u6742\uff1a\u4f7f\u7528\u5b57\u7b26\u4e32\u8bb0\u5f55\uff0c( queue<string> ) \u5982\u4f55\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u72b6\u6001\u7684\u8ddd\u79bb\uff1a\u54c8\u5e0c\u8868 unordered_map<string,int> dst #include <iostream> #include <cstring> #include <algorithm> #include <queue> #include <unordered_map> using namespace std; queue<string> q; unordered_map<string, int> dst; string start; int bfs(string start){ q.push(start); dst[start] = 0; string end = \"12345678x\"; int d[4] = {1, -1, 3, -3}; //\u8fd9\u6837\u8868\u793a\u9519\u8bef\uff0c\u53ef\u80fd\u51fa\u73b0\u8de8\u884c\u7684\u60c5\u51b5 int dx[4] = {-1, 0, 1, 0}; int dy[4] = {0, 1, 0, -1}; while(q.size()){ string t = q.front(); q.pop(); if(t == end) return dst[t]; int step = dst[t]; int k = t.find('x'); //\u8fd4\u56dex\u7684\u4e0b\u6807 int x = k / 3, y = k % 3; for(int i = 0;i < 4;i++){ int a = x + dx[i], b = y + dy[i]; if(a >= 0 && a < 3 && b >= 0 && b < 3){ swap(t[k], t[a * 3 + b]); if(!dst.count(t)){ dst[t] = step + 1; q.push(t); } swap(t[k], t[a * 3 + b]); //\u56de\u590d\u72b6\u6001\uff0c\u907f\u514d\u5bf9\u4e0b\u4e00\u4e2a\u72b6\u6001\u4ea7\u751f\u5f71\u54cd } } } return -1; } int main(){ for(int i = 0;i < 9;i++){ char c; cin >> c; start += c; } //cout << start << endl; cout << bfs(start) << endl; return 0; }","title":"BFS"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/","text":"Dijkstra Dijkstra \u7ed9\u5b9a\u6709\u5411\u5e26\u6743\u56fe\uff0c\u4e14\u5176\u4e2d\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u4e3a\u975e\u8d1f\u5b9e\u6570\uff0c\u8ba1\u7b97\u4ece \u6e90\u70b9 \u5230\u5176\u4ed6\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 $S$\u4e3a\u4ee5\u786e\u5b9a\u6700\u77ed\u8def\u5f84\u7684\u96c6\u5408\uff0c\u5219$V-S$\u4e3a\u6700\u77ed\u8def\u5f84\u672a\u786e\u5b9a\u7684\u96c6\u5408 - \u5b9e\u8d28\uff1a\u8d2a\u5fc3\u7b97\u6cd5 - \u7b56\u7565\uff1a\u9009\u62e9\u7279\u6b8a\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u8def\u5f84\uff0c\u5c06\u5176\u8fde\u63a5\u7684$V-S$\u4e2d\u7684\u9876\u70b9\u52a0\u5165\u96c6\u5408$S$\uff0c\u540c\u65f6\u66f4\u65b0\u6570\u7ec4$dist[]$\u3002\u5f53$S$\u4e2d\u5305\u542b\u6240\u6709\u9876\u70b9\u65f6\uff0c\u4ece\u6e90\u70b9\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5168\u90e8\u88ab\u627e\u5230 \u7b97\u6cd5\u6b65\u9aa4 \u6570\u636e\u7ed3\u6784 \uff1a\u8bbe\u7f6e\u5e26\u6743\u90bb\u63a5\u77e9\u9635$G.Edge[i][j] = w$\uff0c\u5982\u679c\u975e\u90bb\u63a5\uff0c\u5219\u4ee4$G.Edge[i][j] = \\infty$\uff0c\u91c7\u7528\u4e00\u7ef4\u6570\u7ec4$dist[i]$\u6765\u8bb0\u5f55\u4ece\u6e90\u70b9\u5230\u9876\u70b9$i$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u91c7\u7528\u4e00\u7ef4\u6570\u7ec4$p[i]$\u6765\u8bb0\u5f55\u6700\u77ed\u8def\u5f84\u4e0a$i$\u9876\u70b9\u7684\u524d\u9a71 \u521d\u59cb\u5316 \uff1a\u8bbe\u7f6e$u$\u4e3a\u6e90\u70b9\uff0c\u521d\u59cb\u5316\u6700\u77ed\u8def\u5f84$dist[i] = G.Edge[u][i]$\uff0c\u521d\u59cb\u5316\u524d\u9a71$p[i]$\u4e3a$u$ \u627e\u6700\u5c0f \uff1a\u5728$V-S$\u4e2d\u627e$dist[i]$\u6700\u5c0f\u7684\u9876\u70b9$t$\uff0c$t$\u786e\u5b9a\u4e3a\u5df2\u627e\u5230\u6700\u77ed\u8def\u5f84\uff0c\u66f4\u65b0\u4e24\u4e2a\u96c6\u5408 \u5224\u65ad \uff1a\u5982\u679c$V-S$\u7a7a\uff0c\u5219\u76f4\u63a5\u7ed3\u675f\uff0c\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u6b65 \u677e\u5f1b\u64cd\u4f5c \uff1a\u5229\u7528\u5728\u7b2c\u4e09\u6b65\u4e2d\u627e\u5230\u7684\u6700\u8fd1\u70b9$t$\uff0c\u53bb\u5c1d\u8bd5\u66f4\u65b0$t$\u7684\u90bb\u63a5\u70b9$j$\uff0c\u5373\u5982\u679c$dist[j]>dist[t]+G.Edge[t][j]$\uff0c\u5219\u4ee4$dist[j]=dist[t]+G.Edge[t][j]$\uff0c\u5e76\u4e14\u540c\u65f6\u66f4\u65b0$j$\u7684\u524d\u9a71\u4e3a$t$\uff0c\u7ee7\u7eed\u8fdb\u884c\u7b2c\u4e09\u6b65\u7684\u64cd\u4f5c \u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u90bb\u63a5\u77e9\u9635\uff1a$O(n)$\uff0c\u90bb\u63a5\u8868\uff1a$O(E)$ \u4f18\u5316 \u5229\u7528\u4f18\u5148\u961f\u5217\u6765\u4f18\u5316\u5bfb\u627e\u6700\u8fd1\u9876\u70b9\u7684\u64cd\u4f5c\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6 \u5bf9\u4e8e\u7a00\u758f\u56fe\uff0c\u91c7\u7528\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u56fe\uff0c\u5bf9\u4e8e\u7a20\u5bc6\u56fe\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\uff0c\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6 \u6734\u7d20Dijkstra \u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u89e3\u51b3 \u89e3\u9898\u601d\u8def \u521d\u59cb\u5316\u8ddd\u79bb dst[1] = 0; dst[\u5176\u4ed6] = 0x3f3f3f3f; \u7b2c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e3a\u4e00\uff0c\u5176\u4ed6\u70b9\u672a\u786e\u5b9a\uff0c\u8bb0\u4e3a\u65e0\u7a77\u5927 st[] \u7528\u4e8e\u6807\u8bb0\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u70b9 \u662f\u5426\u5df2\u627e\u5230\u6700\u77ed\u8ddd\u79bb for(int i = 1;i <= n;i++) \u5bfb\u627e\u8ddd\u79bbi\u70b9(\u4e0d\u5728s\u4e2d) \u6700\u8fd1 \u7684\u8282\u70b9t \u6807\u8bb0\u8282\u70b9t \uff0c\u8868\u660et\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u7ecf\u627e\u5230 \u904d\u5386\u4e0e$i$\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u5e76 \u66f4\u65b0\u8ddd\u79bb \uff08\u4f46\u4e0d\u4e00\u5b9a\u662f\u6700\u77ed\uff0c\u4e0d\u505a\u6807\u8bb0\uff09 #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 510; int n, m; int g[N][N], dst[N]; bool st[N]; int dijkstra(){ memset(dst, 0x3f, sizeof dst); dst[1] = 0; for(int i = 1;i <= n;i++){ int t = -1; //\u521d\u59cb\u5316\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9\uff08\u672a\u77e5\uff09 for(int j = 1;j <= n;j++){ //\u5bfb\u627e\u6700\u77ed\u672a\u5bfb\u8fb9 if(!st[j] && (t == -1 || dst[t] > dst[j])){ t = j; } } st[t] = true; //\u6807\u8bb0\u6700\u77ed\u7684\u70b9\uff0c\u8868\u660e\u5f53\u524d\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u627e\u5230 for(int j = 1;j <= n;j++){ //\u5229\u7528t\u66f4\u65b0\u5176\u4ed6\u90bb\u63a5\u70b9\u7684\u6700\u77ed\u8ddd\u79bb dst[j] = min(dst[j], dst[t] + g[t][j]); //\u66f4\u65b0\u8ddd\u79bb } } if(dst[n] == 0x3f3f3f3f) return -1; return dst[n]; } int main(){ cin >> n >> m; memset(g, 0x3f, sizeof g); while(m--){ int a, b, c; scanf(\"%d%d%d\", &a, &b, &c); g[a][b] = min(g[a][b], c); } int t = dijkstra(); cout << t; return 0; } \u65f6\u95f4\u590d\u6742\u5ea6\u9ad8 \u53ef\u4ee5\u4f7f\u7528 \u666e\u901a\u4e8c\u53c9\u5806 \uff08\u5806\u4e2d\u5e94\u8be5\u5b58\u50a8\u7684\u6570\u636e\u4e3a\u7ed3\u70b9\u4e0e\u8ddd\u79bb\uff09\u6216\u6590\u6ce2\u90a3\u5951\u5806\u4f18\u5316","title":"Dijkstra"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#dijkstra","text":"","title":"Dijkstra"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#dijkstra_1","text":"\u7ed9\u5b9a\u6709\u5411\u5e26\u6743\u56fe\uff0c\u4e14\u5176\u4e2d\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u4e3a\u975e\u8d1f\u5b9e\u6570\uff0c\u8ba1\u7b97\u4ece \u6e90\u70b9 \u5230\u5176\u4ed6\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6 $S$\u4e3a\u4ee5\u786e\u5b9a\u6700\u77ed\u8def\u5f84\u7684\u96c6\u5408\uff0c\u5219$V-S$\u4e3a\u6700\u77ed\u8def\u5f84\u672a\u786e\u5b9a\u7684\u96c6\u5408 - \u5b9e\u8d28\uff1a\u8d2a\u5fc3\u7b97\u6cd5 - \u7b56\u7565\uff1a\u9009\u62e9\u7279\u6b8a\u8def\u5f84\u957f\u5ea6\u6700\u77ed\u7684\u8def\u5f84\uff0c\u5c06\u5176\u8fde\u63a5\u7684$V-S$\u4e2d\u7684\u9876\u70b9\u52a0\u5165\u96c6\u5408$S$\uff0c\u540c\u65f6\u66f4\u65b0\u6570\u7ec4$dist[]$\u3002\u5f53$S$\u4e2d\u5305\u542b\u6240\u6709\u9876\u70b9\u65f6\uff0c\u4ece\u6e90\u70b9\u5230\u4efb\u610f\u70b9\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\u5168\u90e8\u88ab\u627e\u5230","title":"Dijkstra"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#_1","text":"\u6570\u636e\u7ed3\u6784 \uff1a\u8bbe\u7f6e\u5e26\u6743\u90bb\u63a5\u77e9\u9635$G.Edge[i][j] = w$\uff0c\u5982\u679c\u975e\u90bb\u63a5\uff0c\u5219\u4ee4$G.Edge[i][j] = \\infty$\uff0c\u91c7\u7528\u4e00\u7ef4\u6570\u7ec4$dist[i]$\u6765\u8bb0\u5f55\u4ece\u6e90\u70b9\u5230\u9876\u70b9$i$\u7684\u6700\u77ed\u8def\u5f84\u957f\u5ea6\uff0c\u91c7\u7528\u4e00\u7ef4\u6570\u7ec4$p[i]$\u6765\u8bb0\u5f55\u6700\u77ed\u8def\u5f84\u4e0a$i$\u9876\u70b9\u7684\u524d\u9a71 \u521d\u59cb\u5316 \uff1a\u8bbe\u7f6e$u$\u4e3a\u6e90\u70b9\uff0c\u521d\u59cb\u5316\u6700\u77ed\u8def\u5f84$dist[i] = G.Edge[u][i]$\uff0c\u521d\u59cb\u5316\u524d\u9a71$p[i]$\u4e3a$u$ \u627e\u6700\u5c0f \uff1a\u5728$V-S$\u4e2d\u627e$dist[i]$\u6700\u5c0f\u7684\u9876\u70b9$t$\uff0c$t$\u786e\u5b9a\u4e3a\u5df2\u627e\u5230\u6700\u77ed\u8def\u5f84\uff0c\u66f4\u65b0\u4e24\u4e2a\u96c6\u5408 \u5224\u65ad \uff1a\u5982\u679c$V-S$\u7a7a\uff0c\u5219\u76f4\u63a5\u7ed3\u675f\uff0c\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u6b65 \u677e\u5f1b\u64cd\u4f5c \uff1a\u5229\u7528\u5728\u7b2c\u4e09\u6b65\u4e2d\u627e\u5230\u7684\u6700\u8fd1\u70b9$t$\uff0c\u53bb\u5c1d\u8bd5\u66f4\u65b0$t$\u7684\u90bb\u63a5\u70b9$j$\uff0c\u5373\u5982\u679c$dist[j]>dist[t]+G.Edge[t][j]$\uff0c\u5219\u4ee4$dist[j]=dist[t]+G.Edge[t][j]$\uff0c\u5e76\u4e14\u540c\u65f6\u66f4\u65b0$j$\u7684\u524d\u9a71\u4e3a$t$\uff0c\u7ee7\u7eed\u8fdb\u884c\u7b2c\u4e09\u6b65\u7684\u64cd\u4f5c","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#_2","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$ \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u90bb\u63a5\u77e9\u9635\uff1a$O(n)$\uff0c\u90bb\u63a5\u8868\uff1a$O(E)$","title":"\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#_3","text":"\u5229\u7528\u4f18\u5148\u961f\u5217\u6765\u4f18\u5316\u5bfb\u627e\u6700\u8fd1\u9876\u70b9\u7684\u64cd\u4f5c\uff0c\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6 \u5bf9\u4e8e\u7a00\u758f\u56fe\uff0c\u91c7\u7528\u90bb\u63a5\u8868\u7684\u65b9\u5f0f\u5b58\u50a8\u56fe\uff0c\u5bf9\u4e8e\u7a20\u5bc6\u56fe\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\uff0c\u964d\u4f4e\u7a7a\u95f4\u590d\u6742\u5ea6","title":"\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#dijkstra_2","text":"\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe\uff0c\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u89e3\u51b3","title":"\u6734\u7d20Dijkstra"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Dijkstra/#_4","text":"\u521d\u59cb\u5316\u8ddd\u79bb dst[1] = 0; dst[\u5176\u4ed6] = 0x3f3f3f3f; \u7b2c\u4e00\u4e2a\u70b9\u7684\u8ddd\u79bb\u4e3a\u4e00\uff0c\u5176\u4ed6\u70b9\u672a\u786e\u5b9a\uff0c\u8bb0\u4e3a\u65e0\u7a77\u5927 st[] \u7528\u4e8e\u6807\u8bb0\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u70b9 \u662f\u5426\u5df2\u627e\u5230\u6700\u77ed\u8ddd\u79bb for(int i = 1;i <= n;i++) \u5bfb\u627e\u8ddd\u79bbi\u70b9(\u4e0d\u5728s\u4e2d) \u6700\u8fd1 \u7684\u8282\u70b9t \u6807\u8bb0\u8282\u70b9t \uff0c\u8868\u660et\u8282\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u7ecf\u627e\u5230 \u904d\u5386\u4e0e$i$\u8fde\u63a5\u7684\u8282\u70b9\uff0c\u5e76 \u66f4\u65b0\u8ddd\u79bb \uff08\u4f46\u4e0d\u4e00\u5b9a\u662f\u6700\u77ed\uff0c\u4e0d\u505a\u6807\u8bb0\uff09 #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 510; int n, m; int g[N][N], dst[N]; bool st[N]; int dijkstra(){ memset(dst, 0x3f, sizeof dst); dst[1] = 0; for(int i = 1;i <= n;i++){ int t = -1; //\u521d\u59cb\u5316\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9\uff08\u672a\u77e5\uff09 for(int j = 1;j <= n;j++){ //\u5bfb\u627e\u6700\u77ed\u672a\u5bfb\u8fb9 if(!st[j] && (t == -1 || dst[t] > dst[j])){ t = j; } } st[t] = true; //\u6807\u8bb0\u6700\u77ed\u7684\u70b9\uff0c\u8868\u660e\u5f53\u524d\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u5df2\u627e\u5230 for(int j = 1;j <= n;j++){ //\u5229\u7528t\u66f4\u65b0\u5176\u4ed6\u90bb\u63a5\u70b9\u7684\u6700\u77ed\u8ddd\u79bb dst[j] = min(dst[j], dst[t] + g[t][j]); //\u66f4\u65b0\u8ddd\u79bb } } if(dst[n] == 0x3f3f3f3f) return -1; return dst[n]; } int main(){ cin >> n >> m; memset(g, 0x3f, sizeof g); while(m--){ int a, b, c; scanf(\"%d%d%d\", &a, &b, &c); g[a][b] = min(g[a][b], c); } int t = dijkstra(); cout << t; return 0; } \u65f6\u95f4\u590d\u6742\u5ea6\u9ad8 \u53ef\u4ee5\u4f7f\u7528 \u666e\u901a\u4e8c\u53c9\u5806 \uff08\u5806\u4e2d\u5e94\u8be5\u5b58\u50a8\u7684\u6570\u636e\u4e3a\u7ed3\u70b9\u4e0e\u8ddd\u79bb\uff09\u6216\u6590\u6ce2\u90a3\u5951\u5806\u4f18\u5316","title":"\u89e3\u9898\u601d\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/","text":"Floyd \u53ef\u4ee5\u6c42\u89e3\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84 \u53c8\u540d\uff1a\u63d2\u70b9\u6cd5 \u5728\u9876\u70b9$i$\u548c\u9876\u70b9$j$\u4e4b\u95f4\u63d2\u5165\u9876\u70b9$k$\uff0c\u770b\u80fd\u5426\u7f29\u77ed$i$\u548c$j$\u4e4b\u95f4\u7684\u8ddd\u79bb \u7b97\u6cd5\u6b65\u9aa4 \u6570\u636e\u7ed3\u6784\uff1a\u5e26\u6743\u90bb\u63a5\u77e9\u9635 Edge[][] \uff0c\u4e24\u4e2a\u8f85\u52a9\u6570\u7ec4\uff1a dist[i][j] \uff0c\u8bb0\u5f55\u4ece$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u524d\u9a71\u6570\u7ec4 p[i][j] \uff0c\u8bb0\u5f55$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\u4e0a$i$\u9876\u70b9\u7684\u524d\u9a71 \u521d\u59cb\u5316\uff1a dist[i][j] = Edge[i][j] \uff0c\u5982\u679c\u9876\u70b9i\u5230j\u6709\u8fb9\uff0c\u5219\u521d\u59cb\u5316 p[i][j] = i \uff0c\u5426\u5219 p[i][j] = -1 \u63d2\u70b9\uff1a\u677e\u5f1b\u64cd\u4f5c\uff1a\u5982\u679c dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]) \u8bb0\u5f55 p[i][j] = p[k][j] Floyd\u6c42\u6700\u77ed\u8def \u7591\u95ee\uff1a \u4e3a\u4ec0\u4e48floyd\u4e2d\u7684\u987a\u5e8f\u4e3ak i j #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 210, INF = 1e9; int dist[N][N]; int n, m, k; void Floyd(){ //\u4e3a\u4ec0\u4e48\u662f\u8fd9\u79cd\u987a\u5e8f\uff1f\uff1f\uff1f\uff1f for(int k = 1;k <= n;k++){ for(int i = 1;i <= n;i++){ for(int j = 1;j <= n;j++){ dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); //\u66f4\u65b0\u8ddd\u79bb } } } } int main(){ cin >> n >> m >> k; int a, b, c; for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316\u8ddd\u79bb for(int j = 1;j <= n;j++){ if(i == j) dist[i][j] = 0; else dist[i][j] = INF; } } while(m--){ //\u8bfb\u53d6\u8ddd\u79bb cin >> a >> b >> c; dist[a][b] = min(dist[a][b], c); } Floyd(); //floyd while(k--){ //\u8be2\u95ee cin >> a >> b; if(dist[a][b] > (INF >> 1)) cout << \"impossible\" << endl; //\u53ef\u80fd\u5b58\u5728\u8d1f\u6743\u8fb9 else cout << dist[a][b] << endl; } return 0; } \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6 3\u5c42for\u5faa\u73af->$O(n^3)$ \u7a7a\u95f4\u590d\u6742\u5ea6 $O(n^2)$","title":"Floyd"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#floyd","text":"\u53ef\u4ee5\u6c42\u89e3\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u95f4\u7684\u6700\u77ed\u8def\u5f84 \u53c8\u540d\uff1a\u63d2\u70b9\u6cd5 \u5728\u9876\u70b9$i$\u548c\u9876\u70b9$j$\u4e4b\u95f4\u63d2\u5165\u9876\u70b9$k$\uff0c\u770b\u80fd\u5426\u7f29\u77ed$i$\u548c$j$\u4e4b\u95f4\u7684\u8ddd\u79bb","title":"Floyd"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#_1","text":"\u6570\u636e\u7ed3\u6784\uff1a\u5e26\u6743\u90bb\u63a5\u77e9\u9635 Edge[][] \uff0c\u4e24\u4e2a\u8f85\u52a9\u6570\u7ec4\uff1a dist[i][j] \uff0c\u8bb0\u5f55\u4ece$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\uff0c\u524d\u9a71\u6570\u7ec4 p[i][j] \uff0c\u8bb0\u5f55$i$\u5230$j$\u7684\u6700\u77ed\u8def\u5f84\u4e0a$i$\u9876\u70b9\u7684\u524d\u9a71 \u521d\u59cb\u5316\uff1a dist[i][j] = Edge[i][j] \uff0c\u5982\u679c\u9876\u70b9i\u5230j\u6709\u8fb9\uff0c\u5219\u521d\u59cb\u5316 p[i][j] = i \uff0c\u5426\u5219 p[i][j] = -1 \u63d2\u70b9\uff1a\u677e\u5f1b\u64cd\u4f5c\uff1a\u5982\u679c dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]) \u8bb0\u5f55 p[i][j] = p[k][j]","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#floyd_1","text":"\u7591\u95ee\uff1a \u4e3a\u4ec0\u4e48floyd\u4e2d\u7684\u987a\u5e8f\u4e3ak i j #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 210, INF = 1e9; int dist[N][N]; int n, m, k; void Floyd(){ //\u4e3a\u4ec0\u4e48\u662f\u8fd9\u79cd\u987a\u5e8f\uff1f\uff1f\uff1f\uff1f for(int k = 1;k <= n;k++){ for(int i = 1;i <= n;i++){ for(int j = 1;j <= n;j++){ dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); //\u66f4\u65b0\u8ddd\u79bb } } } } int main(){ cin >> n >> m >> k; int a, b, c; for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316\u8ddd\u79bb for(int j = 1;j <= n;j++){ if(i == j) dist[i][j] = 0; else dist[i][j] = INF; } } while(m--){ //\u8bfb\u53d6\u8ddd\u79bb cin >> a >> b >> c; dist[a][b] = min(dist[a][b], c); } Floyd(); //floyd while(k--){ //\u8be2\u95ee cin >> a >> b; if(dist[a][b] > (INF >> 1)) cout << \"impossible\" << endl; //\u53ef\u80fd\u5b58\u5728\u8d1f\u6743\u8fb9 else cout << dist[a][b] << endl; } return 0; }","title":"Floyd\u6c42\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#_2","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#_3","text":"3\u5c42for\u5faa\u73af->$O(n^3)$","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/Floyd/#_4","text":"$O(n^2)$","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/SPFA/","text":"","title":"SPFA"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/","text":"\u5173\u952e\u8def\u5f84 AOE\u7f51 \u4e00\u4e2a\u5e26\u6743\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u9876\u70b9\u8868\u793a\u65f6\u95f4\uff0c\u5f27\u8868\u793a\u6d3b\u52a8\uff0c\u5f27\u4e0a\u7684\u6743\u503c\u8868\u793a\u6d3b\u52a8\u6301\u7eed\u7684\u65f6\u95f4 \u5b9e\u9645\u5de5\u7a0b\u95ee\u9898\uff1a \u4f30\u7b97\u5b8c\u6210\u6574\u4e2a\u5de5\u7a0b\u81f3\u5c11\u9700\u8981\u591a\u5c11\u65f6\u95f4 \u5224\u65ad\u90a3\u4e9b\u6d3b\u52a8\u662f\u5173\u952e\u6d3b\u52a8 \u5173\u952e\u8def\u5f84 \u5173\u952e\u8def\u5f84\uff1a \u6e90\u70b9->\u6c47\u70b9 \u7684\u5e26\u6743\u8def\u5f84 \u957f\u5ea6\u6700\u5927 \u7684\u8def\u5f84\u79f0\u4e3a\u5173\u952e\u8def\u5f84\uff0c\u5173\u952e\u8def\u5f84\u4e0a\u7684\u6d3b\u52a8\u79f0\u4e3a \u5173\u952e\u6d3b\u52a8 \u5173\u952e\u8def\u5f84\u7684\u786e\u5b9a\uff1a \u4e8b\u4ef6$V_i$\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4$ve[i]$ \u4e8b\u4ef6\u53d1\u751f\u7684\u6700\u65e9\u65f6\u95f4\u662f\u4ece\u6e90\u70b9\u5230$V_i$\u7684 \u6700\u5927 \u8def\u5f84\u957f\u5ea6 \u6700\u5927\uff1a\u9700\u8981\u4e8b\u4ef6$V_i$\u7684\u6240\u6709\u5165\u8fb9\u6d3b\u52a8\u90fd\u5df2\u7ecf\u5b8c\u6210\uff0c$V_i$\u624d\u53ef\u4ee5\u5f00\u59cb \u5229\u7528[[\u62d3\u6251\u6392\u5e8f]]\u4ece\u6e90\u70b9\u5411\u6c47\u70b9\u9012\u63a8\uff0c\u8ba1\u7b97\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4 $ve[i] =\\max(V_e + W_{ei})$ \u4e8b\u4ef6$V_i$\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4$vl[i]$ \u4e8b\u4ef6$V_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u4e0d\u80fd\u5f71\u54cd\u5176\u6240\u6709\u540e\u7ee7\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\uff0c \u5373$V_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u6d3b\u52a8$a_{ik} = $\u7684\u6301\u7eed\u65f6\u95f4 \u5229\u7528 \u9006\u62d3\u6251\u6392\u5e8f \uff0c\u4ece\u6c47\u70b9\u5411\u6e90\u70b9\u9012\u63a8\uff0c\u6c42\u89e3\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u521d\u59cb\u5316 \u6c47\u70b9\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u4e3a \u6c47\u70b9\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4 \u6d3b\u52a8$a_i = $\u7684\u6700\u65e9\u53d1\u751f\u4e8b\u4ef6$e[i]$ \u4e8b\u4ef6$V_j$\u4e4b\u540e\u53d1\u751f \u6d3b\u52a8$a_i = $\u7684\u6700\u665a\u53d1\u751f\u4e8b\u4ef6$l[i]$ \u6d3b\u52a8$a_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u7b49\u4e8e\u5f27\u5c3e\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u8fb9\u503c\uff0c$l[i] = vl[k]-w_{jk}$ \u7b97\u6cd5\u6b65\u9aa4 \u5229\u7528\u62d3\u6251\u6392\u5e8f\uff0c\u5c06\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\u4fdd\u5b58\u5728$topo[]$ \u5c06\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u521d\u59cb\u5316\u4e3a0\uff0c \u6839\u636e\u62d3\u6251\u987a\u5e8f\u4ece\u524d\u5411\u540e\u4e00\u6b21\u6c42\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff0c\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c \u6b63\u5e8f\u53d6\u51fa\u62d3\u6251\u5e8f\u5217\u4e2d\u7684\u9876\u70b9$k$ \u4f9d\u6b21\u5904\u7406$k$\u7684\u6bcf\u4e00\u4e2a\u90bb\u63a5\u70b9 \uff08\u51fa\uff09 \uff0c**\u66f4\u65b0\u9876\u70b9$j$\u7684\u6700\u65e9\u53d1\u751f\u4e8b\u4ef6$ve[j]$ if(ve[j] < ve[k] + p->weight) ve[j] = ve[k] + p->weight \u521d\u59cb\u5316\u4e8b\u4ef6\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4 \u6839\u636e\u9006\u62d3\u6251\u6392\u5e8f\u4ece\u540e\u5411\u524d\uff0c\u6c42\u89e3\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u9006\u5e8f\u53d6\u51fa\u62d3\u6251\u5e8f\u5217\u4e2d\u7684\u9876\u70b9 \u4f9d\u6b21\u5904\u7406$k$\u7684\u6bcf\u4e2a\u90bb\u63a5\u70b9 \uff08\u5165\uff09 \uff0c**\u66f4\u65b0\u9876\u70b9$k$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4$vl[k]$ if(vl[k] > vl[j] - p->weight) vl[k] = vl[j] - p->weight \u6c42\u5173\u952e\u6d3b\u52a8\uff1a\u82e5 \u6700\u65e9\u4e0e\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u76f8\u540c\uff0c\u5219\u4e3a\u5173\u952e\u6d3b\u52a8","title":"\u5173\u952e\u8def\u5f84"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_1","text":"","title":"\u5173\u952e\u8def\u5f84"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#aoe","text":"\u4e00\u4e2a\u5e26\u6743\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u9876\u70b9\u8868\u793a\u65f6\u95f4\uff0c\u5f27\u8868\u793a\u6d3b\u52a8\uff0c\u5f27\u4e0a\u7684\u6743\u503c\u8868\u793a\u6d3b\u52a8\u6301\u7eed\u7684\u65f6\u95f4 \u5b9e\u9645\u5de5\u7a0b\u95ee\u9898\uff1a \u4f30\u7b97\u5b8c\u6210\u6574\u4e2a\u5de5\u7a0b\u81f3\u5c11\u9700\u8981\u591a\u5c11\u65f6\u95f4 \u5224\u65ad\u90a3\u4e9b\u6d3b\u52a8\u662f\u5173\u952e\u6d3b\u52a8","title":"AOE\u7f51"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_2","text":"\u5173\u952e\u8def\u5f84\uff1a \u6e90\u70b9->\u6c47\u70b9 \u7684\u5e26\u6743\u8def\u5f84 \u957f\u5ea6\u6700\u5927 \u7684\u8def\u5f84\u79f0\u4e3a\u5173\u952e\u8def\u5f84\uff0c\u5173\u952e\u8def\u5f84\u4e0a\u7684\u6d3b\u52a8\u79f0\u4e3a \u5173\u952e\u6d3b\u52a8","title":"\u5173\u952e\u8def\u5f84"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_3","text":"","title":"\u5173\u952e\u8def\u5f84\u7684\u786e\u5b9a\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#v_ivei","text":"\u4e8b\u4ef6\u53d1\u751f\u7684\u6700\u65e9\u65f6\u95f4\u662f\u4ece\u6e90\u70b9\u5230$V_i$\u7684 \u6700\u5927 \u8def\u5f84\u957f\u5ea6 \u6700\u5927\uff1a\u9700\u8981\u4e8b\u4ef6$V_i$\u7684\u6240\u6709\u5165\u8fb9\u6d3b\u52a8\u90fd\u5df2\u7ecf\u5b8c\u6210\uff0c$V_i$\u624d\u53ef\u4ee5\u5f00\u59cb \u5229\u7528[[\u62d3\u6251\u6392\u5e8f]]\u4ece\u6e90\u70b9\u5411\u6c47\u70b9\u9012\u63a8\uff0c\u8ba1\u7b97\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4 $ve[i] =\\max(V_e + W_{ei})$","title":"\u4e8b\u4ef6$V_i$\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4$ve[i]$"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#v_ivli","text":"\u4e8b\u4ef6$V_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u4e0d\u80fd\u5f71\u54cd\u5176\u6240\u6709\u540e\u7ee7\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\uff0c \u5373$V_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u6d3b\u52a8$a_{ik} = $\u7684\u6301\u7eed\u65f6\u95f4 \u5229\u7528 \u9006\u62d3\u6251\u6392\u5e8f \uff0c\u4ece\u6c47\u70b9\u5411\u6e90\u70b9\u9012\u63a8\uff0c\u6c42\u89e3\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u521d\u59cb\u5316 \u6c47\u70b9\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u4e3a \u6c47\u70b9\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4","title":"\u4e8b\u4ef6$V_i$\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4$vl[i]$"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#a_i-ei","text":"\u4e8b\u4ef6$V_j$\u4e4b\u540e\u53d1\u751f","title":"\u6d3b\u52a8$a_i = $\u7684\u6700\u65e9\u53d1\u751f\u4e8b\u4ef6$e[i]$"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#a_i-li","text":"\u6d3b\u52a8$a_i$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u7b49\u4e8e\u5f27\u5c3e\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u51cf\u53bb\u8fb9\u503c\uff0c$l[i] = vl[k]-w_{jk}$","title":"\u6d3b\u52a8$a_i = $\u7684\u6700\u665a\u53d1\u751f\u4e8b\u4ef6$l[i]$"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/#_4","text":"\u5229\u7528\u62d3\u6251\u6392\u5e8f\uff0c\u5c06\u62d3\u6251\u6392\u5e8f\u7ed3\u679c\u4fdd\u5b58\u5728$topo[]$ \u5c06\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\u521d\u59cb\u5316\u4e3a0\uff0c \u6839\u636e\u62d3\u6251\u987a\u5e8f\u4ece\u524d\u5411\u540e\u4e00\u6b21\u6c42\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u65e9\u53d1\u751f\u65f6\u95f4\uff0c\u5faa\u73af\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c \u6b63\u5e8f\u53d6\u51fa\u62d3\u6251\u5e8f\u5217\u4e2d\u7684\u9876\u70b9$k$ \u4f9d\u6b21\u5904\u7406$k$\u7684\u6bcf\u4e00\u4e2a\u90bb\u63a5\u70b9 \uff08\u51fa\uff09 \uff0c**\u66f4\u65b0\u9876\u70b9$j$\u7684\u6700\u65e9\u53d1\u751f\u4e8b\u4ef6$ve[j]$ if(ve[j] < ve[k] + p->weight) ve[j] = ve[k] + p->weight \u521d\u59cb\u5316\u4e8b\u4ef6\u7684\u6700\u665a\u53d1\u751f\u65f6\u95f4 \u6839\u636e\u9006\u62d3\u6251\u6392\u5e8f\u4ece\u540e\u5411\u524d\uff0c\u6c42\u89e3\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4 \u9006\u5e8f\u53d6\u51fa\u62d3\u6251\u5e8f\u5217\u4e2d\u7684\u9876\u70b9 \u4f9d\u6b21\u5904\u7406$k$\u7684\u6bcf\u4e2a\u90bb\u63a5\u70b9 \uff08\u5165\uff09 \uff0c**\u66f4\u65b0\u9876\u70b9$k$\u7684\u6700\u8fdf\u53d1\u751f\u65f6\u95f4$vl[k]$ if(vl[k] > vl[j] - p->weight) vl[k] = vl[j] - p->weight \u6c42\u5173\u952e\u6d3b\u52a8\uff1a\u82e5 \u6700\u65e9\u4e0e\u6700\u8fdf\u53d1\u751f\u65f6\u95f4\u76f8\u540c\uff0c\u5219\u4e3a\u5173\u952e\u6d3b\u52a8","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","text":"\u62d3\u6251\u6392\u5e8f \u4e00\u4e2a\u65e0\u73af\u7684\u6709\u5411\u56fe\u79f0\u4e3a\u6709\u5411\u65e0\u73af\u56fe AOV\u7f51 \u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb\u7684\u6709\u5411\u56fe\uff0c\u79f0\u4e3a\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u7684\u7f51(Activity On Vertex Network)\uff0c\u5373 AOV\u7f51 \u82e5\u4ece\u9876\u70b9$i$\u5230\u9876\u70b9$j$\u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6709\u5411\u8def\u5f84\uff0c\u5219\u79f0$i$\u662f$j$\u7684\u524d\u9a71\uff0c\u6216$j$\u662f$i$\u7684\u540e\u7ee7 \u82e5$ $\u662f\u56fe\u4e2d\u7684\u5f27\uff0c\u5219\u79f0$i$\u662f$j$\u7684\u76f4\u63a5\u524d\u9a71\uff0c$j$\u662f$i$\u7684\u76f4\u63a5\u540e\u7ee7 AOV\u7f51\u4e2d\u4e0d\u5141\u8bb8\u6709\u73af\uff0c\u5982\u4f55\u5224\u65adAOV\u4e2d\u662f\u5426\u6709\u73af\uff1f->\u62d3\u6251\u6392\u5e8f\u3001 \u62d3\u6251\u6392\u5e8f \u62d3\u6251\u6392\u5e8f\uff1a\u6307\u5c06AOV\u7f51\u4e2d\u7684\u9876\u70b9\u6392\u6210\u4e00\u4e2a \u7ebf\u6027\u5e8f\u5217 \u6ee1\u8db3\uff1a\u82e5\u4ece\u9876\u70b9$i$\u5230\u9876\u70b9$j$\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u8be5\u5e8f\u5217\u4e2d\u7684\u9876\u70b9$i$\u4e00\u5b9a\u5728\u9876\u70b9$j$\u4e4b\u524d \u57fa\u672c\u601d\u60f3\uff1a \u9009\u62e9\u4e00\u4e2a \u65e0\u524d\u9a71 \u7684\u9876\u70b9\u5e76\u8f93\u51fa \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9 \uff08\u901a\u8fc7\u540e\u7ee7\u9876\u70b9\u7684\u5165\u5ea6\u51cf1\u5b9e\u73b0\uff09 \u548c\u8be5\u9876\u70b9\u7684\u6240\u6709\u51fa\u53d1\u8fb9 \u91cd\u590d1\u548c2\uff0c\u76f4\u5230\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9 \u7ed3\u8bba\uff1a\u82e5 Counter < VertexNum \uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u6709\u73af \u62d3\u6251\u6392\u5e8f\u5e76\u4e0d\u552f\u4e00 \u7b97\u6cd5\u6b65\u9aa4 \u5728\u6570\u7ec4 indegree[] \u4e2d\u5b58\u50a8\u5404\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\uff0c\u6808 S \u7528\u4e8e\u4e34\u65f6\u5b58\u50a8\u5165\u5ea6\u4e3a$0$\u7684\u9876\u70b9 if(!S.empty()) \u6808\u9876\u5143\u7d20$i$\u51fa\u6808\uff0c\u5e76\u8fdb\u884c\u8bbf\u95ee \u9876\u70b9$i$\u7684\u6240\u6709\u90bb\u63a5\u70b9\u5165\u5ea6\u51cf$1$\uff0c\u82e5\u51cf\u53bb\u540e\uff0c\u5165\u5ea6\u4e3a$0$\uff0c\u5219\u4ee4\u5176\u5165\u6808 \u5f97\u51fa\u7ed3\u8bba \u6392\u5e8f\u5e8f\u5217\u5373\u51fa\u6808\u5e8f\u5217 \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6 \u6c42\u5165\u5ea6\uff1a$O(e)$ \u5ea6\u6570\u4e3a$0$\u7684\u9876\u70b9\u5165\u6808\uff1a$O(n)$ \u82e5\u6709\u5411\u56fe\u65e0\u73af\uff0c\u5219\u6bcf\u4e2a\u9876\u70b9\u51fa\u6808\u540e\u5165\u5ea6\u51cf1\uff1a$O(n)$ \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n + e)$ \u7a7a\u95f4\u590d\u6742\u5ea6 \u9006\u62d3\u6251\u6392\u5e8f \u4e0e\u6b63\u5411\u62d3\u6251\u6392\u5e8f\u76f8\u53cd\uff0c\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e3a \u51fa\u5ea6 \u4e3a$0$\u7684\u70b9 \u5e94\u7528: [[\u5173\u952e\u8def\u5f84]]","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_1","text":"\u4e00\u4e2a\u65e0\u73af\u7684\u6709\u5411\u56fe\u79f0\u4e3a\u6709\u5411\u65e0\u73af\u56fe","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#aov","text":"\u7528\u9876\u70b9\u8868\u793a\u6d3b\u52a8\uff0c\u7528\u5f27\u8868\u793a\u6d3b\u52a8\u4e4b\u95f4\u7684\u4f18\u5148\u5173\u7cfb\u7684\u6709\u5411\u56fe\uff0c\u79f0\u4e3a\u9876\u70b9\u8868\u793a\u6d3b\u52a8\u7684\u7f51(Activity On Vertex Network)\uff0c\u5373 AOV\u7f51 \u82e5\u4ece\u9876\u70b9$i$\u5230\u9876\u70b9$j$\u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u6709\u5411\u8def\u5f84\uff0c\u5219\u79f0$i$\u662f$j$\u7684\u524d\u9a71\uff0c\u6216$j$\u662f$i$\u7684\u540e\u7ee7 \u82e5$ $\u662f\u56fe\u4e2d\u7684\u5f27\uff0c\u5219\u79f0$i$\u662f$j$\u7684\u76f4\u63a5\u524d\u9a71\uff0c$j$\u662f$i$\u7684\u76f4\u63a5\u540e\u7ee7 AOV\u7f51\u4e2d\u4e0d\u5141\u8bb8\u6709\u73af\uff0c\u5982\u4f55\u5224\u65adAOV\u4e2d\u662f\u5426\u6709\u73af\uff1f->\u62d3\u6251\u6392\u5e8f\u3001","title":"AOV\u7f51"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_2","text":"\u62d3\u6251\u6392\u5e8f\uff1a\u6307\u5c06AOV\u7f51\u4e2d\u7684\u9876\u70b9\u6392\u6210\u4e00\u4e2a \u7ebf\u6027\u5e8f\u5217 \u6ee1\u8db3\uff1a\u82e5\u4ece\u9876\u70b9$i$\u5230\u9876\u70b9$j$\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5219\u8be5\u5e8f\u5217\u4e2d\u7684\u9876\u70b9$i$\u4e00\u5b9a\u5728\u9876\u70b9$j$\u4e4b\u524d \u57fa\u672c\u601d\u60f3\uff1a \u9009\u62e9\u4e00\u4e2a \u65e0\u524d\u9a71 \u7684\u9876\u70b9\u5e76\u8f93\u51fa \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9 \uff08\u901a\u8fc7\u540e\u7ee7\u9876\u70b9\u7684\u5165\u5ea6\u51cf1\u5b9e\u73b0\uff09 \u548c\u8be5\u9876\u70b9\u7684\u6240\u6709\u51fa\u53d1\u8fb9 \u91cd\u590d1\u548c2\uff0c\u76f4\u5230\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9 \u7ed3\u8bba\uff1a\u82e5 Counter < VertexNum \uff0c\u5219\u8bf4\u660e\u56fe\u4e2d\u6709\u73af \u62d3\u6251\u6392\u5e8f\u5e76\u4e0d\u552f\u4e00","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_3","text":"\u5728\u6570\u7ec4 indegree[] \u4e2d\u5b58\u50a8\u5404\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\uff0c\u6808 S \u7528\u4e8e\u4e34\u65f6\u5b58\u50a8\u5165\u5ea6\u4e3a$0$\u7684\u9876\u70b9 if(!S.empty()) \u6808\u9876\u5143\u7d20$i$\u51fa\u6808\uff0c\u5e76\u8fdb\u884c\u8bbf\u95ee \u9876\u70b9$i$\u7684\u6240\u6709\u90bb\u63a5\u70b9\u5165\u5ea6\u51cf$1$\uff0c\u82e5\u51cf\u53bb\u540e\uff0c\u5165\u5ea6\u4e3a$0$\uff0c\u5219\u4ee4\u5176\u5165\u6808 \u5f97\u51fa\u7ed3\u8bba \u6392\u5e8f\u5e8f\u5217\u5373\u51fa\u6808\u5e8f\u5217","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_4","text":"","title":"\u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_5","text":"\u6c42\u5165\u5ea6\uff1a$O(e)$ \u5ea6\u6570\u4e3a$0$\u7684\u9876\u70b9\u5165\u6808\uff1a$O(n)$ \u82e5\u6709\u5411\u56fe\u65e0\u73af\uff0c\u5219\u6bcf\u4e2a\u9876\u70b9\u51fa\u6808\u540e\u5165\u5ea6\u51cf1\uff1a$O(n)$ \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n + e)$","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_6","text":"","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_7","text":"\u4e0e\u6b63\u5411\u62d3\u6251\u6392\u5e8f\u76f8\u53cd\uff0c\u64cd\u4f5c\u7684\u5bf9\u8c61\u4e3a \u51fa\u5ea6 \u4e3a$0$\u7684\u70b9","title":"\u9006\u62d3\u6251\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_8","text":"[[\u5173\u952e\u8def\u5f84]]","title":"\u5e94\u7528:"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u4e24\u79cd\u7b97\u6cd5\uff1a Prim \u3001 Kruskal \u4f18\u5316\uff1a [[\u5806|\u666e\u901a\u4e8c\u53c9\u5806]]\uff1a$O(E * \\lg{V})$ [[\u6590\u6ce2\u90a3\u5951\u5806]]\uff1aPrim->$O(E + V * \\lg {V})$ \u7b97\u6cd5\u5b9e\u8d28\uff1a\u8d2a\u5fc3\uff08\u6700\u597d\u7684\u9009\u62e9\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u80fd\u627e\u5230\u4e00\u4e2a\u771f\u6b63\u7684\u5168\u5c40\u6700\u4f18\uff09 \u901a\u7528\u65b9\u6cd5\uff1a\u6bcf\u4e2a\u65f6\u523b\u751f\u957f\u6700\u5c0f\u751f\u6210\u6811\u7684 \u4e00\u6761\u8fb9\uff08\u5373\u5b89\u5168\u8fb9\uff09 \u540c\u65f6\u9075\u5b88\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u8fb9\u96c6\u5408A->\u5728\u6bcf\u4e00\u904d\u5faa\u73af\u4e4b\u524d\uff0cA\u662f\u67d0\u9897\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u4e2a\u5b50\u96c6->\u9009\u62e9\u4e00\u6761\u8fb9$(u,v)$\uff0c\u4f7f\u5f97$A\\cup (u,v)$\u4e5f\u662f\u67d0\u9897\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b50\u96c6\uff0c\u8fd9\u6837\u7684\u8fb9\u79f0\u4e3a==\u5b89\u5168\u8fb9== \u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u65b9\u5f0f \u521d\u59cb\u5316\uff1a\u76f4\u63a5\u4ee4\u96c6\u5408A\u6ee1\u8db3\u5faa\u73af\u4e0d\u53d8\u5f0f \u4fdd\u6301\uff1a\u4e0d\u65ad\u52a0\u5165\u5b89\u5168\u8fb9\u6765\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u6210\u7acb \u7ec8\u6b62\uff1a\u65e0\u8fb9\u53ef\u52a0\u4e4b\u540e\uff0c\u5b8c\u6210\u4e86\u67d0\u68f5\u6700\u5c0f\u751f\u6210\u6811\u7684\u6784\u9020 Prim \u627e\u51fa$n-1$\u6761\u6743\u503c\u6700\u5c0f\u4e14\u65e0\u56de\u8def\u7684\u8fb9\u5373\u53ef \u601d\u8def\u4e0e[[Dijkstra]]\u57fa\u672c\u76f8\u4f3c\uff0c\u533a\u522b\u5728\u4e8ePrim \u5c06\u4e00\u6574\u4e2a\u96c6\u5408\u770b\u4f5c\u6e90\u70b9\uff0c\u53bb\u5bfb\u627e\u6700\u77ed\u8fb9 \u6982\u5ff5\uff1a [[\u57fa\u672c\u672f\u8bed#^e89c2f|\u5b50\u56fe]] [[\u57fa\u672c\u672f\u8bed#^e89c2f|\u751f\u6210\u5b50\u56fe]] [[\u57fa\u672c\u672f\u8bed#^c58be0|\u751f\u6210\u6811]] [[\u57fa\u672c\u672f\u8bed#^c58be0|\u6700\u5c0f\u751f\u6210\u6811]] \u96c6\u5408\u907f\u5708\u6cd5\uff1a\u5728\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u4e2d\uff0c\u628a\u5df2\u5728\u751f\u6210\u6811\u4e2d\u7684\u8282\u70b9\u770b\u4f5c\u4e00\u4e2a\u96c6\u5408\uff0c\u628a\u5269\u4f59\u7684\u8282\u70b9\u770b\u4f5c\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u4ece\u8fde\u63a5\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u8fb9\u9009\u62e9\u4e00\u6761 \u6743\u503c\u6700\u5c0f \u7684\u8fb9 \u5b9e\u8d28\uff1a\u8d2a\u5fc3->\u6bcf\u4e00\u6b21\u52a0\u5165\u7684\u8fb9\u603b\u662f\u6743\u91cd\u6700\u5c0f\u7684\u8fb9 \u7b97\u6cd5\u6b65\u9aa4 \u6570\u636e\u7ed3\u6784\uff1a\u90bb\u63a5\u77e9\u9635 G[u][v] = w / \u221e \uff0cbool\u6570\u7ec4 st[] \uff0c\u7528\u4e8e\u6807\u8bb0\u662f\u5426\u52a0\u5165\u96c6\u5408$U$\uff0c\u4f7f\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u7ef4\u62a4\u5c06\u4e24\u4e2a\u96c6\u5408\u8fde\u63a5\u7684\u8fb9\u7684\u6743\u91cd\uff0c\u5229\u7528\u5176\u4ed6\u7ed3\u6784\u5b58\u50a8\u76f8\u5e94\u7684\u540e\u7ee7 \u521d\u59cb\u5316\uff0c\u5c06\u6e90\u70b9\u52a0\u5165\u96c6\u5408U\uff0c\u5c06\u6e90\u70b9\u7684\u6240\u6709\u8fde\u63a5\u90bb\u63a5\u70b9\u7684\u8fb9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\uff0c \u4e0d\u65ad\u52a0\u5165\u6700\u5c0f\u7684\u8fb9\uff0c\u5e76\u6ce8\u610f\u7ef4\u62a4\u5faa\u73af\u4e0d\u53d8\u5f0f \u56fe\u89e3 Kruskal \u601d\u8def\uff1a \u5148\u5c06\u6240\u6709\u7684\u8fb9\u6309\u7167\u6743\u91cd\u6392\u5e8f\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u8d2a\u5fc3\uff1a\u4e0d\u65ad\u5730\u9009\u53d6 \u6700\u5c0f \u4e14 \u4e0d\u4f1a\u4ee4\u96c6\u5408\u4e2d\u4ea7\u751f\u56de\u8def\u7684\u8fb9 \uff0c\u5982\u679c\u4ea7\u751f\u56de\u8def\uff0c\u5219\u4e0d\u8fdb\u884c\u9009\u53d6\uff0c\u7ee7\u7eed\u8d2a\u5fc3 - \u5982\u4f55\u5224\u65ad\u52a0\u5165\u8fb9\u540e\u4e0d\u4f1a\u4ea7\u751f\u56de\u8def\uff1f - \u96c6\u5408\u907f\u5708\uff1a\u5982\u679c\u9009\u62e9\u52a0\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u4e00\u5b9a\u4f1a\u4ea7\u751f\u56de\u8def->\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u80fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408 \u7b97\u6cd5\u6b65\u9aa4 \u521d\u59cb\u5316\uff1a\u5c06\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f\uff0c \u6bcf\u4e2a\u9876\u70b9\u72ec\u7acb\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408 \u627e\u6743\u503c\u6700\u5c0f\u7684\u8fb9$(i,j)$ \u5982\u679c$i,j$\u8fde\u63a5\u4e0d\u540c\u7684\u5206\u652f\uff0c\u5219\u5bf9\u8fb9$(i,j)$\u6267\u884c\u5408\u5e76\u64cd\u4f5c \u5982\u679c\u9009\u53d6\u7684\u8fb9\u6570$\\le n-1$\uff0c\u5219\u91cd\u590d\u8fdb\u884c2\u30013 \u56fe\u89e3\uff1a \u7b97\u6cd5\u4f18\u5316 \u65f6\u95f4\u4f18\u5316\uff1a \u66f4\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5 \u4f7f\u7528\u5806\u5b58\u50a8\u8fb9\u7684\u6743\u503c \u4f7f\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u96c6\u5408","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_1","text":"\u4e24\u79cd\u7b97\u6cd5\uff1a Prim \u3001 Kruskal \u4f18\u5316\uff1a [[\u5806|\u666e\u901a\u4e8c\u53c9\u5806]]\uff1a$O(E * \\lg{V})$ [[\u6590\u6ce2\u90a3\u5951\u5806]]\uff1aPrim->$O(E + V * \\lg {V})$ \u7b97\u6cd5\u5b9e\u8d28\uff1a\u8d2a\u5fc3\uff08\u6700\u597d\u7684\u9009\u62e9\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u80fd\u627e\u5230\u4e00\u4e2a\u771f\u6b63\u7684\u5168\u5c40\u6700\u4f18\uff09 \u901a\u7528\u65b9\u6cd5\uff1a\u6bcf\u4e2a\u65f6\u523b\u751f\u957f\u6700\u5c0f\u751f\u6210\u6811\u7684 \u4e00\u6761\u8fb9\uff08\u5373\u5b89\u5168\u8fb9\uff09 \u540c\u65f6\u9075\u5b88\u4e00\u4e2a\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u8fb9\u96c6\u5408A->\u5728\u6bcf\u4e00\u904d\u5faa\u73af\u4e4b\u524d\uff0cA\u662f\u67d0\u9897\u6700\u5c0f\u751f\u6210\u6811\u7684\u4e00\u4e2a\u5b50\u96c6->\u9009\u62e9\u4e00\u6761\u8fb9$(u,v)$\uff0c\u4f7f\u5f97$A\\cup (u,v)$\u4e5f\u662f\u67d0\u9897\u6700\u5c0f\u751f\u6210\u6811\u7684\u5b50\u96c6\uff0c\u8fd9\u6837\u7684\u8fb9\u79f0\u4e3a==\u5b89\u5168\u8fb9== \u4f7f\u7528\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u65b9\u5f0f \u521d\u59cb\u5316\uff1a\u76f4\u63a5\u4ee4\u96c6\u5408A\u6ee1\u8db3\u5faa\u73af\u4e0d\u53d8\u5f0f \u4fdd\u6301\uff1a\u4e0d\u65ad\u52a0\u5165\u5b89\u5168\u8fb9\u6765\u4fdd\u6301\u5faa\u73af\u4e0d\u53d8\u5f0f\u7684\u6210\u7acb \u7ec8\u6b62\uff1a\u65e0\u8fb9\u53ef\u52a0\u4e4b\u540e\uff0c\u5b8c\u6210\u4e86\u67d0\u68f5\u6700\u5c0f\u751f\u6210\u6811\u7684\u6784\u9020","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#prim","text":"\u627e\u51fa$n-1$\u6761\u6743\u503c\u6700\u5c0f\u4e14\u65e0\u56de\u8def\u7684\u8fb9\u5373\u53ef \u601d\u8def\u4e0e[[Dijkstra]]\u57fa\u672c\u76f8\u4f3c\uff0c\u533a\u522b\u5728\u4e8ePrim \u5c06\u4e00\u6574\u4e2a\u96c6\u5408\u770b\u4f5c\u6e90\u70b9\uff0c\u53bb\u5bfb\u627e\u6700\u77ed\u8fb9","title":"Prim"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_2","text":"[[\u57fa\u672c\u672f\u8bed#^e89c2f|\u5b50\u56fe]] [[\u57fa\u672c\u672f\u8bed#^e89c2f|\u751f\u6210\u5b50\u56fe]] [[\u57fa\u672c\u672f\u8bed#^c58be0|\u751f\u6210\u6811]] [[\u57fa\u672c\u672f\u8bed#^c58be0|\u6700\u5c0f\u751f\u6210\u6811]] \u96c6\u5408\u907f\u5708\u6cd5\uff1a\u5728\u751f\u6210\u6811\u7684\u8fc7\u7a0b\u4e2d\uff0c\u628a\u5df2\u5728\u751f\u6210\u6811\u4e2d\u7684\u8282\u70b9\u770b\u4f5c\u4e00\u4e2a\u96c6\u5408\uff0c\u628a\u5269\u4f59\u7684\u8282\u70b9\u770b\u4f5c\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u4ece\u8fde\u63a5\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u8fb9\u9009\u62e9\u4e00\u6761 \u6743\u503c\u6700\u5c0f \u7684\u8fb9 \u5b9e\u8d28\uff1a\u8d2a\u5fc3->\u6bcf\u4e00\u6b21\u52a0\u5165\u7684\u8fb9\u603b\u662f\u6743\u91cd\u6700\u5c0f\u7684\u8fb9","title":"\u6982\u5ff5\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_3","text":"\u6570\u636e\u7ed3\u6784\uff1a\u90bb\u63a5\u77e9\u9635 G[u][v] = w / \u221e \uff0cbool\u6570\u7ec4 st[] \uff0c\u7528\u4e8e\u6807\u8bb0\u662f\u5426\u52a0\u5165\u96c6\u5408$U$\uff0c\u4f7f\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff08\u4f18\u5148\u961f\u5217\uff09\u7ef4\u62a4\u5c06\u4e24\u4e2a\u96c6\u5408\u8fde\u63a5\u7684\u8fb9\u7684\u6743\u91cd\uff0c\u5229\u7528\u5176\u4ed6\u7ed3\u6784\u5b58\u50a8\u76f8\u5e94\u7684\u540e\u7ee7 \u521d\u59cb\u5316\uff0c\u5c06\u6e90\u70b9\u52a0\u5165\u96c6\u5408U\uff0c\u5c06\u6e90\u70b9\u7684\u6240\u6709\u8fde\u63a5\u90bb\u63a5\u70b9\u7684\u8fb9\u52a0\u5165\u4f18\u5148\u961f\u5217\u4e2d\uff0c \u4e0d\u65ad\u52a0\u5165\u6700\u5c0f\u7684\u8fb9\uff0c\u5e76\u6ce8\u610f\u7ef4\u62a4\u5faa\u73af\u4e0d\u53d8\u5f0f \u56fe\u89e3","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#kruskal","text":"","title":"Kruskal"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_4","text":"\u5148\u5c06\u6240\u6709\u7684\u8fb9\u6309\u7167\u6743\u91cd\u6392\u5e8f\uff0c\u63a5\u4e0b\u6765\u5f00\u59cb\u8d2a\u5fc3\uff1a\u4e0d\u65ad\u5730\u9009\u53d6 \u6700\u5c0f \u4e14 \u4e0d\u4f1a\u4ee4\u96c6\u5408\u4e2d\u4ea7\u751f\u56de\u8def\u7684\u8fb9 \uff0c\u5982\u679c\u4ea7\u751f\u56de\u8def\uff0c\u5219\u4e0d\u8fdb\u884c\u9009\u53d6\uff0c\u7ee7\u7eed\u8d2a\u5fc3 - \u5982\u4f55\u5224\u65ad\u52a0\u5165\u8fb9\u540e\u4e0d\u4f1a\u4ea7\u751f\u56de\u8def\uff1f - \u96c6\u5408\u907f\u5708\uff1a\u5982\u679c\u9009\u62e9\u52a0\u5165\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u5728\u96c6\u5408\u4e2d\uff0c\u5219\u4e00\u5b9a\u4f1a\u4ea7\u751f\u56de\u8def->\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e0d\u80fd\u5c5e\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408","title":"\u601d\u8def\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_5","text":"\u521d\u59cb\u5316\uff1a\u5c06\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\u6309\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u6392\u5e8f\uff0c \u6bcf\u4e2a\u9876\u70b9\u72ec\u7acb\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408 \u627e\u6743\u503c\u6700\u5c0f\u7684\u8fb9$(i,j)$ \u5982\u679c$i,j$\u8fde\u63a5\u4e0d\u540c\u7684\u5206\u652f\uff0c\u5219\u5bf9\u8fb9$(i,j)$\u6267\u884c\u5408\u5e76\u64cd\u4f5c \u5982\u679c\u9009\u53d6\u7684\u8fb9\u6570$\\le n-1$\uff0c\u5219\u91cd\u590d\u8fdb\u884c2\u30013 \u56fe\u89e3\uff1a","title":"\u7b97\u6cd5\u6b65\u9aa4"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#_6","text":"\u65f6\u95f4\u4f18\u5316\uff1a \u66f4\u5feb\u7684\u6392\u5e8f\u7b97\u6cd5 \u4f7f\u7528\u5806\u5b58\u50a8\u8fb9\u7684\u6743\u503c \u4f7f\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u96c6\u5408","title":"\u7b97\u6cd5\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A6%82%E8%BF%B0/","text":"\u6700\u77ed\u8def\u6982\u8ff0 \u5355\u6e90\u6700\u77ed\u8def \u4e00\u5230\u5176\u4ed6 \u4e0d\u5b58\u5728\u8d1f\u6743\u8fb9 \u6734\u7d20[[Dijkstra]]\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a20\u5bc6\u56fe\u4f7f\u7528 \u5806\u4f18\u5316\u7248Djikstra\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(mlogn) \u7a00\u758f\u56fe\u4f7f\u7528(m\u4e00\u822c\u4e3an^2\u91cf\u7ea7) \u5b58\u5728\u8d1f\u6743\u8fb9 [[Bellman-Ford]] O(nm) \u5982\u5bf9\u7ecf\u8fc7\u8fb9\u6570\u6709\u9650\u5236\uff0c\u5219\u53ea\u80fd\u7528bellman [[SPFA]]\uff08\u4f18\u5316\u7248bellman\uff09 O(m)\u4e00\u822c\u60c5\u51b5 \u6700\u574fO(nm) \u677e\u5f1b\u64cd\u4f5c \u8fc7\u7a0b\uff1a \u6d4b\u8bd5\u662f\u5426\u53ef\u4ee5\u5bf9\u4ece$s$\u5230$v$\u7684\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u6539\u5584 \u6d4b\u8bd5\u65b9\u6cd5\uff1a \u5c06\u4ece\u8282\u70b9$s$\u5230\u8282\u70b9$u$\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u52a0\u4e0a\u8282\u70b9$u$\u5230\u8282\u70b9$v$\u4e4b\u95f4\u7684\u8fb9\u6743\u91cd\uff0c\u5e76\u4e8e\u5f53\u524d\u7684$s$\u5230$v$\u7684\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5c0f\u5219\u8fdb\u884c\u66f4\u65b0 \u677e\u5f1b\u65f6\u552f\u4e00\u5bfc\u81f4\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u548c\u524d\u9a71\u8282\u70b9\u53d1\u751f\u53d8\u5316\u7684\u64cd\u4f5c\uff0c \u7b97\u6cd5\u4e4b\u95f4\u7684\u4e0d\u540c\u4e4b\u5904\u662f\u5bf9\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u7684\u6b21\u6570\u548c\u677e\u5f1b\u8fb9\u7684\u6b21\u5e8f\u6709\u6240\u4e0d\u540c Dijkstra:\u5bf9\u6bcf\u4e00\u6761\u8fb9\u4ec5\u677e\u5f1b\u4e00\u6b21 Bellman-Ford:\u5bf9\u6bcf\u6761\u8fb9\u90fd\u677e\u5f1b$\\lvert V \\rvert - 1$ \u6b21 \u6700\u77ed\u8def\u7684\u6027\u8d28\uff1a \u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u6700\u77ed\u8def\u5f84\u5305\u542b\u7740\u5176\u4ed6\u6700\u77ed\u8def\u5f84 \u591a\u6e90\u6700\u77ed\u8def \u8d77\u70b9\u7ec8\u70b9\u4e0d\u786e\u5b9a [[Floyd]] O(n^3)","title":"\u6700\u77ed\u8def\u6982\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A6%82%E8%BF%B0/#_1","text":"","title":"\u6700\u77ed\u8def\u6982\u8ff0"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A6%82%E8%BF%B0/#_2","text":"\u4e00\u5230\u5176\u4ed6 \u4e0d\u5b58\u5728\u8d1f\u6743\u8fb9 \u6734\u7d20[[Dijkstra]]\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(n^2) \u7a20\u5bc6\u56fe\u4f7f\u7528 \u5806\u4f18\u5316\u7248Djikstra\u7b97\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6O(mlogn) \u7a00\u758f\u56fe\u4f7f\u7528(m\u4e00\u822c\u4e3an^2\u91cf\u7ea7) \u5b58\u5728\u8d1f\u6743\u8fb9 [[Bellman-Ford]] O(nm) \u5982\u5bf9\u7ecf\u8fc7\u8fb9\u6570\u6709\u9650\u5236\uff0c\u5219\u53ea\u80fd\u7528bellman [[SPFA]]\uff08\u4f18\u5316\u7248bellman\uff09 O(m)\u4e00\u822c\u60c5\u51b5 \u6700\u574fO(nm) \u677e\u5f1b\u64cd\u4f5c \u8fc7\u7a0b\uff1a \u6d4b\u8bd5\u662f\u5426\u53ef\u4ee5\u5bf9\u4ece$s$\u5230$v$\u7684\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u6539\u5584 \u6d4b\u8bd5\u65b9\u6cd5\uff1a \u5c06\u4ece\u8282\u70b9$s$\u5230\u8282\u70b9$u$\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\u8ddd\u79bb\u52a0\u4e0a\u8282\u70b9$u$\u5230\u8282\u70b9$v$\u4e4b\u95f4\u7684\u8fb9\u6743\u91cd\uff0c\u5e76\u4e8e\u5f53\u524d\u7684$s$\u5230$v$\u7684\u6700\u77ed\u8def\u5f84\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5c0f\u5219\u8fdb\u884c\u66f4\u65b0 \u677e\u5f1b\u65f6\u552f\u4e00\u5bfc\u81f4\u6700\u77ed\u8def\u5f84\u4f30\u8ba1\u548c\u524d\u9a71\u8282\u70b9\u53d1\u751f\u53d8\u5316\u7684\u64cd\u4f5c\uff0c \u7b97\u6cd5\u4e4b\u95f4\u7684\u4e0d\u540c\u4e4b\u5904\u662f\u5bf9\u6bcf\u4e00\u6761\u8fb9\u8fdb\u884c\u677e\u5f1b\u7684\u6b21\u6570\u548c\u677e\u5f1b\u8fb9\u7684\u6b21\u5e8f\u6709\u6240\u4e0d\u540c Dijkstra:\u5bf9\u6bcf\u4e00\u6761\u8fb9\u4ec5\u677e\u5f1b\u4e00\u6b21 Bellman-Ford:\u5bf9\u6bcf\u6761\u8fb9\u90fd\u677e\u5f1b$\\lvert V \\rvert - 1$ \u6b21 \u6700\u77ed\u8def\u7684\u6027\u8d28\uff1a \u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u6700\u77ed\u8def\u5f84\u5305\u542b\u7740\u5176\u4ed6\u6700\u77ed\u8def\u5f84","title":"\u5355\u6e90\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E6%A6%82%E8%BF%B0/#_3","text":"\u8d77\u70b9\u7ec8\u70b9\u4e0d\u786e\u5b9a [[Floyd]] O(n^3)","title":"\u591a\u6e90\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/","text":"\u6811\u548c\u56fe \u6811\u662f \u65e0\u73af\u3001\u8fde\u901a \u7684\u7279\u6b8a\u56fe \u56fe\u7684\u5206\u7c7b\uff1a \u6709\u5411\u56fe \u65e0\u5411\u56fe\uff08\u7279\u6b8a\u7684\u6709\u5411\u53cc\u5411\u56fe\uff09 \u6709\u5411\u56fe \u90bb\u63a5\u77e9\u9635 g[a][b] \u5b58\u50a8a\u2014\u2014>b\u7684\u5173\u7cfb \u5b58\u50a8\u91cd\u8fb9\u65f6\u4ec5\u4fdd\u7559\u4e00\u8fb9 \u7f3a\u70b9\uff1a\u6d6a\u8d39\u7a7a\u95f4 \u90bb\u63a5\u8868\uff08\u5355\u94fe\u8868\uff09 \u4e3a\u6bcf\u4e00\u4e2a\u70b9\u5b58\u50a8\u4e00\u4e2a\u5355\u94fe\u8868 \u6bcf\u4e2a\u94fe\u8868\u8868\u793a\u8be5\u7ed3\u70b9\u6240\u6709\u8fde\u901a\u7684 \u63d2\u5165\u65f6\u5019\u4e00\u822c\u9009\u62e9\u5934\u63d2 \u6811\u548c\u56fe\u7684\u5b58\u50a8\uff1a int h[N], e[M], ne[M], idx; void connect(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } \u904d\u5386 \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u7279\u70b9\uff1a\u53ef\u4ee5\u7b97\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684\u5927\u5c0f bool st[N]; void dfs(int u){ st[u] = true; for(int i = h[u];i != -1;i = ne[i]){ int j = e[i]; if(!st[j]) dfs(j); } } 2. \u5bbd\u5ea6\u4f18\u5148\u904d\u5386 \u4f8b\u9898 DFS\uff1a\u6811\u7684\u91cd\u5fc3 \u95ee\u9898\uff1a 1. \u600e\u4e48\u5b9e\u73b0\u5220\u9664\u7ed3\u70b9 2. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4ece\u4efb\u610f\u7ed3\u70b9\u5f00\u59cb\u6df1\u641c\uff1a\u56fe\u662f \u65e0\u5411\u56fe #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1e5+10, M = 2 * N; int h[N], e[M], ne[M], idx; bool st[N]; int n, m, ans = N; void connect(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } //\u8fd4\u56de\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f int dfs(int u){ st[u] = true; //\u6807\u8bb0 int sum = 1, res = 0; //sum\u8bb0\u5f55\u7ed3\u70b9\u603b\u6570\uff0c\u4f46\u5e76\u4e0d\u4f5c\u4e3a\u7ed3\u679c\u8f93\u51fa, //res\u8bb0\u5f55\u7ed3\u679c for(int i = h[u];i != -1;i = ne[i]){ //\u904d\u5386\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 int j = e[i]; if(!st[j]){ int s = dfs(j); //u\u7ed3\u70b9\u7684\u5355\u68f5\u5b50\u6811\u7684\u8282\u70b9\u6570 res = max(s, res); //\u8bb0\u5f55\u6700\u5927\u8fde\u901a\u5b50\u6811\u7684\u8282\u70b9\u6570 sum += s; //\u6c42\u548c\uff0c\u6c42\u6240\u6709\u4ee5j\u4e3a\u6839\u7684\u6811\u7684\u5927\u5c0f } } res = max(res, n - sum); //n-sum\u6307\u7684\u662f ans = min(ans, res); //\u6bd4\u8f83\uff0c\u83b7\u53d6\u8f83\u5c0f\u503c return sum; //\u8fd4\u56de\u548c } int main(){ cin >> n; int a, b; memset(h, -1, sizeof h); for(int i = 0;i < n - 1;i++){ scanf(\"%d%d\", &a, &b); connect(a, b); //\u65e0\u5411\u56fe\u7684\u53cc\u5411\u8fde\u63a5 connect(b, a); } dfs(1); //\u4e3a\u4ec0\u4e48\u4ece\u4efb\u610f\u70b9\u641c\u7d22\u90fd\u53ef\u4ee5\uff1f\uff1f\uff1f\uff1f\uff1f cout << ans << endl; return 0; } BFS\uff1a\u56fe\u4e2d\u70b9\u7684\u5c42\u6b21 #include <iostream> #include <cstring> #include <queue> using namespace std; const int N = 1e5+10; int h[N], e[N], ne[N], idx; int recorder[N]; int n, m; queue<int> q; void add(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } int bfs(){ memset(recorder, -1, sizeof recorder); recorder[1] = 0; q.push(1); while(!q.empty()){ int t = q.front(); q.pop(); for(int i = h[t];i != -1;i = ne[i]){ int j = e[i]; if(recorder[j] == -1){ recorder[j] = recorder[t] + 1; q.push(j); } } } return recorder[n]; } int main(){ cin >> n >> m; memset(h, -1, sizeof h); //\u6ce8\u610f\u5355\u94fe\u8868\u7684\u521d\u59cb\u5316 int a, b; while(m--){ cin >> a >> b; add(a, b); } cout << bfs() << endl; return 0; } \u6709\u5411\u56fe\u7684\u5bbd\u641c\u7684\u4e00\u4e2a\u7ecf\u5178\u5e94\u7528\uff1a\u56fe\u7684\u62d3\u8865\u5e8f\u5217 \u62d3\u8865\u7684\u610f\u4e49\uff1a\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u662f\u4ece\u524d\u6307\u5411\u540e\u7684 \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6709\u5165\u5ea6\uff0c\u51fa\u5ea6\uff08\u5ea6\u6570\uff09 - \u5165\u5ea6\uff1a\u6709\u591a\u5c11\u6761\u8fb9\u6307\u5411\u81ea\u5df1 - \u51fa\u5ea6\uff1a\u6709\u591a\u5c11\u6761\u8fb9\u51fa\u53bb \u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9 \u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9 \u6a21\u677f\uff1a d[]\u5b58\u50a8\u6240\u6709\u70b9\u7684\u5165\u5ea6 queue<int> q;\uff08\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f\uff09 while(!q.empty()){ auto t = q.front(); q.pop(); \u679a\u4e3e\u6240\u6709\u7684\u51fa\u8fb9: \u5220\u9664t\u2014\u2014>j\u7684\u8fb9\uff0c\u4f7fd[j]--; if(d[j] == 0) \u8bf4\u660e\u5f53\u524d\u7684\u62d3\u8865\u5e8f\u5217\u6210\u7acb //\u56e0\u4e3a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90fd\u53ef\u4ee5\u6210\u4e3a\u62d3\u8865\u5e8f\u5217\u7684\u8d77\u70b9 q.push(j); } \u95ee\u9898\uff1a - \u5982\u4f55\u8ba1\u7b97\u5165\u5ea6\uff1a\u5728\u8fde\u63a5\u8fb9\u7684\u65f6\u5019\uff0c\u5bf9\u540e\u8005\u7684\u5165\u5ea6+1\u5373\u53ef - \u5982\u4f55\u627e\u5230\u62d3\u8865\u5e8f\u5217\uff1a\u4f7f\u7528\u6a21\u62df\u961f\u5217\u65f6\uff0c\u961f\u5217\u7684\u7684\u5143\u7d20\u5373\u662f\u62d3\u8865\u5e8f\u5217 #include <iostream> #include <cstring> #include <queue> using namespace std; const int N = 1e5 + 10; int n, m; int h[N], e[N], ne[N], idx; int q[N], d[N]; void add(int a, int b){ //\u8fde\u63a5\u8fb9 e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } bool topsort(){ int hh = 0, tt = -1; for(int i = 1;i <= n;i++){ if(d[i] == 0){ q[++tt] = i; } } while(tt >= hh){ int t = q[hh++]; for(int i = h[t];i != -1;i = ne[i]){ int j = e[i]; d[j]--; if(d[j] == 0) q[++tt] = j; } } return tt == n - 1; } int main(){ memset(h, -1, sizeof h); cin >> n >> m; int a, b; while(m--){ cin >> a >> b; add(a, b); d[b]++; //\u7edf\u8ba1\u5165\u5ea6 } if(topsort()){ for(int i = 0;i < n;i++){ printf(\"%d \",q[i]); //\u6253\u5370\u62d3\u8865\u5e8f\u5217 } puts(\"\"); } else{ printf(\"-1\"); } return 0; }","title":"\u6811\u548c\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#_1","text":"\u6811\u662f \u65e0\u73af\u3001\u8fde\u901a \u7684\u7279\u6b8a\u56fe \u56fe\u7684\u5206\u7c7b\uff1a \u6709\u5411\u56fe \u65e0\u5411\u56fe\uff08\u7279\u6b8a\u7684\u6709\u5411\u53cc\u5411\u56fe\uff09","title":"\u6811\u548c\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#_2","text":"\u90bb\u63a5\u77e9\u9635 g[a][b] \u5b58\u50a8a\u2014\u2014>b\u7684\u5173\u7cfb \u5b58\u50a8\u91cd\u8fb9\u65f6\u4ec5\u4fdd\u7559\u4e00\u8fb9 \u7f3a\u70b9\uff1a\u6d6a\u8d39\u7a7a\u95f4 \u90bb\u63a5\u8868\uff08\u5355\u94fe\u8868\uff09 \u4e3a\u6bcf\u4e00\u4e2a\u70b9\u5b58\u50a8\u4e00\u4e2a\u5355\u94fe\u8868 \u6bcf\u4e2a\u94fe\u8868\u8868\u793a\u8be5\u7ed3\u70b9\u6240\u6709\u8fde\u901a\u7684 \u63d2\u5165\u65f6\u5019\u4e00\u822c\u9009\u62e9\u5934\u63d2 \u6811\u548c\u56fe\u7684\u5b58\u50a8\uff1a int h[N], e[M], ne[M], idx; void connect(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } \u904d\u5386 \u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u7279\u70b9\uff1a\u53ef\u4ee5\u7b97\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u7684\u5927\u5c0f bool st[N]; void dfs(int u){ st[u] = true; for(int i = h[u];i != -1;i = ne[i]){ int j = e[i]; if(!st[j]) dfs(j); } } 2. \u5bbd\u5ea6\u4f18\u5148\u904d\u5386","title":"\u6709\u5411\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#_3","text":"","title":"\u4f8b\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#dfs","text":"\u95ee\u9898\uff1a 1. \u600e\u4e48\u5b9e\u73b0\u5220\u9664\u7ed3\u70b9 2. \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u4ece\u4efb\u610f\u7ed3\u70b9\u5f00\u59cb\u6df1\u641c\uff1a\u56fe\u662f \u65e0\u5411\u56fe #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int N = 1e5+10, M = 2 * N; int h[N], e[M], ne[M], idx; bool st[N]; int n, m, ans = N; void connect(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } //\u8fd4\u56de\u4ee5u\u4e3a\u6839\u7684\u5b50\u6811\u5927\u5c0f int dfs(int u){ st[u] = true; //\u6807\u8bb0 int sum = 1, res = 0; //sum\u8bb0\u5f55\u7ed3\u70b9\u603b\u6570\uff0c\u4f46\u5e76\u4e0d\u4f5c\u4e3a\u7ed3\u679c\u8f93\u51fa, //res\u8bb0\u5f55\u7ed3\u679c for(int i = h[u];i != -1;i = ne[i]){ //\u904d\u5386\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9 int j = e[i]; if(!st[j]){ int s = dfs(j); //u\u7ed3\u70b9\u7684\u5355\u68f5\u5b50\u6811\u7684\u8282\u70b9\u6570 res = max(s, res); //\u8bb0\u5f55\u6700\u5927\u8fde\u901a\u5b50\u6811\u7684\u8282\u70b9\u6570 sum += s; //\u6c42\u548c\uff0c\u6c42\u6240\u6709\u4ee5j\u4e3a\u6839\u7684\u6811\u7684\u5927\u5c0f } } res = max(res, n - sum); //n-sum\u6307\u7684\u662f ans = min(ans, res); //\u6bd4\u8f83\uff0c\u83b7\u53d6\u8f83\u5c0f\u503c return sum; //\u8fd4\u56de\u548c } int main(){ cin >> n; int a, b; memset(h, -1, sizeof h); for(int i = 0;i < n - 1;i++){ scanf(\"%d%d\", &a, &b); connect(a, b); //\u65e0\u5411\u56fe\u7684\u53cc\u5411\u8fde\u63a5 connect(b, a); } dfs(1); //\u4e3a\u4ec0\u4e48\u4ece\u4efb\u610f\u70b9\u641c\u7d22\u90fd\u53ef\u4ee5\uff1f\uff1f\uff1f\uff1f\uff1f cout << ans << endl; return 0; }","title":"DFS\uff1a\u6811\u7684\u91cd\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#bfs","text":"#include <iostream> #include <cstring> #include <queue> using namespace std; const int N = 1e5+10; int h[N], e[N], ne[N], idx; int recorder[N]; int n, m; queue<int> q; void add(int a, int b){ e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } int bfs(){ memset(recorder, -1, sizeof recorder); recorder[1] = 0; q.push(1); while(!q.empty()){ int t = q.front(); q.pop(); for(int i = h[t];i != -1;i = ne[i]){ int j = e[i]; if(recorder[j] == -1){ recorder[j] = recorder[t] + 1; q.push(j); } } } return recorder[n]; } int main(){ cin >> n >> m; memset(h, -1, sizeof h); //\u6ce8\u610f\u5355\u94fe\u8868\u7684\u521d\u59cb\u5316 int a, b; while(m--){ cin >> a >> b; add(a, b); } cout << bfs() << endl; return 0; }","title":"BFS\uff1a\u56fe\u4e2d\u70b9\u7684\u5c42\u6b21"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E5%92%8C%E5%9B%BE/#_4","text":"\u62d3\u8865\u7684\u610f\u4e49\uff1a\u4e00\u4e2a\u56fe\u4e2d\uff0c\u6240\u6709\u7684\u8fb9\u90fd\u662f\u4ece\u524d\u6307\u5411\u540e\u7684 \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u6709\u5165\u5ea6\uff0c\u51fa\u5ea6\uff08\u5ea6\u6570\uff09 - \u5165\u5ea6\uff1a\u6709\u591a\u5c11\u6761\u8fb9\u6307\u5411\u81ea\u5df1 - \u51fa\u5ea6\uff1a\u6709\u591a\u5c11\u6761\u8fb9\u51fa\u53bb \u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9 \u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u4e00\u5b9a\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5165\u5ea6\u4e3a0\u7684\u70b9 \u6a21\u677f\uff1a d[]\u5b58\u50a8\u6240\u6709\u70b9\u7684\u5165\u5ea6 queue<int> q;\uff08\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\u5165\u961f\uff09 while(!q.empty()){ auto t = q.front(); q.pop(); \u679a\u4e3e\u6240\u6709\u7684\u51fa\u8fb9: \u5220\u9664t\u2014\u2014>j\u7684\u8fb9\uff0c\u4f7fd[j]--; if(d[j] == 0) \u8bf4\u660e\u5f53\u524d\u7684\u62d3\u8865\u5e8f\u5217\u6210\u7acb //\u56e0\u4e3a\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9\uff0c\u90fd\u53ef\u4ee5\u6210\u4e3a\u62d3\u8865\u5e8f\u5217\u7684\u8d77\u70b9 q.push(j); } \u95ee\u9898\uff1a - \u5982\u4f55\u8ba1\u7b97\u5165\u5ea6\uff1a\u5728\u8fde\u63a5\u8fb9\u7684\u65f6\u5019\uff0c\u5bf9\u540e\u8005\u7684\u5165\u5ea6+1\u5373\u53ef - \u5982\u4f55\u627e\u5230\u62d3\u8865\u5e8f\u5217\uff1a\u4f7f\u7528\u6a21\u62df\u961f\u5217\u65f6\uff0c\u961f\u5217\u7684\u7684\u5143\u7d20\u5373\u662f\u62d3\u8865\u5e8f\u5217 #include <iostream> #include <cstring> #include <queue> using namespace std; const int N = 1e5 + 10; int n, m; int h[N], e[N], ne[N], idx; int q[N], d[N]; void add(int a, int b){ //\u8fde\u63a5\u8fb9 e[idx] = b; ne[idx] = h[a]; h[a] = idx++; } bool topsort(){ int hh = 0, tt = -1; for(int i = 1;i <= n;i++){ if(d[i] == 0){ q[++tt] = i; } } while(tt >= hh){ int t = q[hh++]; for(int i = h[t];i != -1;i = ne[i]){ int j = e[i]; d[j]--; if(d[j] == 0) q[++tt] = j; } } return tt == n - 1; } int main(){ memset(h, -1, sizeof h); cin >> n >> m; int a, b; while(m--){ cin >> a >> b; add(a, b); d[b]++; //\u7edf\u8ba1\u5165\u5ea6 } if(topsort()){ for(int i = 0;i < n;i++){ printf(\"%d \",q[i]); //\u6253\u5370\u62d3\u8865\u5e8f\u5217 } puts(\"\"); } else{ printf(\"-1\"); } return 0; }","title":"\u6709\u5411\u56fe\u7684\u5bbd\u641c\u7684\u4e00\u4e2a\u7ecf\u5178\u5e94\u7528\uff1a\u56fe\u7684\u62d3\u8865\u5e8f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/","text":"\u6811\u8868\u67e5\u627e \u4e8c\u53c9\u67e5\u627e\u6811(BST) \u6027\u8d28( \u5de6\u5b50\u6811<\u6839<\u53f3\u5b50\u6811 ) \u82e5\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u503c \u82e5\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u6839\u8282\u70b9\u7684\u503c \u5176\u5de6\u53f3\u5b50\u6811\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811 \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u662f\u9012\u589e\u5e8f\u5217 \u5e94\u7528 \u67e5\u627e\u3001\u6392\u5e8f \u57fa\u672c\u64cd\u4f5c \u67e5\u627e \u57fa\u672c\u601d\u8def\uff1a\u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684[[\u6811\u8868\u67e5\u627e#\u6027\u8d28 \u5de6\u5b50\u6811 \u6839 \u53f3\u5b50\u6811|\u6027\u8d28]] \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u4e3a\u7a7a\uff1a\u67e5\u627e\u5931\u8d25 \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5927\u4e8ex\uff1a\u9012\u5f52\u6216\u8fed\u4ee3\u5de6\u5b50\u6811 \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5c0f\u4e8ex\uff1a\u9012\u5f52\u6216\u8fed\u4ee3\u53f3\u5b50\u6811 \u76f8\u7b49\uff1a\u67e5\u627e\u6210\u529f\uff01\uff01 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(h)$ h\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6 \u4ee3\u7801\uff1a public bool search(T num){ BiNode<T>* node = root; if(root == NULL) return false; else{ if(node->data == num) return true; else if(node->data > num) return searchin(node->lchild, num); else return searchin(node->rchild, num); } } private bool searchin(BiNode<T>* node, T num){ if(node->data == num) return true; else if(node->data > num) return searchin(node->lchild, num); else return searchin(node->rchild, num); } \u63d2\u5165 \u57fa\u672c\u601d\u8def\uff1a\u5229\u7528\u67e5\u627e \u5982\u679c\u67e5\u627e\u6210\u529f\uff0c\u4e0d\u63d2\u5165 \u67e5\u627e\u5931\u8d25\uff0c\u5728\u7a7a\u7ed3\u70b9\u65f6\u65b0\u5efa\u9700\u8981\u63d2\u5165\u7684\u7ed3\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(h)$ h\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6 \u4ee3\u7801\uff1a bool insert(T num){ return insertin(root, num); } bool insertin(BiNode<T>* &node, T num){ //\u5bf9lchild\u7684\u6307\u9488\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539lchild\u7684\u5730\u5740 if(node == NULL){ BiNode<T>* newnode = new BiNode<T>; newnode->data = num; node = newnode; return true; } if(node->data == num){ return false; } else if(node->data > num) return insertin(node->lchild, num); else return insertin(node->rchild, num); } \u5efa\u6811 \u57fa\u672c\u601d\u8def\uff1a\u5efa\u6811\u5373\u4e3a\u4e0d\u65ad\u63d2\u5165\u7684\u8fc7\u7a0b \u6ce8\u610f\uff1a\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u63d2\u5165\u540c\u4e00\u7ec4\u6570\u5b57\uff0c\u6700\u540e\u751f\u6210\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u53ef\u80fd\u4e0d\u540c \u4ee3\u7801\uff1a void create(T num[], int n){ for(int i = 0;i < n;i++){ insert(num[i]); } } \u5220\u9664 \u57fa\u672c\u601d\u8def\uff1a \u65e0\u5b50\u6811\uff1a\u76f4\u63a5\u5220\u9664 \u5b58\u5728\u5de6\u5b50\u6811\uff1a\u4ee4\u5de6\u5b50\u6811\u66ff\u4ee3\u5176\u4f4d\u7f6e \u5b58\u5728\u53f3\u5b50\u6811\uff1a\u4ee4\u53f3\u5b50\u6811\u66ff\u4ee3\u5176\u4f4d\u7f6e \u5de6\u53f3\u5b50\u6811\u90fd\u5b58\u5728\uff1a\u7528\u76f4\u63a5\u524d\u9a71\uff08\u6216\u76f4\u63a5\u540e\u7ee7\uff09\u66ff\u4ee3\u5176\u4f4d\u7f6e\uff0c\u518d\u5220\u9664\u5176\u76f4\u63a5\u524d\u9a71\uff08\u76f4\u63a5\u540e\u7ee7\uff09 \u76f4\u63a5\u524d\u9a71\u67e5\u627e\uff1a\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u7ed3\u70b9p\u7684\u76f4\u63a5\u524d\u9a71\u4e3a\u5de6\u5b50\u6811\u7684\u6700\u53f3\u7ed3\u70b9 \u76f4\u63a5\u540e\u7ee7\u67e5\u627e\uff1a\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u7ed3\u70b9p\u7684\u76f4\u63a5\u540e\u7ee7\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(\\log{n})$ \u4ee3\u7801\uff1a bool remove(T num){ return remove(root, num); } bool remove(BiNode<T>* &node, T num){ if(node == NULL) return false; if(node->data > num) return remove(node->lchild, num); else if(node->data < num) return remove(node->rchild, num); else{ if(!(node->rchild) && !(node->lchild)) {node = NULL; return true;} //\u5de6\u53f3\u5b50\u6811\u5e76\u4e0d\u5b58\u5728 else if(node->lchild){ BiNode<T>* alternode = node->lchild; while(alternode->rchild) alternode = alternode->rchild; //\u5bfb\u627e\u5de6\u5b50\u6811\u7684\u6700\u6709\u5b50\u6811\uff08\u76f4\u63a5\u524d\u9a71\uff09 node->data = alternode->data; return remove(node->lchild, alternode->data); } else if(node->rchild){ BiNode<T>* alternode = node->rchild; while(alternode->lchild) alternode = alternode->lchild; node->data = alternode->data; return remove(node->rchild, alternode->data); } } return false; } \u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811(AVL\u6811) \u5bf9\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811\u6765\u8bf4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6811\u7684\u9ad8\u5ea6\uff0c\u56e0\u6b64\uff0c\u901a\u8fc7\u4e00\u4e2a\u5e73\u8861\u7684\u64cd\u4f5c\uff0c\u4f7f\u4e8c\u53c9\u67e5\u627e\u6570\u80fd\u591f\u6700\u5927\u7a0b\u5ea6\u4e0a\u5229\u7528\uff0c\u964d\u4f4e\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6 \u6027\u8d28\uff1a \u5e73\u8861\u56e0\u5b50 \uff1a\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee \u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71 \u5de6\u53f3\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811 \u5355\u6b21\u63d2\u5165\u5220\u9664\u540e\uff0c\u81f3\u591a\u6709$O(1)$\u5904\u51fa\u73b0\u4e0d\u5e73\u8861 \u603b\u53ef\u4ee5\u5728$O(\\log{n})$\u65f6\u95f4\u5185\uff0c\u4f7f$O(1)$\u9664\u4e0d\u5e73\u8861\u91cd\u65b0\u8c03\u6574\u4e3a\u5e73\u8861 \u8c03\u6574\u5e73\u8861\u7684\u65b9\u6cd5 \u63d2\u5165\u65b0\u7ed3\u70b9\u6216\u5220\u9664\u7ed3\u70b9x\u540e\uff0c\u4ece\u8be5\u8282\u70b9\u5411\u4e0a\u627e\u5230\u6700\u8fd1\u7684\u4e0d\u5e73\u8861\u7ed3\u70b9A\uff0c\u4ee5\u4e0b\u578b\u9488\u5bf9\u8def\u5f84\u533a\u5206 \u63d2\u5165 \u7ed3\u70b9\u53ea\u9700\u8981\u91cd\u5e73\u8861 \u4e00\u6b21 \u5220\u9664 \u5219 \u81f3\u5c11\u4e00\u6b21 \uff08\u5411\u6811\u6839\u4f20\u9012\uff09 LL\u578b \u8def\u5f84\u7684\u524d\u4e24\u4e2a\u90fd\u662f\u5de6\u5b50\u6811\uff0c\u5373\u4e3a LL\u578b \uff08x\u63d2\u5165\u5728A\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\uff0c\u5bfc\u81f4\u4e86\u7ed3\u70b9A\u4e0d\u5e73\u8861\uff09 LL\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> LL_Rotation(BiNode<T> &T){ BiNode<T> temp = T->lchild; T->lchild = temp->rchild; temp->rchild = T; updataHeight(T); updateHeight(temp); return temp; } RR\u578b \u8def\u5f84\u7684\u524d\u4e24\u4e2a\u90fd\u662f\u53f3\u5b50\u6811\uff0c\u5373\u4e3aRR\u578b RR\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> RR_Rotation(BiNode<T> &T){ BiNode<T> temp = T->rchild; T->rchild = temp->lchild; temp->lchild = T; updateHeight(T); update(temp); return temp; } LR\u578b \u8def\u5f84\u7684\u524d\u4e24\u4e2a\u5b50\u6811\u4f9d\u6b21\u662f\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\uff0c\u5373\u4e3aLR\u578b LR\u65cb\u8f6c\uff1a\u5206\u4e3a\u4e24\u6b21\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> LR_Rotation(BiNode<T> &T){ T->lchild = RR_Rotation(T->lchild); return LL_Rotation(T); } RL\u578b \u8def\u5f84\u7684\u524d\u4e24\u4e2a\u5b50\u6811\u4f9d\u6b21\u662f\u53f3\u5b50\u6811\u3001\u5de6\u5b50\u6811\uff0c\u5373\u4e3aRL\u578b RL\u65cb\u8f6c\uff1a\u540c\u5206\u4e3a\u4e24\u6b21\u65cb\u8f6c \u5982\u4f55\u5224\u65ad\uff1f\uff1f\uff1f","title":"\u6811\u8868\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_1","text":"","title":"\u6811\u8868\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#bst","text":"","title":"\u4e8c\u53c9\u67e5\u627e\u6811(BST)"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_2","text":"\u82e5\u5de6\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u5de6\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5747\u5c0f\u4e8e\u6839\u8282\u70b9\u7684\u503c \u82e5\u53f3\u5b50\u6811\u975e\u7a7a\uff0c\u5219\u53f3\u5b50\u6811\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u5747\u5927\u4e8e\u6839\u8282\u70b9\u7684\u503c \u5176\u5de6\u53f3\u5b50\u6811\u672c\u8eab\u53c8\u662f\u4e00\u68f5\u4e8c\u53c9\u67e5\u627e\u6811 \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u662f\u9012\u589e\u5e8f\u5217","title":"\u6027\u8d28(\u5de6\u5b50\u6811&lt;\u6839&lt;\u53f3\u5b50\u6811)"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_3","text":"\u67e5\u627e\u3001\u6392\u5e8f","title":"\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_4","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_5","text":"\u57fa\u672c\u601d\u8def\uff1a\u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u7684[[\u6811\u8868\u67e5\u627e#\u6027\u8d28 \u5de6\u5b50\u6811 \u6839 \u53f3\u5b50\u6811|\u6027\u8d28]] \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u4e3a\u7a7a\uff1a\u67e5\u627e\u5931\u8d25 \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5927\u4e8ex\uff1a\u9012\u5f52\u6216\u8fed\u4ee3\u5de6\u5b50\u6811 \u5982\u679c\u5f53\u524d\u7ed3\u70b9\u7684\u503c\u5c0f\u4e8ex\uff1a\u9012\u5f52\u6216\u8fed\u4ee3\u53f3\u5b50\u6811 \u76f8\u7b49\uff1a\u67e5\u627e\u6210\u529f\uff01\uff01 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(h)$ h\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6 \u4ee3\u7801\uff1a public bool search(T num){ BiNode<T>* node = root; if(root == NULL) return false; else{ if(node->data == num) return true; else if(node->data > num) return searchin(node->lchild, num); else return searchin(node->rchild, num); } } private bool searchin(BiNode<T>* node, T num){ if(node->data == num) return true; else if(node->data > num) return searchin(node->lchild, num); else return searchin(node->rchild, num); }","title":"\u67e5\u627e"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_6","text":"\u57fa\u672c\u601d\u8def\uff1a\u5229\u7528\u67e5\u627e \u5982\u679c\u67e5\u627e\u6210\u529f\uff0c\u4e0d\u63d2\u5165 \u67e5\u627e\u5931\u8d25\uff0c\u5728\u7a7a\u7ed3\u70b9\u65f6\u65b0\u5efa\u9700\u8981\u63d2\u5165\u7684\u7ed3\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(h)$ h\u662f\u4e8c\u53c9\u67e5\u627e\u6811\u7684\u9ad8\u5ea6 \u4ee3\u7801\uff1a bool insert(T num){ return insertin(root, num); } bool insertin(BiNode<T>* &node, T num){ //\u5bf9lchild\u7684\u6307\u9488\u7684\u5f15\u7528\uff0c\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539lchild\u7684\u5730\u5740 if(node == NULL){ BiNode<T>* newnode = new BiNode<T>; newnode->data = num; node = newnode; return true; } if(node->data == num){ return false; } else if(node->data > num) return insertin(node->lchild, num); else return insertin(node->rchild, num); }","title":"\u63d2\u5165"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_7","text":"\u57fa\u672c\u601d\u8def\uff1a\u5efa\u6811\u5373\u4e3a\u4e0d\u65ad\u63d2\u5165\u7684\u8fc7\u7a0b \u6ce8\u610f\uff1a\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u63d2\u5165\u540c\u4e00\u7ec4\u6570\u5b57\uff0c\u6700\u540e\u751f\u6210\u7684\u4e8c\u53c9\u67e5\u627e\u6811\u53ef\u80fd\u4e0d\u540c \u4ee3\u7801\uff1a void create(T num[], int n){ for(int i = 0;i < n;i++){ insert(num[i]); } }","title":"\u5efa\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_8","text":"\u57fa\u672c\u601d\u8def\uff1a \u65e0\u5b50\u6811\uff1a\u76f4\u63a5\u5220\u9664 \u5b58\u5728\u5de6\u5b50\u6811\uff1a\u4ee4\u5de6\u5b50\u6811\u66ff\u4ee3\u5176\u4f4d\u7f6e \u5b58\u5728\u53f3\u5b50\u6811\uff1a\u4ee4\u53f3\u5b50\u6811\u66ff\u4ee3\u5176\u4f4d\u7f6e \u5de6\u53f3\u5b50\u6811\u90fd\u5b58\u5728\uff1a\u7528\u76f4\u63a5\u524d\u9a71\uff08\u6216\u76f4\u63a5\u540e\u7ee7\uff09\u66ff\u4ee3\u5176\u4f4d\u7f6e\uff0c\u518d\u5220\u9664\u5176\u76f4\u63a5\u524d\u9a71\uff08\u76f4\u63a5\u540e\u7ee7\uff09 \u76f4\u63a5\u524d\u9a71\u67e5\u627e\uff1a\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u7ed3\u70b9p\u7684\u76f4\u63a5\u524d\u9a71\u4e3a\u5de6\u5b50\u6811\u7684\u6700\u53f3\u7ed3\u70b9 \u76f4\u63a5\u540e\u7ee7\u67e5\u627e\uff1a\u4e2d\u5e8f\u904d\u5386\u4e2d\uff0c\u7ed3\u70b9p\u7684\u76f4\u63a5\u540e\u7ee7\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(\\log{n})$ \u4ee3\u7801\uff1a bool remove(T num){ return remove(root, num); } bool remove(BiNode<T>* &node, T num){ if(node == NULL) return false; if(node->data > num) return remove(node->lchild, num); else if(node->data < num) return remove(node->rchild, num); else{ if(!(node->rchild) && !(node->lchild)) {node = NULL; return true;} //\u5de6\u53f3\u5b50\u6811\u5e76\u4e0d\u5b58\u5728 else if(node->lchild){ BiNode<T>* alternode = node->lchild; while(alternode->rchild) alternode = alternode->rchild; //\u5bfb\u627e\u5de6\u5b50\u6811\u7684\u6700\u6709\u5b50\u6811\uff08\u76f4\u63a5\u524d\u9a71\uff09 node->data = alternode->data; return remove(node->lchild, alternode->data); } else if(node->rchild){ BiNode<T>* alternode = node->rchild; while(alternode->lchild) alternode = alternode->lchild; node->data = alternode->data; return remove(node->rchild, alternode->data); } } return false; }","title":"\u5220\u9664"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#avl","text":"\u5bf9\u4e8e\u4e8c\u53c9\u67e5\u627e\u6811\u6765\u8bf4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u6811\u7684\u9ad8\u5ea6\uff0c\u56e0\u6b64\uff0c\u901a\u8fc7\u4e00\u4e2a\u5e73\u8861\u7684\u64cd\u4f5c\uff0c\u4f7f\u4e8c\u53c9\u67e5\u627e\u6570\u80fd\u591f\u6700\u5927\u7a0b\u5ea6\u4e0a\u5229\u7528\uff0c\u964d\u4f4e\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6","title":"\u5e73\u8861\u4e8c\u53c9\u67e5\u627e\u6811(AVL\u6811)"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_9","text":"\u5e73\u8861\u56e0\u5b50 \uff1a\u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee \u5de6\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71 \u5de6\u53f3\u5b50\u6811\u4e5f\u662f\u5e73\u8861\u4e8c\u53c9\u6811 \u5355\u6b21\u63d2\u5165\u5220\u9664\u540e\uff0c\u81f3\u591a\u6709$O(1)$\u5904\u51fa\u73b0\u4e0d\u5e73\u8861 \u603b\u53ef\u4ee5\u5728$O(\\log{n})$\u65f6\u95f4\u5185\uff0c\u4f7f$O(1)$\u9664\u4e0d\u5e73\u8861\u91cd\u65b0\u8c03\u6574\u4e3a\u5e73\u8861","title":"\u6027\u8d28\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_10","text":"\u63d2\u5165\u65b0\u7ed3\u70b9\u6216\u5220\u9664\u7ed3\u70b9x\u540e\uff0c\u4ece\u8be5\u8282\u70b9\u5411\u4e0a\u627e\u5230\u6700\u8fd1\u7684\u4e0d\u5e73\u8861\u7ed3\u70b9A\uff0c\u4ee5\u4e0b\u578b\u9488\u5bf9\u8def\u5f84\u533a\u5206 \u63d2\u5165 \u7ed3\u70b9\u53ea\u9700\u8981\u91cd\u5e73\u8861 \u4e00\u6b21 \u5220\u9664 \u5219 \u81f3\u5c11\u4e00\u6b21 \uff08\u5411\u6811\u6839\u4f20\u9012\uff09","title":"\u8c03\u6574\u5e73\u8861\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#ll","text":"\u8def\u5f84\u7684\u524d\u4e24\u4e2a\u90fd\u662f\u5de6\u5b50\u6811\uff0c\u5373\u4e3a LL\u578b \uff08x\u63d2\u5165\u5728A\u7684\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\uff0c\u5bfc\u81f4\u4e86\u7ed3\u70b9A\u4e0d\u5e73\u8861\uff09 LL\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> LL_Rotation(BiNode<T> &T){ BiNode<T> temp = T->lchild; T->lchild = temp->rchild; temp->rchild = T; updataHeight(T); updateHeight(temp); return temp; }","title":"LL\u578b"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#rr","text":"\u8def\u5f84\u7684\u524d\u4e24\u4e2a\u90fd\u662f\u53f3\u5b50\u6811\uff0c\u5373\u4e3aRR\u578b RR\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> RR_Rotation(BiNode<T> &T){ BiNode<T> temp = T->rchild; T->rchild = temp->lchild; temp->lchild = T; updateHeight(T); update(temp); return temp; }","title":"RR\u578b"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#lr","text":"\u8def\u5f84\u7684\u524d\u4e24\u4e2a\u5b50\u6811\u4f9d\u6b21\u662f\u5de6\u5b50\u6811\u3001\u53f3\u5b50\u6811\uff0c\u5373\u4e3aLR\u578b LR\u65cb\u8f6c\uff1a\u5206\u4e3a\u4e24\u6b21\u65cb\u8f6c\uff1a \u4ee3\u7801\uff1a BiNode<T> LR_Rotation(BiNode<T> &T){ T->lchild = RR_Rotation(T->lchild); return LL_Rotation(T); }","title":"LR\u578b"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#rl","text":"\u8def\u5f84\u7684\u524d\u4e24\u4e2a\u5b50\u6811\u4f9d\u6b21\u662f\u53f3\u5b50\u6811\u3001\u5de6\u5b50\u6811\uff0c\u5373\u4e3aRL\u578b RL\u65cb\u8f6c\uff1a\u540c\u5206\u4e3a\u4e24\u6b21\u65cb\u8f6c","title":"RL\u578b"},{"location":"%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E8%A1%A8%E6%9F%A5%E6%89%BE/#_11","text":"","title":"\u5982\u4f55\u5224\u65ad\uff1f\uff1f\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/","text":"KMP next\u6570\u7ec4 \u5305\u542b\u4e86\u4e0e\u81ea\u8eab\u7684\u504f\u79fb\u8fdb\u884c\u5339\u914d\u7684\u4fe1\u606f \u7528\u5904\uff1a\u5728\u6734\u7d20\u7684\u5b57\u7b26\u5339\u914d\u4e2d\u907f\u514d\u5bf9\u65e0\u7528\u504f\u79fb\u8fdb\u884c\u68c0\u6d4b next[i] \u8868\u793a\u5b50\u4e32 s[0...i] \u7684\u524d\u7f00 s[0...j] \u7b49\u4e8e\u540e\u7f00 s[i - j...i] \u7684\u6700\u5927j #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 100010; int n, m; char q[N], s[N * 10]; int ne[N]; int main(){ cin >> n >> q + 1 >> m >> s + 1; //\u6c42ne\u6570\u7ec4\uff0c\u5b9e\u8d28\u4e0a\u4e0e\u4e0b\u7684KMP\u5339\u914d\u4e00\u81f4 for(int i = 2, j = 0;i <= n;i++){ //ne[1] = 0\uff0c\u76f4\u63a5\u4ecene[2]\u5f00\u59cb //**\u5c1d\u8bd5**\u7528p[j + 1]\u4e0ep[i]\u6bd4\u8f83 while(j != 0 && q[j + 1] != q[i]) j = ne[j]; //\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u9000\u6c42\u5176\u6b21 if(q[j + 1] == q[i]) j++; //\u5982\u679c\u6ee1\u8db3q[j + 1] == q[i]\uff0c\u8bf4\u660e\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u52a0\u4e00 ne[i] = j; } //KMP\u5b57\u7b26\u4e32\u5339\u914d for(int i = 1, j = 0;i <= m;i++){ //**\u5c1d\u8bd5**\u7528p[j + 1]\u4e0es[i]\u6bd4\u8f83 while(j != 0 && q[j + 1] != s[i]) j = ne[j]; if(q[j + 1] == s[i]) j++; //\u7ee7\u7eed\u4e0b\u4e00\u4f4d\u5339\u914d if(j == n){ //\u5339\u914d\u6210\u529f printf(\"%d \", i - n); } } return 0; } \u8da3\u5b66\u6570\u636e\u7ed3\u6784 KMP P129 \u7b97\u6cd5\u7b14\u8bb0 KMP P455 \u7b97\u6cd5\u5bfc\u8bba KMP P588","title":"KMP"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/#kmp","text":"","title":"KMP"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP/#next","text":"\u5305\u542b\u4e86\u4e0e\u81ea\u8eab\u7684\u504f\u79fb\u8fdb\u884c\u5339\u914d\u7684\u4fe1\u606f \u7528\u5904\uff1a\u5728\u6734\u7d20\u7684\u5b57\u7b26\u5339\u914d\u4e2d\u907f\u514d\u5bf9\u65e0\u7528\u504f\u79fb\u8fdb\u884c\u68c0\u6d4b next[i] \u8868\u793a\u5b50\u4e32 s[0...i] \u7684\u524d\u7f00 s[0...j] \u7b49\u4e8e\u540e\u7f00 s[i - j...i] \u7684\u6700\u5927j #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 100010; int n, m; char q[N], s[N * 10]; int ne[N]; int main(){ cin >> n >> q + 1 >> m >> s + 1; //\u6c42ne\u6570\u7ec4\uff0c\u5b9e\u8d28\u4e0a\u4e0e\u4e0b\u7684KMP\u5339\u914d\u4e00\u81f4 for(int i = 2, j = 0;i <= n;i++){ //ne[1] = 0\uff0c\u76f4\u63a5\u4ecene[2]\u5f00\u59cb //**\u5c1d\u8bd5**\u7528p[j + 1]\u4e0ep[i]\u6bd4\u8f83 while(j != 0 && q[j + 1] != q[i]) j = ne[j]; //\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u9000\u6c42\u5176\u6b21 if(q[j + 1] == q[i]) j++; //\u5982\u679c\u6ee1\u8db3q[j + 1] == q[i]\uff0c\u8bf4\u660e\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u52a0\u4e00 ne[i] = j; } //KMP\u5b57\u7b26\u4e32\u5339\u914d for(int i = 1, j = 0;i <= m;i++){ //**\u5c1d\u8bd5**\u7528p[j + 1]\u4e0es[i]\u6bd4\u8f83 while(j != 0 && q[j + 1] != s[i]) j = ne[j]; if(q[j + 1] == s[i]) j++; //\u7ee7\u7eed\u4e0b\u4e00\u4f4d\u5339\u914d if(j == n){ //\u5339\u914d\u6210\u529f printf(\"%d \", i - n); } } return 0; } \u8da3\u5b66\u6570\u636e\u7ed3\u6784 KMP P129 \u7b97\u6cd5\u7b14\u8bb0 KMP P455 \u7b97\u6cd5\u5bfc\u8bba KMP P588","title":"next\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/","text":"\u5355\u8c03\u6808\u4e0e\u5355\u8c03\u961f\u5217 \u5355\u8c03\u6808 \u5355\u8c03\u961f\u5217 \u6ed1\u52a8\u7a97\u53e3 \u4f7f\u7528\u961f\u5217\u6765\u7ef4\u62a4\u7a97\u53e3\u91cc\u7684\u503c \u66b4\u529b\u505a\u6cd5\uff1a\u76f4\u63a5\u8fdb\u884c\u626b\u63cf \u4f18\u5316\uff1a\u4f7f\u961f\u5217\u5355\u8c03 \u601d\u8def \u601d\u8003\u4f7f\u7528\u666e\u901a\u961f\u5217\u600e\u4e48\u505a \u5c06\u961f\u5217\u4e2d\u6ca1\u6709\u7528\u7684\u5143\u7d20\u5220\u9664\u2014\u2014>\u5177\u6709\u5355\u8c03\u6027 \u53d6\u51fa\u961f\u5934","title":"\u5355\u8c03\u6808\u4e0e\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_1","text":"","title":"\u5355\u8c03\u6808\u4e0e\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_2","text":"","title":"\u5355\u8c03\u6808"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88%E4%B8%8E%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_3","text":"\u6ed1\u52a8\u7a97\u53e3 \u4f7f\u7528\u961f\u5217\u6765\u7ef4\u62a4\u7a97\u53e3\u91cc\u7684\u503c \u66b4\u529b\u505a\u6cd5\uff1a\u76f4\u63a5\u8fdb\u884c\u626b\u63cf \u4f18\u5316\uff1a\u4f7f\u961f\u5217\u5355\u8c03 \u601d\u8def \u601d\u8003\u4f7f\u7528\u666e\u901a\u961f\u5217\u600e\u4e48\u505a \u5c06\u961f\u5217\u4e2d\u6ca1\u6709\u7528\u7684\u5143\u7d20\u5220\u9664\u2014\u2014>\u5177\u6709\u5355\u8c03\u6027 \u53d6\u51fa\u961f\u5934","title":"\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/","text":"\u54c8\u5e0c\u8868 \u6563\u5217\u51fd\u6570 \u5c06\u5173\u952e\u5b57\u6620\u5c04\u5230\u5b58\u50a8\u5730\u5740\u7684\u51fd\u6570 \u4e24\u4e2a\u539f\u5219\uff1a\u7b80\u5355\u3001\u5747\u5300 \u7b80\u5355\uff1a\u5feb\u901f\u8ba1\u7b97 \u5747\u5300\uff1a\u907f\u514d\u805a\u96c6\uff0c\u51cf\u5c11\u51b2\u7a81 \u5e38\u7528\u65b9\u6cd5 \u76f4\u63a5\u5b9a\u5740\u6cd5\uff1a$hash(key) = a * key + b$ \u9664\u7559\u4f59\u6570\u6cd5\uff1a$hash(key) = key \\% p$ MAD\u6cd5\uff1a$hash(key) = (a * key + b) \\% p$ \u968f\u673a\u6570\u6cd5\uff1a$hash(key) = rand(key) \\% p$ \u5e73\u65b9\u53d6\u4e2d\u6cd5\uff1a\u5c3d\u53ef\u80fd\u8ba9\u6bcf\u4e00\u4f4d\u7684\u53d6\u503c\u90fd\u5f71\u54cd\u5230\u5730\u5740\uff0c\u4ece\u800c\u51cf\u5c11\u51b2\u7a81 \u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5 \u5f00\u653e\u5bfb\u5740\u6cd5 $$hash'(key) = (hash(key)+d_i)\\%m$$ \u5176\u4e2d$d_i$\u4e3a\u589e\u91cf\u5e8f\u5217\uff0c\u4ee5\u4e0b\u65b9\u6cd5\u9488\u5bf9\u8be5\u589e\u91cf\u5e8f\u5217\u505a\u51fa\u533a\u5206 - \u5176\u4e2d$m$\u5e94\u5c3d\u91cf\u53d6\u4e3a \u7d20\u6570 1. \u7ebf\u6027\u63a2\u6d4b\u6cd5 $$d_i = 1, 2\u2026\u2026,m-1$$ - \u5373\u9010\u4e2a\u5411\u540e\u641c\u7d22\u7a7a\u4f4d\u7f6e 1. \u4f18\u70b9\uff1a\u65e0\u9700\u9644\u52a0\u7684\u7a7a\u95f4\u3001\u67e5\u627e\u94fe\u5177\u6709\u5c40\u90e8\u6027\u3001\u53ef\u4ee5\u5145\u5206\u5229\u7528\u7cfb\u7edf\u7f13\u5b58\uff08\u52a0\u901f\uff09\u3001\u6709\u6548\u51cf\u5c11IO 2. \u7f3a\u70b9\uff1a\u4e00\u6b21\u51b2\u7a81\u53ef\u80fd\u5bfc\u81f4\u540e\u7eed\u7684\u51b2\u7a81\u51fa\u73b0 2. \u4e8c\u6b21\u63a2\u6d4b\u6cd5 $$d_i = \\pm 1^2, \\pm 2 ^ 2,\u2026\u2026,\\pm k ^ 2$$ - \u589e\u5927\u51b2\u7a81\u8ddd\u79bb 1. \u4f18\u70b9\uff1a\u907f\u514d\u7ebf\u6027\u63a2\u6d4b\u4e2d\u7684\u540e\u7eed\u51b2\u7a81 2. \u7f3a\u70b9\uff1a\u53ef\u80fd\u65e0\u6cd5\u627e\u5230\u7a7a\u4f4d\u7f6e\uff1b\u82e5\u6d89\u53ca\u5916\u5b58\uff0c\u53ef\u80fd\u5bfc\u81f4IO - \u9488\u5bf9\u7f3a\u70b9\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u53d6\u8868\u957f\u4e3a$4 k + 3$ \u7684 \u7d20\u6570$M$ *\uff0c\u5fc5\u7136\u53ef\u4ee5\u4fdd\u8bc1\u67e5\u627e\u94fe\u7684\u524d$M$\u9879\u4e92\u5f02 3. \u968f\u673a\u63a2\u6d4b\u6cd5 $$d_i = \u4f2a\u968f\u673a\u5e8f\u5217$$ \u94fe\u5730\u5740\u6cd5\uff08\u62c9\u94fe\u6cd5\uff09 \u5c06\u6620\u5c04\u81f3\u540c\u4e00\u5730\u5740\u7684\u5173\u952e\u5b57\u5b58\u50a8\u5728\u4e00\u4e2a\u7ebf\u6027\u94fe\u8868\u4e2d \u518d\u6563\u5217\u6cd5 \u8bbe\u7f6e\u53e6\u5916\u4e00\u4e2a\u6563\u5217\u51fd\u6570 1. \u7f3a\u70b9\uff1a\u5185\u5b58\u7a7a\u95f4\u8df3\u8dc3\uff0c\u975e\u8fde\u7eed\uff0c\u65e0\u6cd5\u5229\u7528\u7cfb\u7edf\u7f13\u5b58\u52a0\u901f\u5b58\u50a8 2. \u4f18\u70b9\uff1a\u8282\u7701\u7a7a\u95f4 \u6a21\u62df\u6563\u5217\u8868 \u62c9\u94fe\u6cd5 #include <iostream> #include <cstring> using namespace std; const int N = 100003; //\u4ee4N\u4e3a\u8d28\u6570\uff0c\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u4e0a\u907f\u514d\u91cd\u590d\u7684\u95ee\u9898 int h[N], e[N], ne[N], idx; void insert(int x){ int t = (x % N + N) % N; e[idx] = x; //\u5efa\u7acb\u94fe\u8868 ne[idx] = h[t]; h[t] = idx++; } bool find(int x){ int t = (x % N + N) % N; for(int i = h[t];i != -1;i = ne[i]){ if(e[i] == x) return 1; } return 0; } int main(){ int a, n; char op[2]; memset(h, -1, sizeof h); cin >> n; while(n--){ scanf(\"%s%d\", op, &a); if(*op == 'I'){ insert(a); } else{ if(find(a)){ cout << \"Yes\" << endl; } else{ cout << \"No\" << endl; } } } return 0; } \u5b57\u7b26\u4e32\u54c8\u5e0c \u9884\u5904\u7406\u6240\u6709\u524d\u7f00\u7684\u54c8\u5e0c\u503c \u95ee\u9898\uff1a 1. \u5982\u4f55\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c 1. \u901a\u8fc7\u524d\u7f00\u5b9a\u4e49\u4e00\u4e2aP\u8fdb\u5236\u6570\u636e 2. \u4e0d\u80fd\u6620\u5c04\u62100 3. \u5047\u5b9a\u4e0d\u5b58\u5728\u51b2\u7a81\uff08P\u53d6131\uff0c Q\u53d62^64\uff09 \u7528\u5904\uff1a 1. \u5feb\u901f\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49 #include <iostream> using namespace std; const int N = 100010, P = 131; typedef unsigned long long ULL; int n, m; char str[N]; int h[N], p[N]; ULL getnum(int l, int r){ return h[r] - h[l - 1] * p[r - l + 1]; } int main(){ scanf(\"%d%d%s\", &n, &m, str + 1); p[0] = 1; for(int i = 1;i <= n;i++){ p[i] = p[i - 1] * P; h[i] = h[i - 1] * P + str[i]; } int l1, r1, l2, r2; while(m--){ scanf(\"%d%d%d%d\", &l1, &r1, &l2, &r2); if(getnum(l1, r1) == getnum(l2, r2)) puts(\"Yes\"); else puts(\"No\"); } return 0; }","title":"\u54c8\u5e0c\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_1","text":"","title":"\u54c8\u5e0c\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","text":"\u5c06\u5173\u952e\u5b57\u6620\u5c04\u5230\u5b58\u50a8\u5730\u5740\u7684\u51fd\u6570 \u4e24\u4e2a\u539f\u5219\uff1a\u7b80\u5355\u3001\u5747\u5300 \u7b80\u5355\uff1a\u5feb\u901f\u8ba1\u7b97 \u5747\u5300\uff1a\u907f\u514d\u805a\u96c6\uff0c\u51cf\u5c11\u51b2\u7a81","title":"\u6563\u5217\u51fd\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_3","text":"\u76f4\u63a5\u5b9a\u5740\u6cd5\uff1a$hash(key) = a * key + b$ \u9664\u7559\u4f59\u6570\u6cd5\uff1a$hash(key) = key \\% p$ MAD\u6cd5\uff1a$hash(key) = (a * key + b) \\% p$ \u968f\u673a\u6570\u6cd5\uff1a$hash(key) = rand(key) \\% p$ \u5e73\u65b9\u53d6\u4e2d\u6cd5\uff1a\u5c3d\u53ef\u80fd\u8ba9\u6bcf\u4e00\u4f4d\u7684\u53d6\u503c\u90fd\u5f71\u54cd\u5230\u5730\u5740\uff0c\u4ece\u800c\u51cf\u5c11\u51b2\u7a81","title":"\u5e38\u7528\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_4","text":"","title":"\u5904\u7406\u51b2\u7a81\u7684\u65b9\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_5","text":"$$hash'(key) = (hash(key)+d_i)\\%m$$ \u5176\u4e2d$d_i$\u4e3a\u589e\u91cf\u5e8f\u5217\uff0c\u4ee5\u4e0b\u65b9\u6cd5\u9488\u5bf9\u8be5\u589e\u91cf\u5e8f\u5217\u505a\u51fa\u533a\u5206 - \u5176\u4e2d$m$\u5e94\u5c3d\u91cf\u53d6\u4e3a \u7d20\u6570 1. \u7ebf\u6027\u63a2\u6d4b\u6cd5 $$d_i = 1, 2\u2026\u2026,m-1$$ - \u5373\u9010\u4e2a\u5411\u540e\u641c\u7d22\u7a7a\u4f4d\u7f6e 1. \u4f18\u70b9\uff1a\u65e0\u9700\u9644\u52a0\u7684\u7a7a\u95f4\u3001\u67e5\u627e\u94fe\u5177\u6709\u5c40\u90e8\u6027\u3001\u53ef\u4ee5\u5145\u5206\u5229\u7528\u7cfb\u7edf\u7f13\u5b58\uff08\u52a0\u901f\uff09\u3001\u6709\u6548\u51cf\u5c11IO 2. \u7f3a\u70b9\uff1a\u4e00\u6b21\u51b2\u7a81\u53ef\u80fd\u5bfc\u81f4\u540e\u7eed\u7684\u51b2\u7a81\u51fa\u73b0 2. \u4e8c\u6b21\u63a2\u6d4b\u6cd5 $$d_i = \\pm 1^2, \\pm 2 ^ 2,\u2026\u2026,\\pm k ^ 2$$ - \u589e\u5927\u51b2\u7a81\u8ddd\u79bb 1. \u4f18\u70b9\uff1a\u907f\u514d\u7ebf\u6027\u63a2\u6d4b\u4e2d\u7684\u540e\u7eed\u51b2\u7a81 2. \u7f3a\u70b9\uff1a\u53ef\u80fd\u65e0\u6cd5\u627e\u5230\u7a7a\u4f4d\u7f6e\uff1b\u82e5\u6d89\u53ca\u5916\u5b58\uff0c\u53ef\u80fd\u5bfc\u81f4IO - \u9488\u5bf9\u7f3a\u70b9\u7684\u89e3\u51b3\u65b9\u6cd5\uff1a\u53d6\u8868\u957f\u4e3a$4 k + 3$ \u7684 \u7d20\u6570$M$ *\uff0c\u5fc5\u7136\u53ef\u4ee5\u4fdd\u8bc1\u67e5\u627e\u94fe\u7684\u524d$M$\u9879\u4e92\u5f02 3. \u968f\u673a\u63a2\u6d4b\u6cd5 $$d_i = \u4f2a\u968f\u673a\u5e8f\u5217$$","title":"\u5f00\u653e\u5bfb\u5740\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_6","text":"\u5c06\u6620\u5c04\u81f3\u540c\u4e00\u5730\u5740\u7684\u5173\u952e\u5b57\u5b58\u50a8\u5728\u4e00\u4e2a\u7ebf\u6027\u94fe\u8868\u4e2d","title":"\u94fe\u5730\u5740\u6cd5\uff08\u62c9\u94fe\u6cd5\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_7","text":"\u8bbe\u7f6e\u53e6\u5916\u4e00\u4e2a\u6563\u5217\u51fd\u6570 1. \u7f3a\u70b9\uff1a\u5185\u5b58\u7a7a\u95f4\u8df3\u8dc3\uff0c\u975e\u8fde\u7eed\uff0c\u65e0\u6cd5\u5229\u7528\u7cfb\u7edf\u7f13\u5b58\u52a0\u901f\u5b58\u50a8 2. \u4f18\u70b9\uff1a\u8282\u7701\u7a7a\u95f4","title":"\u518d\u6563\u5217\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_8","text":"","title":"\u6a21\u62df\u6563\u5217\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_9","text":"#include <iostream> #include <cstring> using namespace std; const int N = 100003; //\u4ee4N\u4e3a\u8d28\u6570\uff0c\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u4e0a\u907f\u514d\u91cd\u590d\u7684\u95ee\u9898 int h[N], e[N], ne[N], idx; void insert(int x){ int t = (x % N + N) % N; e[idx] = x; //\u5efa\u7acb\u94fe\u8868 ne[idx] = h[t]; h[t] = idx++; } bool find(int x){ int t = (x % N + N) % N; for(int i = h[t];i != -1;i = ne[i]){ if(e[i] == x) return 1; } return 0; } int main(){ int a, n; char op[2]; memset(h, -1, sizeof h); cin >> n; while(n--){ scanf(\"%s%d\", op, &a); if(*op == 'I'){ insert(a); } else{ if(find(a)){ cout << \"Yes\" << endl; } else{ cout << \"No\" << endl; } } } return 0; }","title":"\u62c9\u94fe\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/#_10","text":"\u9884\u5904\u7406\u6240\u6709\u524d\u7f00\u7684\u54c8\u5e0c\u503c \u95ee\u9898\uff1a 1. \u5982\u4f55\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u54c8\u5e0c\u503c 1. \u901a\u8fc7\u524d\u7f00\u5b9a\u4e49\u4e00\u4e2aP\u8fdb\u5236\u6570\u636e 2. \u4e0d\u80fd\u6620\u5c04\u62100 3. \u5047\u5b9a\u4e0d\u5b58\u5728\u51b2\u7a81\uff08P\u53d6131\uff0c Q\u53d62^64\uff09 \u7528\u5904\uff1a 1. \u5feb\u901f\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49 #include <iostream> using namespace std; const int N = 100010, P = 131; typedef unsigned long long ULL; int n, m; char str[N]; int h[N], p[N]; ULL getnum(int l, int r){ return h[r] - h[l - 1] * p[r - l + 1]; } int main(){ scanf(\"%d%d%s\", &n, &m, str + 1); p[0] = 1; for(int i = 1;i <= n;i++){ p[i] = p[i - 1] * P; h[i] = h[i - 1] * P + str[i]; } int l1, r1, l2, r2; while(m--){ scanf(\"%d%d%d%d\", &l1, &r1, &l2, &r2); if(getnum(l1, r1) == getnum(l2, r2)) puts(\"Yes\"); else puts(\"No\"); } return 0; }","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/","text":"\u5806 \u5982\u4f55\u624b\u5199\u4e00\u4e2a\u5806\uff1f \u63d2\u5165\u4e00\u4e2a\u6570 heap[++size] = x; up(x); \u6c42\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c heap[1] \u5220\u9664\u6700\u5c0f\u503c heap[1] = heap[size--]; down(1) \u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 heap[k] = heap[size--]; down(k); up(k); \u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 heap[k] = x; down(k); up(k); \u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811 \u5b58\u50a8\u65b9\u5f0f\uff1a\u4e00\u7ef4\u6570\u7ec4 \u64cd\u4f5c down(int x){ \u4e0e\u5c0f\u513f\u5b50\u4ea4\u6362 } up(int x){ \u4e0e\u7236\u8282\u70b9\u4ea4\u6362 } \u5806\u6392\u5e8f #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10; int h[N]; int n, m, sz; void down(int u){ int t = u; //\u7528\u4e8e\u4e34\u65f6\u5b58\u50a8 if(2 * u <= sz && h[2 * u] < h[t]) t = 2 * u; //\u7279\u522b\u6ce8\u610fu\u4e0et\u7684\u533a\u522b if(2 * u + 1 <= sz && h[2 * u + 1] < h[t]) t = 2 * u + 1; if(u != t) { swap(h[u], h[t]); down(t); } } int main(){ cin >> n >> m; for(int i = 1;i <= n;i++) cin >> h[i]; sz = n; for(int i = n / 2;i;i--) down(i); while(m--){ cout << h[1] << \" \"; h[1] = h[sz --]; down(1); } return 0; } \u6a21\u62df\u5806 \u8fd9\u91cc\u7684swap\u64cd\u4f5c\u9700\u8981\u91cd\u5199\uff0c\u5e94\u4e3a\u66ff\u6362\u6216\u5220\u9664\u7684\u662f\u7b2c k \u4e2a\u63d2\u5165\u7684\u6570\uff0c\u800c\u4e0d\u662f\u5806\u4e2d\u7684\u7b2c k \u4e2a\u6570\uff0c\u5220\u9664\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u7b2ck\u4e2a\u63d2\u5165\u5e76\u4e0d\u7b49\u4ef7\u4e8e\u7b2c k \u4e2a\u6570 \u8fd9\u91cc\u4f7f\u7528 hp[] \u6570\u7ec4\u5b58\u50a8\u5806\u4e2d\u7684\u4e0b\u6807\u4e0e\u7b2c i \u4e2a\u63d2\u5165(heap to position) \u4f7f\u7528 ph[] \u6570\u7ec4\u5b58\u50a8\u7b2c i \u4e2a\u63d2\u5165\u7684\u6570\u5728\u5806\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807(position to heap) \u6ce8\u610f\uff1a \u4f20\u5165\u51fd\u6570\u7684\u53c2\u6570\u662f\u7b2c k \u4e2a\u63d2\u5165 \u5728\u8fdb\u884cswap\u64cd\u4f5c\u65f6\u5019\uff0c\u5bf9 hp \u548c ph \u4e5f\u8981\u8fdb\u884c\u76f8\u5e94\u7684\u4ea4\u6362\u64cd\u4f5c \u4ea4\u6362 hp \u64cd\u4f5c\uff1a\u5177\u4f53\u662f\u901a\u8fc7 ph \u83b7\u53d6\u7b2c k \u4e2a\u63d2\u5165\u7684\u6570\u5728\u5806\u4e2d\u7684\u4e0b\u6807 i , j \uff0c\u518d\u901a\u8fc7 ph \u83b7\u5f97\u4e0b\u6807 i , j \u5bf9\u5e94\u7684\u7b2c k \u4e2a\u63d2\u5165\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362 \u4ea4\u6362 ph \u64cd\u4f5c\uff1a\u76f4\u63a5\u4ea4\u6362 ph[a] \u4e0e ph[b] #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10; int n; int h[N], hp[N], ph[N], sz, cnt; //hp\u6570\u7ec4\u8bb0\u5f55\u63d2\u5165\u7684\u662f\u7b2c\u51e0\u4e2a //ph\u6570\u7ec4\u8bb0\u5f55\u7b2c\u51e0\u4e2a\u63d2\u5165 void heap_swap(int a, int b){ swap(h[a], h[b]); //\u4ea4\u6362\u5806\u4e2d\u7684\u503c swap(hp[a], hp[b]); //\u4ea4\u6362\u5806\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807 swap(ph[hp[a]], ph[hp[b]]); //\u4ea4\u6362\u4e0b\u6807\u5bf9\u5e94\u7684\u63d2\u5165\u6570 } void down(int k){ int t = k; if(k * 2 <= sz && h[k * 2] < h[t]) t = k * 2; if(k * 2 + 1 <= sz && h[k * 2 + 1] < h[t]) t = k * 2 + 1; if(t != k) { heap_swap(t, k); down(t); } } void up(int k){ while(k / 2 && h[k / 2] > h[k]){ heap_swap(k/2, k); k = k >> 1; } } int main(){ cin >> n; char op[5]; int a, b; while(n--){ scanf(\"%s\", op); if(!strcmp(op, \"I\")){ //\u63d2\u5165 scanf(\"%d\", &a); sz ++; cnt ++; h[sz] = a; ph[cnt] = sz; hp[sz] = cnt; up(sz); } else if(!strcmp(op, \"PM\")) //\u8f93\u51fa\u6700\u5c0f\u503c { cout << h[1] << endl; } else if(!strcmp(op, \"DM\")){ //\u5220\u9664\u6700\u5c0f\u503c heap_swap(1, sz); sz--; down(1); } else if(!strcmp(op, \"D\")){ //\u5220\u9664\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570 scanf(\"%d\", &a); a = ph[a]; heap_swap(a, sz); sz --; down(a); up(a); } else{ //\u4fee\u6539\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570 scanf(\"%d%d\", &a, &b); a = ph[a]; h[a] = b; down(a); up(a); } } return 0; }","title":"\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_1","text":"","title":"\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_2","text":"\u63d2\u5165\u4e00\u4e2a\u6570 heap[++size] = x; up(x); \u6c42\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c heap[1] \u5220\u9664\u6700\u5c0f\u503c heap[1] = heap[size--]; down(1) \u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 heap[k] = heap[size--]; down(k); up(k); \u4fee\u6539\u4efb\u610f\u4e00\u4e2a\u5143\u7d20 heap[k] = x; down(k); up(k);","title":"\u5982\u4f55\u624b\u5199\u4e00\u4e2a\u5806\uff1f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_3","text":"","title":"\u5806\u662f\u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_4","text":"","title":"\u5b58\u50a8\u65b9\u5f0f\uff1a\u4e00\u7ef4\u6570\u7ec4"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_5","text":"down(int x){ \u4e0e\u5c0f\u513f\u5b50\u4ea4\u6362 } up(int x){ \u4e0e\u7236\u8282\u70b9\u4ea4\u6362 }","title":"\u64cd\u4f5c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_6","text":"#include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10; int h[N]; int n, m, sz; void down(int u){ int t = u; //\u7528\u4e8e\u4e34\u65f6\u5b58\u50a8 if(2 * u <= sz && h[2 * u] < h[t]) t = 2 * u; //\u7279\u522b\u6ce8\u610fu\u4e0et\u7684\u533a\u522b if(2 * u + 1 <= sz && h[2 * u + 1] < h[t]) t = 2 * u + 1; if(u != t) { swap(h[u], h[t]); down(t); } } int main(){ cin >> n >> m; for(int i = 1;i <= n;i++) cin >> h[i]; sz = n; for(int i = n / 2;i;i--) down(i); while(m--){ cout << h[1] << \" \"; h[1] = h[sz --]; down(1); } return 0; }","title":"\u5806\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/#_7","text":"\u8fd9\u91cc\u7684swap\u64cd\u4f5c\u9700\u8981\u91cd\u5199\uff0c\u5e94\u4e3a\u66ff\u6362\u6216\u5220\u9664\u7684\u662f\u7b2c k \u4e2a\u63d2\u5165\u7684\u6570\uff0c\u800c\u4e0d\u662f\u5806\u4e2d\u7684\u7b2c k \u4e2a\u6570\uff0c\u5220\u9664\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u7b2ck\u4e2a\u63d2\u5165\u5e76\u4e0d\u7b49\u4ef7\u4e8e\u7b2c k \u4e2a\u6570 \u8fd9\u91cc\u4f7f\u7528 hp[] \u6570\u7ec4\u5b58\u50a8\u5806\u4e2d\u7684\u4e0b\u6807\u4e0e\u7b2c i \u4e2a\u63d2\u5165(heap to position) \u4f7f\u7528 ph[] \u6570\u7ec4\u5b58\u50a8\u7b2c i \u4e2a\u63d2\u5165\u7684\u6570\u5728\u5806\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807(position to heap) \u6ce8\u610f\uff1a \u4f20\u5165\u51fd\u6570\u7684\u53c2\u6570\u662f\u7b2c k \u4e2a\u63d2\u5165 \u5728\u8fdb\u884cswap\u64cd\u4f5c\u65f6\u5019\uff0c\u5bf9 hp \u548c ph \u4e5f\u8981\u8fdb\u884c\u76f8\u5e94\u7684\u4ea4\u6362\u64cd\u4f5c \u4ea4\u6362 hp \u64cd\u4f5c\uff1a\u5177\u4f53\u662f\u901a\u8fc7 ph \u83b7\u53d6\u7b2c k \u4e2a\u63d2\u5165\u7684\u6570\u5728\u5806\u4e2d\u7684\u4e0b\u6807 i , j \uff0c\u518d\u901a\u8fc7 ph \u83b7\u5f97\u4e0b\u6807 i , j \u5bf9\u5e94\u7684\u7b2c k \u4e2a\u63d2\u5165\uff0c\u5e76\u8fdb\u884c\u4ea4\u6362 \u4ea4\u6362 ph \u64cd\u4f5c\uff1a\u76f4\u63a5\u4ea4\u6362 ph[a] \u4e0e ph[b] #include <iostream> #include <algorithm> #include <cstring> using namespace std; const int N = 1e5 + 10; int n; int h[N], hp[N], ph[N], sz, cnt; //hp\u6570\u7ec4\u8bb0\u5f55\u63d2\u5165\u7684\u662f\u7b2c\u51e0\u4e2a //ph\u6570\u7ec4\u8bb0\u5f55\u7b2c\u51e0\u4e2a\u63d2\u5165 void heap_swap(int a, int b){ swap(h[a], h[b]); //\u4ea4\u6362\u5806\u4e2d\u7684\u503c swap(hp[a], hp[b]); //\u4ea4\u6362\u5806\u4e2d\u5bf9\u5e94\u7684\u4e0b\u6807 swap(ph[hp[a]], ph[hp[b]]); //\u4ea4\u6362\u4e0b\u6807\u5bf9\u5e94\u7684\u63d2\u5165\u6570 } void down(int k){ int t = k; if(k * 2 <= sz && h[k * 2] < h[t]) t = k * 2; if(k * 2 + 1 <= sz && h[k * 2 + 1] < h[t]) t = k * 2 + 1; if(t != k) { heap_swap(t, k); down(t); } } void up(int k){ while(k / 2 && h[k / 2] > h[k]){ heap_swap(k/2, k); k = k >> 1; } } int main(){ cin >> n; char op[5]; int a, b; while(n--){ scanf(\"%s\", op); if(!strcmp(op, \"I\")){ //\u63d2\u5165 scanf(\"%d\", &a); sz ++; cnt ++; h[sz] = a; ph[cnt] = sz; hp[sz] = cnt; up(sz); } else if(!strcmp(op, \"PM\")) //\u8f93\u51fa\u6700\u5c0f\u503c { cout << h[1] << endl; } else if(!strcmp(op, \"DM\")){ //\u5220\u9664\u6700\u5c0f\u503c heap_swap(1, sz); sz--; down(1); } else if(!strcmp(op, \"D\")){ //\u5220\u9664\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570 scanf(\"%d\", &a); a = ph[a]; heap_swap(a, sz); sz --; down(a); up(a); } else{ //\u4fee\u6539\u7b2ck\u4e2a\u63d2\u5165\u7684\u6570 scanf(\"%d%d\", &a, &b); a = ph[a]; h[a] = b; down(a); up(a); } } return 0; }","title":"\u6a21\u62df\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/","text":"\u5e76\u67e5\u96c6 \u652f\u6301\u7684\u64cd\u4f5c - \u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 - \u8be2\u95ee\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d \u57fa\u672c\u539f\u7406\uff1a - \u6bcf\u4e2a\u96c6\u5408\u7528\u4e00\u9897\u6811\u6765\u8868\u793a - \u6811\u6839\u7684\u7f16\u53f7\u5c31\u662f\u6574\u4e2a\u96c6\u5408\u7684\u7f16\u53f7 - \u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u4ed6\u7684\u7236\u8282\u70b9\uff0c p[x] \u8868\u793a\u4ed6\u7684\u7236\u8282\u70b9 \u95ee\u9898 1. \u5982\u4f55\u5224\u65ad\u6811\u6839\uff1a if(p[x] == x) 2. \u5982\u4f55\u6c42x\u96c6\u5408\u7684\u7f16\u53f7\uff1a while(p[x] != x) x = p[x] 3. \u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff1a p[x] \u662fx\u7684\u96c6\u5408\u7f16\u53f7\uff0c p[y] \u662fy\u7684\u96c6\u5408\u7f16\u53f7\uff0c\u4ee4 p[x] = y \u67e5\u8be2\u64cd\u4f5c int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; } \u95ee\u98982\u7684\u4f18\u5316\uff1a\u8def\u5f84\u538b\u7f29 \u4f18\u5316\u65b9\u6cd5\uff1a int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; } \u5408\u5e76\u96c6\u5408 #include <iostream> using namespace std; const int N = 100010; int q[N]; int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; } int main(){ int n, m; scanf(\"%d%d\", &n, &m); for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316 q[i] = i; } char op; int a, b; while(m--){ cin >> op; switch(op){ case 'M': scanf(\"%d%d\",&a,&b); q[find(a)] = find(b); break; case 'Q': scanf(\"%d%d\",&a,&b); if(find(a) == find(b)) printf(\"Yes\\n\"); else printf(\"No\\n\"); break; } } return 0; } \u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf #include <iostream> using namespace std; const int N = 100010; int q[N], sz[N]; int find(int x){ if(q[x] != x) { q[x] = find(q[x]); } return q[x]; } int main(){ int n, m; scanf(\"%d%d\", &n, &m); for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316 q[i] = i; sz[i] = 1; } char op[4]; int a, b; while(m--){ scanf(\"%s\",op); if(op[0] == 'Q'){ if(op[1] == '1'){ scanf(\"%d%d\", &a, &b); if(find(a) == find(b)){ printf(\"Yes\\n\"); } else{ printf(\"No\\n\"); } } else{ scanf(\"%d\", &a); printf(\"%d\\n\",sz[find(a)]); } } else{ scanf(\"%d%d\",&a,&b); if(find(a) == find(b)) continue; sz[find(b)] += sz[find(a)]; q[find(a)] = find(b); } } return 0; }","title":"\u5e76\u67e5\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_1","text":"\u652f\u6301\u7684\u64cd\u4f5c - \u5c06\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 - \u8be2\u95ee\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d \u57fa\u672c\u539f\u7406\uff1a - \u6bcf\u4e2a\u96c6\u5408\u7528\u4e00\u9897\u6811\u6765\u8868\u793a - \u6811\u6839\u7684\u7f16\u53f7\u5c31\u662f\u6574\u4e2a\u96c6\u5408\u7684\u7f16\u53f7 - \u6bcf\u4e2a\u8282\u70b9\u5b58\u50a8\u4ed6\u7684\u7236\u8282\u70b9\uff0c p[x] \u8868\u793a\u4ed6\u7684\u7236\u8282\u70b9 \u95ee\u9898 1. \u5982\u4f55\u5224\u65ad\u6811\u6839\uff1a if(p[x] == x) 2. \u5982\u4f55\u6c42x\u96c6\u5408\u7684\u7f16\u53f7\uff1a while(p[x] != x) x = p[x] 3. \u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\uff1a p[x] \u662fx\u7684\u96c6\u5408\u7f16\u53f7\uff0c p[y] \u662fy\u7684\u96c6\u5408\u7f16\u53f7\uff0c\u4ee4 p[x] = y \u67e5\u8be2\u64cd\u4f5c int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; } \u95ee\u98982\u7684\u4f18\u5316\uff1a\u8def\u5f84\u538b\u7f29 \u4f18\u5316\u65b9\u6cd5\uff1a int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; }","title":"\u5e76\u67e5\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_2","text":"#include <iostream> using namespace std; const int N = 100010; int q[N]; int find(int x){ if(q[x] != x) q[x] = find(q[x]); return q[x]; } int main(){ int n, m; scanf(\"%d%d\", &n, &m); for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316 q[i] = i; } char op; int a, b; while(m--){ cin >> op; switch(op){ case 'M': scanf(\"%d%d\",&a,&b); q[find(a)] = find(b); break; case 'Q': scanf(\"%d%d\",&a,&b); if(find(a) == find(b)) printf(\"Yes\\n\"); else printf(\"No\\n\"); break; } } return 0; }","title":"\u5408\u5e76\u96c6\u5408"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/#_3","text":"#include <iostream> using namespace std; const int N = 100010; int q[N], sz[N]; int find(int x){ if(q[x] != x) { q[x] = find(q[x]); } return q[x]; } int main(){ int n, m; scanf(\"%d%d\", &n, &m); for(int i = 1;i <= n;i++){ //\u521d\u59cb\u5316 q[i] = i; sz[i] = 1; } char op[4]; int a, b; while(m--){ scanf(\"%s\",op); if(op[0] == 'Q'){ if(op[1] == '1'){ scanf(\"%d%d\", &a, &b); if(find(a) == find(b)){ printf(\"Yes\\n\"); } else{ printf(\"No\\n\"); } } else{ scanf(\"%d\", &a); printf(\"%d\\n\",sz[find(a)]); } } else{ scanf(\"%d%d\",&a,&b); if(find(a) == find(b)) continue; sz[find(b)] += sz[find(a)]; q[find(a)] = find(b); } } return 0; }","title":"\u8fde\u901a\u5757\u4e2d\u70b9\u7684\u6570\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86/","text":"\u6590\u6ce2\u90a3\u5951\u5806","title":"\u6590\u6ce2\u90a3\u5951\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86/#_1","text":"","title":"\u6590\u6ce2\u90a3\u5951\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/","text":"\u8868\u8fbe\u5f0f\u6c42\u503c \u9700\u8981\u5904\u7406\u7684\u95ee\u9898 \u5982\u4f55\u786e\u5b9a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u4f7f\u7528 unordered_map \u786e\u5b9a\u4e0d\u540c\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u600e\u4e48\u5904\u7406\u6570\u5b57 \u904d\u5386\u81f3\u6570\u5b57\u65f6\uff0c\u8bf4\u660e\u63a5\u4e0b\u6765\u7684\u662f\u6570\u5b57\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u5904\u7406\u5c31\u53ef\u4ee5\u83b7\u5f97\u5f53\u524d\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u5b57 \u600e\u4e48\u5904\u7406\u62ec\u53f7 \u9047\u89c1\u5de6\u62ec\u53f7\u65f6\u5019\uff0c\u8ba9\u5de6\u62ec\u53f7\u5165\u6808 \u9047\u89c1\u53f3\u62ec\u53f7\u65f6\uff0c\u4e0d\u65ad\u7684\u8fdb\u884c\u8ba1\u7b97\uff0c\u76f4\u81f3\u8fd0\u7b97\u7b26\u6808\u4e2d\u53ea\u5269\u4e0b\u5de6\u62ec\u53f7 \u4ee4\u5de6\u62ec\u53f7\u51fa\u6808 \u5f53\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u65f6\u5019\u600e\u4e48\u5904\u7406 \u5f53\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u5927\u4e8e\u7b49\u4e8e \u5f53\u524d\u904d\u5386\u81f3\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u4ee4\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 \u5f53\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u904d\u5386\u81f3\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c \u793a\u4f8b\uff1a$5+3*(12 + 4)/4-8$ \u4ee3\u7801\uff1a #include <iostream> #include <unordered_map> #include <stack> #include <cstring> #include <algorithm> using namespace std; stack<int> num; stack<char> op; void eval(){ auto b = num.top(); num.pop(); auto a = num.top(); num.pop(); auto c = op.top(); op.pop(); int x; if(c == '+') x = a + b; else if(c == '-') x = a - b; else if(c == '*') x = a * b; else x = a / b; num.push(x); } int main(){ unordered_map<char, int> pr{{'+',1}, {'-',1}, {'*', 2}, {'/',2}}; //\u786e\u5b9a\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7 string str; cin >> str; for(int i = 0;i < str.size();i++){ auto c = str[i]; if(isdigit(c)){ //\u5982\u679c\u662f\u6570\u5b57 int x = 0, j = i; while(j < str.size() && isdigit(str[j])) //\u7ee7\u7eed\u7edf\u8ba1\u5b8c\u6574\u7684\u6570\u5b57 x = x * 10 + str[j++] - '0'; i = j - 1; num.push(x); //\u5165\u6808 } else if(c == '(') op.push(c); //\u505a\u62ec\u53f7\uff0c\u5219\u5165\u6808 else if(c == ')') { //\u53f3\u62ec\u53f7\uff0c\u5219\u8ba1\u7b97\u81f3\u5de6\u62ec\u53f7 while(op.top() != '(') eval(); op.pop();} //\u5de6\u62ec\u53f7\u51fa\u6808 else{ //\u5982\u679c\u662f\u8fd0\u7b97\u7b26 while(op.size() //\u8fd0\u7b97\u7b26\u6808\u4e0d\u4e3a\u7a7a && op.top() != '(' //\u8fd0\u7b97\u7b26\u6808\u9876\u4e0d\u4e3a\u5de6\u62ec\u53f7 && pr[op.top()] >= pr[c]) eval(); //\u5f53\u524d\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u8fd0\u7b97\u7b26\u6808\u9876 op.push(c); //\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808 } } while(op.size()) eval(); //\u8fd0\u7b97\u5269\u4f59 cout << num.top() << endl; return 0; }","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/#_1","text":"","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/#_2","text":"\u5982\u4f55\u786e\u5b9a\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u4f7f\u7528 unordered_map \u786e\u5b9a\u4e0d\u540c\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u600e\u4e48\u5904\u7406\u6570\u5b57 \u904d\u5386\u81f3\u6570\u5b57\u65f6\uff0c\u8bf4\u660e\u63a5\u4e0b\u6765\u7684\u662f\u6570\u5b57\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u5904\u7406\u5c31\u53ef\u4ee5\u83b7\u5f97\u5f53\u524d\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u5b57 \u600e\u4e48\u5904\u7406\u62ec\u53f7 \u9047\u89c1\u5de6\u62ec\u53f7\u65f6\u5019\uff0c\u8ba9\u5de6\u62ec\u53f7\u5165\u6808 \u9047\u89c1\u53f3\u62ec\u53f7\u65f6\uff0c\u4e0d\u65ad\u7684\u8fdb\u884c\u8ba1\u7b97\uff0c\u76f4\u81f3\u8fd0\u7b97\u7b26\u6808\u4e2d\u53ea\u5269\u4e0b\u5de6\u62ec\u53f7 \u4ee4\u5de6\u62ec\u53f7\u51fa\u6808 \u5f53\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7\u4e0d\u540c\u7684\u65f6\u5019\u600e\u4e48\u5904\u7406 \u5f53\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \u5927\u4e8e\u7b49\u4e8e \u5f53\u524d\u904d\u5386\u81f3\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u8ba1\u7b97\uff0c\u518d\u4ee4\u5f53\u524d\u7684\u8fd0\u7b97\u7b26\u5165\u6808 \u5f53\u6808\u9876\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u5f53\u524d\u904d\u5386\u81f3\u7684\u8fd0\u7b97\u7b26\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c","title":"\u9700\u8981\u5904\u7406\u7684\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/#5312-44-8","text":"","title":"\u793a\u4f8b\uff1a$5+3*(12 + 4)/4-8$"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/#_3","text":"#include <iostream> #include <unordered_map> #include <stack> #include <cstring> #include <algorithm> using namespace std; stack<int> num; stack<char> op; void eval(){ auto b = num.top(); num.pop(); auto a = num.top(); num.pop(); auto c = op.top(); op.pop(); int x; if(c == '+') x = a + b; else if(c == '-') x = a - b; else if(c == '*') x = a * b; else x = a / b; num.push(x); } int main(){ unordered_map<char, int> pr{{'+',1}, {'-',1}, {'*', 2}, {'/',2}}; //\u786e\u5b9a\u8fd0\u7b97\u7684\u4f18\u5148\u7ea7 string str; cin >> str; for(int i = 0;i < str.size();i++){ auto c = str[i]; if(isdigit(c)){ //\u5982\u679c\u662f\u6570\u5b57 int x = 0, j = i; while(j < str.size() && isdigit(str[j])) //\u7ee7\u7eed\u7edf\u8ba1\u5b8c\u6574\u7684\u6570\u5b57 x = x * 10 + str[j++] - '0'; i = j - 1; num.push(x); //\u5165\u6808 } else if(c == '(') op.push(c); //\u505a\u62ec\u53f7\uff0c\u5219\u5165\u6808 else if(c == ')') { //\u53f3\u62ec\u53f7\uff0c\u5219\u8ba1\u7b97\u81f3\u5de6\u62ec\u53f7 while(op.top() != '(') eval(); op.pop();} //\u5de6\u62ec\u53f7\u51fa\u6808 else{ //\u5982\u679c\u662f\u8fd0\u7b97\u7b26 while(op.size() //\u8fd0\u7b97\u7b26\u6808\u4e0d\u4e3a\u7a7a && op.top() != '(' //\u8fd0\u7b97\u7b26\u6808\u9876\u4e0d\u4e3a\u5de6\u62ec\u53f7 && pr[op.top()] >= pr[c]) eval(); //\u5f53\u524d\u7b26\u53f7\u7684\u4f18\u5148\u7ea7\u5c0f\u4e8e\u8fd0\u7b97\u7b26\u6808\u9876 op.push(c); //\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808 } } while(op.size()) eval(); //\u8fd0\u7b97\u5269\u4f59 cout << num.top() << endl; return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/","text":"\u94fe\u8868\u4e0e\u90bb\u63a5\u8868 \u4f7f\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868 \u4e00\u3001\u6570\u7ec4\u6a21\u62df\u5355\u94fe\u8868\uff1a\u90bb\u63a5\u8868 \u90bb\u63a5\u8868\u7684\u5e94\u7528\uff1a\u5b58\u50a8 \u56fe \u548c \u6811 e[N] \u5b58\u50a8\u6570\u636e ne[N] \u5b58\u50a8\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff08\u4f7f\u7528\u4e0b\u6807\u5173\u8054\uff09 \u4e8c\u3001\u6570\u7ec4\u6a21\u62df\u53cc\u94fe\u8868 \u7528\u5904\uff1a\u4f18\u5316","title":"\u94fe\u8868\u4e0e\u90bb\u63a5\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/#_1","text":"\u4f7f\u7528\u6570\u7ec4\u6a21\u62df\u94fe\u8868","title":"\u94fe\u8868\u4e0e\u90bb\u63a5\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/#_2","text":"\u90bb\u63a5\u8868\u7684\u5e94\u7528\uff1a\u5b58\u50a8 \u56fe \u548c \u6811 e[N] \u5b58\u50a8\u6570\u636e ne[N] \u5b58\u50a8\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff08\u4f7f\u7528\u4e0b\u6807\u5173\u8054\uff09","title":"\u4e00\u3001\u6570\u7ec4\u6a21\u62df\u5355\u94fe\u8868\uff1a\u90bb\u63a5\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8%E4%B8%8E%E9%82%BB%E6%8E%A5%E8%A1%A8/#_3","text":"\u7528\u5904\uff1a\u4f18\u5316","title":"\u4e8c\u3001\u6570\u7ec4\u6a21\u62df\u53cc\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/","text":"Huffman \u54c8\u592b\u66fc\u6811 \u6784\u5efa\u601d\u60f3 \uff1a \u53cd\u590d\u9009\u62e9\u4e24\u4e2a\u6700\u5c0f\u7684\u5143\u7d20 \uff0c\u5408\u5e76\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20 \u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u6267\u884c\u8fd9\u79cd\u7b56\u7565 \u6211\u4eec\u65e0\u9700\u771f\u7684\u53bb\u6784\u5efa\u4e00\u9897\u54c8\u592b\u66fc\u6811\uff0c\u53ea\u9700\u8981\u80fd\u7684\u5230\u6700\u7ec8\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u8ba1\u79d1 \u5bf9\u4e8e\u540c\u4e00\u7ec4\u53f6\u5b50\u7ed3\u70b9\u6765\u8bf4\uff0c\u54c8\u592b\u66fc\u6811\u53ef\u4ee5\u662f\u4e0d\u552f\u4e00\u7684\uff0c\u4f46\u662f \u6700\u5c0f\u5e26\u6743\u8def\u5f84\u957f\u5ea6(WPL)\u4e00\u5b9a\u662f\u552f\u4e00 \u7684 148. \u5408\u5e76\u679c\u5b50 \u4ee3\u8868\u5c0f\u6839\u5806\u7684\u4f18\u5148\u961f\u5217\uff1a priority_queue<int, vector<int>, greater<int>> \u4ee3\u7801\uff1a #include <iostream> #include <algorithm> #include <queue> using namespace std; int main(){ int n; cin >> n; priority_queue<int, vector<int>, greater<int>> p; //\u6784\u5efa\u5c0f\u6839\u5806 while(n --){ int x; cin >> x; p.push(x); } int sum = 0; while(p.size() > 1){ //\u5806\u4e2d\u6700\u5c11\u5269\u4f59\u4e00\u4e2a\u5143\u7d20\uff08\u7ed3\u679c\uff09 int a = p.top(); p.pop();//\u53d6\u51fa\u4e24\u4e2a\u6700\u5c0f\u7684\u5143\u7d20 int b = p.top(); p.pop(); p.push(a + b); //\u65b0\u503c\u5165\u5806 sum += a + b; } cout << sum << endl; return 0; } \u54c8\u592b\u66fc\u7f16\u7801 \u5982\u679c\u5bf9\u4efb\u610f\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5206\u652f\u8fdb\u884c\u7f16\u53f7\uff08\u5de6\u5206\u652f\u6807\u8bb0\u4e3a0\uff0c\u53f3\u5206\u652f\u6807\u8bb0\u4e3a1\uff09\uff0c\u5219\u5bf9\u4e8e\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90fd\u53ef\u4ee5\u6839\u636e\u4e2d\u6839\u7ed3\u70b9\u51fa\u53d1\u5230\u8fbe\u5b83\u7684\u5206\u652f\u987a\u5e8f\u5f97\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u5e76\u4e14\uff0c \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5176\u7f16\u53f7\u4e00\u5b9a\u4e0d\u4f1a\u79f0\u4e3a\u5176\u4ed6\u4efb\u4f55\u4e00\u4e2a\u7ed3\u70b9\u7f16\u53f7\u7684\u524d\u7f00\uff08\u524d\u7f00\u7f16\u7801\uff09 - \u524d\u7f00\u7f16\u7801\u7684\u610f\u4e49\uff1a\u4e0d\u4ea7\u751f\u6df7\u6dc6\uff0c\u8ba9\u89e3\u7801\u6b63\u5e38\u8fdb\u884c - \u5c06\u6bcf\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3a\u5404\u81ea\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\uff0c\u5219 \u5b57\u7b26\u4e32\u7f16\u7801\u621001\u4e32\u540e\u7684\u957f\u5ea6\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6 - \u54c8\u592b\u66fc\u7f16\u7801\u662f\u9488\u5bf9\u786e\u5b9a\u7684\u5b57\u7b26\u4e32 - \u6bcf\u4e2a\u6b65\u9aa4\u5c06\u9891\u7387\u6700\u4f4e\u7684\u4e24\u68f5\u6811\u5408\u5e76\uff08\u6784\u5efa\u54c8\u592b\u66fc\u6811\uff09","title":"Huffman"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/#huffman","text":"","title":"Huffman"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/#_1","text":"\u6784\u5efa\u601d\u60f3 \uff1a \u53cd\u590d\u9009\u62e9\u4e24\u4e2a\u6700\u5c0f\u7684\u5143\u7d20 \uff0c\u5408\u5e76\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u5143\u7d20 \u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u4f18\u5148\u961f\u5217\u6765\u6267\u884c\u8fd9\u79cd\u7b56\u7565 \u6211\u4eec\u65e0\u9700\u771f\u7684\u53bb\u6784\u5efa\u4e00\u9897\u54c8\u592b\u66fc\u6811\uff0c\u53ea\u9700\u8981\u80fd\u7684\u5230\u6700\u7ec8\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6\u8ba1\u79d1 \u5bf9\u4e8e\u540c\u4e00\u7ec4\u53f6\u5b50\u7ed3\u70b9\u6765\u8bf4\uff0c\u54c8\u592b\u66fc\u6811\u53ef\u4ee5\u662f\u4e0d\u552f\u4e00\u7684\uff0c\u4f46\u662f \u6700\u5c0f\u5e26\u6743\u8def\u5f84\u957f\u5ea6(WPL)\u4e00\u5b9a\u662f\u552f\u4e00 \u7684","title":"\u54c8\u592b\u66fc\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/#148","text":"\u4ee3\u8868\u5c0f\u6839\u5806\u7684\u4f18\u5148\u961f\u5217\uff1a priority_queue<int, vector<int>, greater<int>>","title":"148. \u5408\u5e76\u679c\u5b50"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/#_2","text":"#include <iostream> #include <algorithm> #include <queue> using namespace std; int main(){ int n; cin >> n; priority_queue<int, vector<int>, greater<int>> p; //\u6784\u5efa\u5c0f\u6839\u5806 while(n --){ int x; cin >> x; p.push(x); } int sum = 0; while(p.size() > 1){ //\u5806\u4e2d\u6700\u5c11\u5269\u4f59\u4e00\u4e2a\u5143\u7d20\uff08\u7ed3\u679c\uff09 int a = p.top(); p.pop();//\u53d6\u51fa\u4e24\u4e2a\u6700\u5c0f\u7684\u5143\u7d20 int b = p.top(); p.pop(); p.push(a + b); //\u65b0\u503c\u5165\u5806 sum += a + b; } cout << sum << endl; return 0; }","title":"\u4ee3\u7801\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/Huffman/#_3","text":"\u5982\u679c\u5bf9\u4efb\u610f\u4e00\u9897\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5206\u652f\u8fdb\u884c\u7f16\u53f7\uff08\u5de6\u5206\u652f\u6807\u8bb0\u4e3a0\uff0c\u53f3\u5206\u652f\u6807\u8bb0\u4e3a1\uff09\uff0c\u5219\u5bf9\u4e8e\u6811\u4e0a\u7684\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90fd\u53ef\u4ee5\u6839\u636e\u4e2d\u6839\u7ed3\u70b9\u51fa\u53d1\u5230\u8fbe\u5b83\u7684\u5206\u652f\u987a\u5e8f\u5f97\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u5e76\u4e14\uff0c \u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5176\u7f16\u53f7\u4e00\u5b9a\u4e0d\u4f1a\u79f0\u4e3a\u5176\u4ed6\u4efb\u4f55\u4e00\u4e2a\u7ed3\u70b9\u7f16\u53f7\u7684\u524d\u7f00\uff08\u524d\u7f00\u7f16\u7801\uff09 - \u524d\u7f00\u7f16\u7801\u7684\u610f\u4e49\uff1a\u4e0d\u4ea7\u751f\u6df7\u6dc6\uff0c\u8ba9\u89e3\u7801\u6b63\u5e38\u8fdb\u884c - \u5c06\u6bcf\u4e00\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u4f5c\u4e3a\u5404\u81ea\u53f6\u5b50\u8282\u70b9\u7684\u6743\u503c\uff0c\u5219 \u5b57\u7b26\u4e32\u7f16\u7801\u621001\u4e32\u540e\u7684\u957f\u5ea6\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u68f5\u6811\u7684\u5e26\u6743\u8def\u5f84\u957f\u5ea6 - \u54c8\u592b\u66fc\u7f16\u7801\u662f\u9488\u5bf9\u786e\u5b9a\u7684\u5b57\u7b26\u4e32 - \u6bcf\u4e2a\u6b65\u9aa4\u5c06\u9891\u7387\u6700\u4f4e\u7684\u4e24\u68f5\u6811\u5408\u5e76\uff08\u6784\u5efa\u54c8\u592b\u66fc\u6811\uff09","title":"\u54c8\u592b\u66fc\u7f16\u7801"}]}